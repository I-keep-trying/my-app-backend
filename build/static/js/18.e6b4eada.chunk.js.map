{"version":3,"sources":["components/TableMobile.js"],"names":["CountriesTableMobile","useState","id","region","subregions","setRegion","dispatch","useDispatch","state","useSelector","unit","countriesFiltered","countries","filtered","length","initialCountries","attached","sortable","compact","selectable","unstackable","Header","filter","toLowerCase","celled","map","item","areaConvert","Math","round","area","Fragment","Row","textAlign","color","Column","width","labelPosition","icon","basic","fluid","content","name","common","onClick","country","location","undefined","capitalInfo","latlng","filterCountries","getCountryFeatures","getCountryNews","reg","regions","r","handleClick","cca3","alt","bordered","loading","size","src","flags","svg","capital","subregion","population","toLocaleString"],"mappings":"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","file":"static/js/18.e6b4eada.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Segment, Table, Image, Grid, Button } from 'semantic-ui-react'\r\nimport { filterCountries } from '../reducers/countriesReducer'\r\nimport {\r\n  getCountryNews,\r\n  getCountryFeatures,\r\n} from '../reducers/countryDataReducer'\r\nimport regions from '../regions'\r\nimport '../App1.css'\r\n\r\nconst CountriesTableMobile = () => {\r\n  const [, setRegion] = useState({\r\n    id: 'FZUe47mEY9PCOzYmMxzYY',\r\n    region: 'All',\r\n    subregions: [],\r\n  })\r\n\r\n  const dispatch = useDispatch()\r\n  const state = useSelector((state) => state)\r\n  const unit = useSelector((state) => state.unit.unit)\r\n\r\n  const countriesFiltered = useSelector((state) => {\r\n    return state.countries.filtered.length > 0\r\n      ? state.countries.filtered\r\n      : state.countries.initialCountries\r\n  })\r\n\r\n  const handleClick = (country) => {\r\n    const location =\r\n      country.capitalInfo.latlng === undefined\r\n        ? country.latlng\r\n        : country.capitalInfo.latlng\r\n    dispatch(filterCountries(country))\r\n    dispatch(getCountryFeatures(location))\r\n    if (country.region === 'Antarctic') {\r\n      dispatch(getCountryNews('Antarctic'))\r\n    } else {\r\n      dispatch(getCountryNews(country.name.common))\r\n    }\r\n    const reg = regions.filter((r) => r.region === country.region)\r\n    setRegion(reg[0])\r\n  }\r\n\r\n  return (\r\n    <Segment id=\"mobile-table\" attached=\"bottom\">\r\n      {countriesFiltered.length > 1 ? (\r\n        <>\r\n          <Table sortable compact selectable unstackable>\r\n            <Table.Header\r\n              id={\r\n                state.countries.filter.region.toLowerCase() === 'all'\r\n                  ? 'oneM'\r\n                  : 'twoM'\r\n              }\r\n            ></Table.Header>\r\n          </Table>\r\n          <Grid celled id=\"grid-mobile\">\r\n            {countriesFiltered.map((item) => {\r\n              const areaConvert = Math.round(item.area / 2.59)\r\n              return (\r\n                <React.Fragment key={item.cca3}>\r\n                  <Grid.Row textAlign=\"center\" color=\"black\">\r\n                    <Grid.Column width={16}>\r\n                      <Button\r\n                        labelPosition=\"right\"\r\n                        icon=\"right chevron\"\r\n                        basic\r\n                        color=\"yellow\"\r\n                        fluid\r\n                        content={item.name.common}\r\n                        onClick={() => handleClick(item)}\r\n                      ></Button>\r\n                    </Grid.Column>\r\n                  </Grid.Row>\r\n                  <Grid.Row>\r\n                    <Grid.Column width={4}>CCA3</Grid.Column>\r\n                    <Grid.Column width={12}>{item.cca3}</Grid.Column>\r\n                  </Grid.Row>\r\n                  <Grid.Row>\r\n                    <Grid.Column width={4}>Flag</Grid.Column>\r\n                    <Grid.Column width={12}>\r\n                      <Image\r\n                        alt=\"country flag\"\r\n                        bordered\r\n                        loading=\"lazy\"\r\n                        size=\"small\"\r\n                        src={item.flags.svg}\r\n                      />\r\n                    </Grid.Column>\r\n                  </Grid.Row>\r\n                  <Grid.Row>\r\n                    <Grid.Column width={4}>Capital</Grid.Column>\r\n                    <Grid.Column width={12}>{item.capital}</Grid.Column>\r\n                  </Grid.Row>\r\n                  <Grid.Row>\r\n                    <Grid.Column width={4}>Region</Grid.Column>\r\n                    <Grid.Column width={12}>{item.region}</Grid.Column>\r\n                  </Grid.Row>\r\n                  <Grid.Row>\r\n                    <Grid.Column width={4}>Subregion</Grid.Column>\r\n                    <Grid.Column width={12}>{item.subregion}</Grid.Column>\r\n                  </Grid.Row>\r\n                  <Grid.Row>\r\n                    <Grid.Column width={4}>Population</Grid.Column>\r\n                    <Grid.Column width={12}>\r\n                      {item.population.toLocaleString()}\r\n                    </Grid.Column>\r\n                  </Grid.Row>\r\n                  <Grid.Row>\r\n                    <Grid.Column width={4}>\r\n                      {unit === 'metric' ? 'Area km²' : 'Area mi²'}\r\n                    </Grid.Column>\r\n                    <Grid.Column width={12}>\r\n                      {unit === 'imperial'\r\n                        ? areaConvert.toLocaleString()\r\n                        : item.area.toLocaleString()}\r\n                    </Grid.Column>\r\n                  </Grid.Row>\r\n                </React.Fragment>\r\n              )\r\n            })}\r\n          </Grid>\r\n        </>\r\n      ) : null}\r\n    </Segment>\r\n  )\r\n}\r\n\r\nexport default CountriesTableMobile\r\n"],"sourceRoot":""}