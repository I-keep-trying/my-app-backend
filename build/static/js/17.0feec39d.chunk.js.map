{"version":3,"sources":["pages/CountriesMobile.js"],"names":["Country","loadable","MobileNav","CountriesTableMobile","NoMatches","open","setOpen","dispatch","useDispatch","clearInput","searchCountriesByName","basic","onClose","onOpen","size","dimmer","icon","name","Content","Actions","color","onClick","Countries","useState","geo","setGeo","countriesFiltered","useSelector","state","countries","filtered","contextRef","useRef","getGeo","countryName","a","axios","get","res","selectedGeo","data","useEffect","length","common","region","getCountryNews","id","ref","context"],"mappings":"gTAeMA,EAAUC,aAAS,kBAAM,wDACzBC,EAAYD,aAAS,kBAAM,gEAC3BE,EAAuBF,aAAS,kBAAM,yDAEtCG,EAAY,SAACC,EAAMC,GACvB,IAAMC,EAAWC,cAEXC,EAAa,WACjBF,EAASG,YAAsB,MAGjC,OACE,eAAC,IAAD,CACEC,OAAK,EACLC,QAAS,kBAAMH,KACfI,OAAQ,kBAAMP,GAAQ,IACtBD,KAAMA,EAAKA,KACXS,KAAK,OACLC,OAAO,WANT,UAQE,eAAC,IAAD,CAAQC,MAAI,EAAZ,UACE,cAAC,IAAD,CAAMC,KAAK,kBADb,gBAIA,cAAC,IAAMC,QAAP,UACE,oFAEF,cAAC,IAAMC,QAAP,UACE,cAAC,IAAD,CAAQR,OAAK,EAACS,MAAM,QAAQC,QAAS,kBAAMZ,KAA3C,sBAwDOa,UAhDG,WAChB,MAAsBC,mBAAS,IAA/B,mBAAOC,EAAP,KAAYC,EAAZ,KACA,EAAwBF,oBAAS,GAAjC,mBAAOlB,EAAP,KAAaC,EAAb,KAEMC,EAAWC,cAEXkB,EAAoBC,aAAY,SAACC,GAAD,OAAWA,EAAMC,UAAUC,YAE3DC,EAAaC,mBAEbC,EAAM,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,sEACKC,IAAMC,IAAN,uDACgCH,EADhC,mCADL,cACPI,EADO,OAIPC,EAAcD,EAAIE,KAAK,GAJhB,kBAKNf,EAAOc,IALD,2CAAH,sDAsBZ,OAdAE,qBAAU,WACR,GAAiC,IAA7Bf,EAAkBgB,OAAc,CAClC,IAAMR,EAAcR,EAAkB,GAAGT,KAAK0B,OACV,cAAhCjB,EAAkB,GAAGkB,OACvBrC,EAASsC,YAAe,cAExBtC,EAASsC,YAAenB,EAAkB,GAAGT,KAAK0B,SAEpDV,EAAOC,QAC+B,IAA7BR,EAAkBgB,QAC3BpC,GAAQ,KAET,CAACoB,IAGF,sBAAKoB,GAAG,MAAMC,IAAKhB,EAAnB,UACE,cAAC,IAAD,CAAQe,GAAG,SAASE,QAASjB,EAA7B,SACE,cAAC7B,EAAD,MAE4B,IAA7BwB,EAAkBgB,OACjB,cAAC1C,EAAD,CAASwB,IAAKA,IACiB,IAA7BE,EAAkBgB,OACpB,cAACtC,EAAD,CAAWC,KAAMA,EAAMC,QAASA,IAEhC,cAACH,EAAD","file":"static/js/17.0feec39d.chunk.js","sourcesContent":["import React, { useState, useRef, useEffect } from 'react'\r\nimport axios from 'axios'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport {\r\n  Sticky,\r\n  Button,\r\n  Modal,\r\n  Header,\r\n  Icon,\r\n} from 'semantic-ui-react'\r\nimport { searchCountriesByName } from '../reducers/countriesReducer'\r\nimport { getCountryNews } from '../reducers/countryNewsReducer'\r\nimport '../assets/css/App1.css'\r\nimport loadable from '@loadable/component'\r\n\r\nconst Country = loadable(() => import('./CountryMobile'))\r\nconst MobileNav = loadable(() => import('../components/HeaderMobile'))\r\nconst CountriesTableMobile = loadable(() => import('../components/TableMobile'))\r\n\r\nconst NoMatches = (open, setOpen) => {\r\n  const dispatch = useDispatch()\r\n\r\n  const clearInput = () => {\r\n    dispatch(searchCountriesByName(''))\r\n  }\r\n\r\n  return (\r\n    <Modal\r\n      basic\r\n      onClose={() => clearInput()}\r\n      onOpen={() => setOpen(true)}\r\n      open={open.open}\r\n      size=\"mini\"\r\n      dimmer=\"inverted\"\r\n    >\r\n      <Header icon>\r\n        <Icon name=\"frown outline\" />\r\n        No Matches\r\n      </Header>\r\n      <Modal.Content>\r\n        <p>Your search returned 0 matches. Please try again.</p>\r\n      </Modal.Content>\r\n      <Modal.Actions>\r\n        <Button basic color=\"black\" onClick={() => clearInput()}>\r\n          OK\r\n        </Button>\r\n      </Modal.Actions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nconst Countries = () => {\r\n  const [geo, setGeo] = useState([])\r\n  const [open, setOpen] = useState(false)\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const countriesFiltered = useSelector((state) => state.countries.filtered)\r\n\r\n  const contextRef = useRef()\r\n\r\n  const getGeo = async (countryName) => {\r\n    const res = await axios.get(\r\n      `https://nominatim.openstreetmap.org/search?q=${countryName}&polygon_geojson=1&format=json`\r\n    )\r\n    const selectedGeo = res.data[0]\r\n    return setGeo(selectedGeo)\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (countriesFiltered.length === 1) {\r\n      const countryName = countriesFiltered[0].name.common\r\n      if (countriesFiltered[0].region === 'Antarctic') {\r\n        dispatch(getCountryNews('Antarctic'))\r\n      } else {\r\n        dispatch(getCountryNews(countriesFiltered[0].name.common))\r\n      }\r\n      getGeo(countryName)\r\n    } else if (countriesFiltered.length === 0) {\r\n      setOpen(true)\r\n    }\r\n  }, [countriesFiltered])\r\n\r\n  return (\r\n    <div id=\"ref\" ref={contextRef}>\r\n      <Sticky id=\"Sticky\" context={contextRef}>\r\n        <MobileNav />\r\n      </Sticky>\r\n      {countriesFiltered.length === 1 ? (\r\n        <Country geo={geo} />\r\n      ) : countriesFiltered.length === 0 ? (\r\n        <NoMatches open={open} setOpen={setOpen} />\r\n      ) : (\r\n        <CountriesTableMobile />\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Countries\r\n"],"sourceRoot":""}