{"version":3,"sources":["assets/images/ua.svg","components/HeaderMobile.js"],"names":["HeaderNav","useState","value","setValue","id","region","subregions","setRegion","open","setOpen","state","useSelector","console","log","recordsFound","countries","filtered","activeRegion","filter","activeSubregion","subregion","unit","dispatch","useDispatch","handleInput","e","preventDefault","input","target","searchCountriesByName","clearInput","handleSort","key","sortCountries","attached","inverted","borderless","Item","header","onClick","alt","srcSet","flag","size","src","as","href","Menu","position","color","content","val","toggleUnit","vertical","fluid","icon","link","name","length","type","placeholder","onChange","labelPosition","basic","textAlign","common","item","inline","text","defaultValue","sortConfig","direction","regions","map","r","reg","filterCountriesByRegion","s","sub","filterCountriesBySubRegion"],"mappings":"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","file":"static/js/14.94cf5e73.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/ua.a0300d6e.svg\";","import React, { useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport {\r\n  Menu,\r\n  Icon,\r\n  Input,\r\n  Label,\r\n  Dropdown,\r\n  Button,\r\n  Segment,\r\n  Image,\r\n  Header,\r\n  Modal,\r\n} from 'semantic-ui-react'\r\nimport {\r\n  toggleUnit,\r\n  toggleMenu,\r\n  searchCountriesByName,\r\n  sortCountries,\r\n  filterCountriesBySubRegion,\r\n  filterCountriesByRegion,\r\n} from '../reducers/countriesReducer'\r\n\r\nimport regions from '../regions'\r\n\r\nimport '../assets/css/App.css'\r\nimport flag from '../assets/images/ua.svg'\r\n\r\nconst HeaderNav = () => {\r\n  const [value, setValue] = useState('')\r\n  const [region, setRegion] = useState({\r\n    id: 'FZUe47mEY9PCOzYmMxzYY',\r\n    region: 'All',\r\n    subregions: [],\r\n  })\r\n  const [open, setOpen] = useState(false)\r\n\r\n  const state = useSelector((state) => state)\r\n  console.log('state', state)\r\n  const recordsFound = useSelector((state) => state.countries.filtered)\r\n\r\n  const activeRegion = useSelector((state) => state.countries.filter.region) //region object\r\n  const activeSubregion = useSelector(\r\n    (state) => state.countries.filter.subregion\r\n  ) //subregion string\r\n  const unit = useSelector((state) => state.unit.unit)\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const handleInput = (e) => {\r\n    e.preventDefault()\r\n    const input = e.target.value\r\n    dispatch(searchCountriesByName(input))\r\n    setValue(input)\r\n  }\r\n\r\n  const clearInput = () => {\r\n    dispatch(searchCountriesByName(''))\r\n    setValue('')\r\n  }\r\n\r\n  const showHideMenu = () => {\r\n    // dispatch(toggleMenu())\r\n  }\r\n\r\n  const showModal = () => {\r\n    setOpen(true)\r\n  }\r\n\r\n  const closeModal = () => {\r\n    setOpen(false)\r\n  }\r\n\r\n  const changeUnit = (val) => {\r\n    dispatch(toggleUnit(val))\r\n  }\r\n\r\n  const handleSort = (key) => {\r\n    dispatch(sortCountries(key))\r\n  }\r\n\r\n  const handleRegionClick = (reg) => {\r\n    dispatch(filterCountriesByRegion(reg))\r\n    setRegion(reg)\r\n    setValue('')\r\n  }\r\n\r\n  const handleSubregionClick = (sub) => {\r\n    dispatch(filterCountriesBySubRegion(sub))\r\n    setValue('')\r\n  }\r\n\r\n  const handleSubClose = () => {\r\n    dispatch(filterCountriesByRegion(activeRegion))\r\n  }\r\n  console.log('open? ', open)\r\n  return (\r\n    <>\r\n      <Menu attached=\"top\" inverted borderless>\r\n        <Menu.Item\r\n          id=\"app-title\"\r\n          header\r\n          onClick={() => {\r\n            showModal()\r\n          }}\r\n        >\r\n          <p> World Countries</p>\r\n        </Menu.Item>\r\n        <Menu.Item id=\"flag-menu\">\r\n          <Image\r\n            alt=\"ukraine flag\"\r\n            srcSet={`${flag} 100w`}\r\n            size=\"tiny\"\r\n            src={flag}\r\n            as=\"a\"\r\n            href=\"https://supportukrainenow.org/\"\r\n          />\r\n        </Menu.Item>\r\n        <Menu.Menu position=\"right\">\r\n          <Menu.Item>\r\n            <Button\r\n              size=\"massive\"\r\n              color=\"yellow\"\r\n              inverted\r\n              content={unit === 'metric' ? 'imperial' : 'metric'}\r\n              onClick={() =>\r\n                changeUnit(unit === 'metric' ? 'imperial' : 'metric')\r\n              }\r\n            ></Button>\r\n          </Menu.Item>\r\n        </Menu.Menu>\r\n      </Menu>\r\n\r\n      {/* text input */}\r\n      <Menu id=\"mobile-header\" inverted vertical fluid>\r\n        <Menu.Item id=\"mobile-header-item\">\r\n          <Input\r\n            inverted\r\n            size=\"mini\"\r\n            icon={\r\n              <Icon\r\n                link\r\n                name={value.length > 0 ? 'close' : 'search'}\r\n                onClick={value.length > 0 ? clearInput : handleInput}\r\n              />\r\n            }\r\n            type=\"search\"\r\n            value={value}\r\n            placeholder=\"Search by name\"\r\n            onChange={handleInput}\r\n          />\r\n        </Menu.Item>\r\n      </Menu>\r\n      <Menu id=\"mobile-header2\" inverted vertical fluid>\r\n        <Menu.Item id=\"mobile-header2-item\">\r\n          {recordsFound.length}\r\n          {recordsFound.length === 1 ? ' record found' : ' records found'}\r\n        </Menu.Item>\r\n      </Menu>\r\n      {/* \r\n      {open === true ? (\r\n        <Modal\r\n          open={open}\r\n          //onClose={closeModal()}\r\n        >\r\n          <Modal.Header>About</Modal.Header>\r\n          <Button\r\n          onClick={ setOpen(false)}\r\n          >\r\n            OK\r\n          </Button>\r\n        </Modal>\r\n      ) : (\r\n        <></>\r\n      )}\r\n */}\r\n      {/* sort menu */}\r\n      {recordsFound.length === 1 ? (\r\n        <>\r\n          <Segment inverted>\r\n            <Button\r\n              labelPosition=\"left\"\r\n              icon=\"left chevron\"\r\n              basic\r\n              color=\"yellow\"\r\n              fluid\r\n              content=\"All Countries\"\r\n              onClick={() => dispatch(searchCountriesByName(''))}\r\n            ></Button>\r\n            <Header id=\"country-header\" textAlign=\"center\">\r\n              {recordsFound[0].name.common}\r\n            </Header>\r\n          </Segment>\r\n        </>\r\n      ) : (\r\n        <>\r\n          <Menu inverted borderless size=\"tiny\">\r\n            <Dropdown item inline text=\"Sort\" defaultValue=\"Name\">\r\n              <Dropdown.Menu id=\"dropdown menu\">\r\n                <Dropdown.Item onClick={() => handleSort('name')}>\r\n                  {state.countries.sortConfig.key === 'name' ? (\r\n                    <Icon\r\n                      name={\r\n                        state.countries.sortConfig.direction === 'ascending'\r\n                          ? 'arrow up'\r\n                          : 'arrow down'\r\n                      }\r\n                    />\r\n                  ) : (\r\n                    <></>\r\n                  )}\r\n                  Name\r\n                </Dropdown.Item>\r\n                <Dropdown.Item onClick={() => handleSort('capital')}>\r\n                  {state.countries.sortConfig.key === 'capital' ? (\r\n                    <Icon\r\n                      name={\r\n                        state.countries.sortConfig.direction === 'ascending'\r\n                          ? 'arrow up'\r\n                          : 'arrow down'\r\n                      }\r\n                    />\r\n                  ) : (\r\n                    <></>\r\n                  )}\r\n                  Capital\r\n                </Dropdown.Item>\r\n                <Dropdown.Item onClick={() => handleSort('region')}>\r\n                  {state.countries.sortConfig.key === 'region' ? (\r\n                    <Icon\r\n                      name={\r\n                        state.countries.sortConfig.direction === 'ascending'\r\n                          ? 'arrow up'\r\n                          : 'arrow down'\r\n                      }\r\n                    />\r\n                  ) : (\r\n                    <></>\r\n                  )}\r\n                  Region\r\n                </Dropdown.Item>\r\n                <Dropdown.Item onClick={() => handleSort('subregion')}>\r\n                  {state.countries.sortConfig.key === 'subregion' ? (\r\n                    <Icon\r\n                      name={\r\n                        state.countries.sortConfig.direction === 'ascending'\r\n                          ? 'arrow up'\r\n                          : 'arrow down'\r\n                      }\r\n                    />\r\n                  ) : (\r\n                    <></>\r\n                  )}\r\n                  Subregion\r\n                </Dropdown.Item>\r\n                <Dropdown.Item onClick={() => handleSort('population')}>\r\n                  {state.countries.sortConfig.key === 'population' ? (\r\n                    <Icon\r\n                      name={\r\n                        state.countries.sortConfig.direction === 'ascending'\r\n                          ? 'arrow up'\r\n                          : 'arrow down'\r\n                      }\r\n                    />\r\n                  ) : (\r\n                    <></>\r\n                  )}\r\n                  Population\r\n                </Dropdown.Item>\r\n                <Dropdown.Item onClick={() => handleSort('area')}>\r\n                  {state.countries.sortConfig.key === 'area' ? (\r\n                    <Icon\r\n                      name={\r\n                        state.countries.sortConfig.direction === 'ascending'\r\n                          ? 'arrow up'\r\n                          : 'arrow down'\r\n                      }\r\n                    />\r\n                  ) : (\r\n                    <></>\r\n                  )}\r\n                  Area\r\n                </Dropdown.Item>\r\n              </Dropdown.Menu>\r\n            </Dropdown>\r\n\r\n            <Menu.Item position=\"right\">\r\n              Sorted by: {state.countries.sortConfig.key}\r\n              {', '}\r\n              {state.countries.sortConfig.direction}\r\n            </Menu.Item>\r\n          </Menu>\r\n          {/* Filter By Region Dropdown */}\r\n          <Menu inverted borderless size=\"tiny\">\r\n            <Dropdown item inline text=\"Filter\">\r\n              <Dropdown.Menu>\r\n                {regions.map((r) => (\r\n                  <Dropdown.Item\r\n                    key={r.id}\r\n                    text={r.region}\r\n                    value={r.region}\r\n                    onClick={() => handleRegionClick(r)}\r\n                  />\r\n                ))}\r\n              </Dropdown.Menu>\r\n            </Dropdown>\r\n            <Menu.Item position=\"right\">\r\n              {/*    Filtered by: {activeItem} */}\r\n              {region.region !== 'All' ? (\r\n                <Label>\r\n                  {region.region}\r\n                  <Icon onClick={() => clearInput()} name=\"delete\" />\r\n                </Label>\r\n              ) : (\r\n                ''\r\n              )}\r\n            </Menu.Item>\r\n          </Menu>\r\n          {/* Filter By Subregion Dropdown */}\r\n          {region.region !== 'All' ? (\r\n            <Menu inverted borderless size=\"tiny\">\r\n              <Dropdown item inline text=\"Subregion\">\r\n                <Dropdown.Menu>\r\n                  {region.subregions.map((s) => (\r\n                    <Dropdown.Item\r\n                      key={s.id}\r\n                      text={s.name}\r\n                      value={s.name}\r\n                      onClick={() => handleSubregionClick(s.name)}\r\n                    />\r\n                  ))}\r\n                </Dropdown.Menu>\r\n              </Dropdown>\r\n              <Menu.Item position=\"right\">\r\n                {activeSubregion !== '' ? (\r\n                  <Label>\r\n                    {activeSubregion}\r\n                    <Icon onClick={() => handleSubClose()} name=\"delete\" />{' '}\r\n                  </Label>\r\n                ) : (\r\n                  ''\r\n                )}\r\n              </Menu.Item>\r\n            </Menu>\r\n          ) : (\r\n            <></>\r\n          )}\r\n        </>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default HeaderNav\r\n"],"sourceRoot":""}