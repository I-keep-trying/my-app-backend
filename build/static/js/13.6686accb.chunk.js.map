{"version":3,"sources":["pages/Countries.js"],"names":["HeaderNav","loadable","Country","CountriesTable","Countries","useState","id","region","subregions","setRegion","dispatch","useDispatch","state","useSelector","countriesFiltered","countries","filtered","length","initialCountries","contextRef","useRef","ref","style","width","context","data","attached","tabular","widths","border","backgroundColor","regions","map","r","Item","active","filter","toLowerCase","onClick","reg","filterCountriesByRegion","window","localStorage","clear","s","i","subregion","sub","filterCountriesBySubRegion"],"mappings":"kmCAUMA,EAAYC,aAAS,kBAAM,+DAC3BC,EAAUD,aAAS,kBAAM,+DACzBE,EAAiBF,aAAS,kBAAM,+DA6FvBG,UA3FG,WAEhB,MAA4BC,mBAAS,CACnCC,GAAI,wBACJC,OAAQ,MACRC,WAAY,KAHd,mBAAOD,EAAP,KAAeE,EAAf,KAMMC,EAAWC,cACXC,EAAQC,aAAY,SAACD,GAAD,OAAWA,KAE/BE,EAAoBD,aAAY,SAACD,GACrC,OAAOA,EAAMG,UAAUC,SAASC,OAAS,EACrCL,EAAMG,UAAUC,SAChBJ,EAAMG,UAAUG,oBAehBC,EAAaC,mBAEnB,OACE,sBAAKd,GAAG,MAAMe,IAAKF,EAAYG,MAAO,CAAEC,MAAO,QAA/C,UACE,eAAC,IAAD,CAAQjB,GAAG,SAASkB,QAASL,EAA7B,UACE,cAACnB,EAAD,IAC8B,IAA7Bc,EAAkBG,OACjB,cAACf,EAAD,CAASuB,KAAMX,EAAkB,KAEjC,qCACE,cAAC,IAAD,CACEY,SAAS,MACTC,SAAO,EACPC,OAAQ,EACRN,MAAO,CAAEO,OAAQ,EAAGC,gBAAiB,QAJvC,SAMGC,EAAQC,KAAI,SAACC,GAAD,OACX,cAAC,IAAKC,KAAN,CAEEC,OACEvB,EAAMG,UAAUqB,OAAO7B,OAAO8B,gBAC9BJ,EAAE1B,OAAO8B,cAEXC,QAAS,kBAnCEC,EAmCsBN,EAlC/CvB,EAAS8B,YAAwBD,EAAIhC,SACrCE,EAAU8B,QACS,QAAfA,EAAIhC,QACNkC,OAAOC,aAAaC,SAJE,IAACJ,GA6Bb,SAQgB,QAAbN,EAAE1B,OAAmB,cAAgB0B,EAAE1B,QAPnC0B,EAAE3B,SAWoC,QAAhDM,EAAMG,UAAUqB,OAAO7B,OAAO8B,cAC7B,mCACE,cAAC,IAAD,CACET,OAAQrB,EAAOC,WAAWS,OAC1BS,UAAQ,EACRC,SAAO,EACPL,MAAO,CAAEQ,gBAAiB,QAJ5B,SAMGvB,EAAOC,WAAWwB,KAAI,SAACY,EAAGC,GAAJ,OACrB,cAAC,IAAKX,KAAN,CAEEC,OACEvB,EAAMG,UAAUqB,OAAOU,UAAUT,gBACjCO,EAAEP,cAEJC,QAAS,kBAhDCS,EAgD0BH,OA/CtDlC,EAASsC,YAA2BD,IADT,IAACA,GA0CZ,SAQGH,GAPIC,UAab,mCAKR,cAAC1C,EAAD","file":"static/js/13.6686accb.chunk.js","sourcesContent":["import React, { useState, useRef } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Sticky, Menu } from 'semantic-ui-react'\r\nimport loadable from '@loadable/component'\r\nimport {\r\n  filterCountriesByRegion,\r\n  filterCountriesBySubRegion,\r\n} from '../reducers/countryReducer'\r\nimport regions from '../regions'\r\nimport '../App1.css'\r\nconst HeaderNav = loadable(() => import('../components/Header'))\r\nconst Country = loadable(() => import('./Country'))\r\nconst CountriesTable = loadable(() => import('../components/Table'))\r\n\r\nconst Countries = () => {\r\n  // 'useState' region/subregion is only being used to identify menu active tab\r\n  const [region, setRegion] = useState({\r\n    id: 'FZUe47mEY9PCOzYmMxzYY',\r\n    region: 'All',\r\n    subregions: [],\r\n  })\r\n\r\n  const dispatch = useDispatch()\r\n  const state = useSelector((state) => state)\r\n\r\n  const countriesFiltered = useSelector((state) => {\r\n    return state.countries.filtered.length > 0\r\n      ? state.countries.filtered\r\n      : state.countries.initialCountries\r\n  })\r\n\r\n  const handleRegionClick = (reg) => {\r\n    dispatch(filterCountriesByRegion(reg.region))\r\n    setRegion(reg)\r\n    if (reg.region === 'All') {\r\n      window.localStorage.clear()\r\n    }\r\n  }\r\n\r\n  const handleSubregionClick = (sub) => {\r\n    dispatch(filterCountriesBySubRegion(sub))\r\n  }\r\n\r\n  const contextRef = useRef()\r\n\r\n  return (\r\n    <div id=\"ref\" ref={contextRef} style={{ width: '100%' }}>\r\n      <Sticky id=\"Sticky\" context={contextRef}>\r\n        <HeaderNav />\r\n        {countriesFiltered.length === 1 ? (\r\n          <Country data={countriesFiltered[0]} />\r\n        ) : (\r\n          <>\r\n            <Menu\r\n              attached=\"top\"\r\n              tabular\r\n              widths={7}\r\n              style={{ border: 0, backgroundColor: '#fff' }}\r\n            >\r\n              {regions.map((r) => (\r\n                <Menu.Item\r\n                  key={r.id}\r\n                  active={\r\n                    state.countries.filter.region.toLowerCase() ===\r\n                    r.region.toLowerCase()\r\n                  }\r\n                  onClick={() => handleRegionClick(r)}\r\n                >\r\n                  {r.region === 'All' ? 'All Regions' : r.region}\r\n                </Menu.Item>\r\n              ))}\r\n            </Menu>\r\n            {state.countries.filter.region.toLowerCase() !== 'all' ? (\r\n              <>\r\n                <Menu\r\n                  widths={region.subregions.length}\r\n                  attached\r\n                  tabular\r\n                  style={{ backgroundColor: '#fff' }}\r\n                >\r\n                  {region.subregions.map((s, i) => (\r\n                    <Menu.Item\r\n                      key={i}\r\n                      active={\r\n                        state.countries.filter.subregion.toLowerCase() ===\r\n                        s.toLowerCase()\r\n                      }\r\n                      onClick={() => handleSubregionClick(s)}\r\n                    >\r\n                      {s}\r\n                    </Menu.Item>\r\n                  ))}\r\n                </Menu>\r\n              </>\r\n            ) : (\r\n              <></>\r\n            )}\r\n          </>\r\n        )}\r\n      </Sticky>\r\n      <CountriesTable />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Countries\r\n"],"sourceRoot":""}