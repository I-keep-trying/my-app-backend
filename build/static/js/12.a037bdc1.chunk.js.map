{"version":3,"sources":["services/sortableTable.js","../node_modules/semantic-ui-react/dist/es/elements/Segment/SegmentGroup.js","../node_modules/semantic-ui-react/dist/es/elements/Segment/SegmentInline.js","../node_modules/semantic-ui-react/dist/es/elements/Segment/Segment.js","components/Table.js","../node_modules/semantic-ui-react/dist/es/collections/Table/TableBody.js","../node_modules/semantic-ui-react/dist/es/collections/Table/TableCell.js","../node_modules/semantic-ui-react/dist/es/collections/Table/TableHeader.js","../node_modules/semantic-ui-react/dist/es/collections/Table/TableFooter.js","../node_modules/semantic-ui-react/dist/es/collections/Table/TableHeaderCell.js","../node_modules/semantic-ui-react/dist/es/collections/Table/TableRow.js","../node_modules/semantic-ui-react/dist/es/collections/Table/Table.js"],"names":["useSortableData1","items","useState","key","direction","sortConfig","setSortConfig","window","localStorage","setItem","now","Date","getTime","setupTime","getItem","clear","useMemo","sortableItems","sort","a","b","common","localeCompare","requestSort","SegmentGroup","props","children","className","compact","content","horizontal","piled","raised","size","stacked","classes","cx","useKeyOnly","rest","getUnhandledProps","ElementType","getElementType","React","createElement","_extends","childrenUtils","isNil","handledProps","propTypes","SegmentInline","Segment","attached","basic","circular","clearing","color","disabled","floated","inverted","loading","placeholder","padded","secondary","tertiary","textAlign","vertical","useKeyOrValueAndKey","useTextAlignProp","useValueAndKey","Group","Inline","CountriesTable1","id","region","subregions","setRegion","dispatch","useDispatch","state","useSelector","unit","countriesFiltered","countries","filtered","length","initialCountries","countriesFilteredByRegion","countriesFilteredBySubRegion","countriesToRender","useSortableData","sortIcons","name","console","dir","isIE","style","padding","border","sortable","selectable","unstackable","Header","filter","toLowerCase","top","Row","fieldName","map","HeaderCell","onClick","Body","item","areaConvert","Math","round","area","cursor","country","filterCountries","reg","regions","r","handleClick","Cell","cca3","srcSet","flags","svg","width","height","src","png","alt","bordered","undefined","capital","subregion","population","toLocaleString","CountriesTable","memo","TableBody","defaultProps","as","TableCell","active","collapsing","error","icon","negative","positive","singleLine","verticalAlign","warning","useVerticalAlignProp","useWidthProp","Icon","create","createShorthandFactory","TableHeader","fullWidth","TableFooter","TableHeaderCell","sorted","TableRow","cellAs","cells","_map","cell","Table","celled","columns","definition","fixed","footerRow","headerRow","headerRows","renderBodyRow","stackable","striped","structured","tableData","headerShorthandOptions","headerElement","data","index","Footer"],"mappings":"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","file":"static/js/12.a037bdc1.chunk.js","sourcesContent":["import { useState, useMemo } from 'react'\n\nconst useSortableData1 = (items) => {\n  const [sortConfig, setSortConfig] = useState({\n    key: 'name',\n    direction: 'ascending',\n  })\n\n  // set initial sort\n  window.localStorage.setItem('sort key', sortConfig.key)\n  window.localStorage.setItem('direction', sortConfig.direction)\n\n  // set expiration for local storage to clear\n  const now = new Date().getTime()\n  const setupTime = localStorage.getItem('setupTime')\n  if (setupTime == null) {\n    localStorage.setItem('setupTime', now)\n  } else {\n    if (now - setupTime > 1 * 60 * 60 * 1000) {\n      localStorage.clear()\n      localStorage.setItem('setupTime', now)\n    }\n  }\n\n  const sortedItems = useMemo(() => {\n    let sortableItems = [...items]\n    if (sortConfig.key === 'area' || sortConfig.key === 'population') {\n      sortableItems.sort((a, b) => {\n        if (a[sortConfig.key] < b[sortConfig.key]) {\n          return sortConfig.direction === 'ascending' ? -1 : 1\n        }\n        if (a[sortConfig.key] > b[sortConfig.key]) {\n          return sortConfig.direction === 'ascending' ? 1 : -1\n        }\n        return 0\n      })\n    } else if (sortConfig.key === 'name') {\n      sortableItems.sort((a, b) => {\n        return sortConfig.direction === 'ascending'\n          ? a[sortConfig.key].common.localeCompare(b[sortConfig.key].common)\n          : b[sortConfig.key].common.localeCompare(a[sortConfig.key].common)\n      })\n    } else if (sortConfig.key === 'capital') {\n      sortableItems.sort((a, b) => {\n        return sortConfig.direction === 'ascending'\n          ? a[sortConfig.key][0].localeCompare(b[sortConfig.key][0])\n          : b[sortConfig.key][0].localeCompare(a[sortConfig.key][0])\n      })\n    } else {\n      sortableItems.sort((a, b) => {\n        return a[sortConfig.key] && sortConfig.direction === 'ascending'\n          ? a[sortConfig.key].localeCompare(b[sortConfig.key])\n          : b[sortConfig.key].localeCompare(a[sortConfig.key])\n      })\n    }\n\n    return sortableItems\n  }, [items, sortConfig])\n\n  const requestSort = (key) => {\n    let direction =\n      sortConfig.direction === 'ascending' ? 'descending' : 'ascending'\n    setSortConfig({ key, direction })\n    window.localStorage.setItem('sort key', key)\n    window.localStorage.setItem('direction', direction)\n  }\n\n  return { items: sortedItems, requestSort }\n}\n\n//const useSortableData = React.memo(useSortableData1)\n\nexport default useSortableData1\n\n// original table sort code: https://codesandbox.io/s/table-sorting-gxt7g?file=/src/App.js:161-2693\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _without from \"lodash-es/without\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly } from '../../lib';\n/**\n * A group of segments can be formatted to appear together.\n */\n\nfunction SegmentGroup(props) {\n  var children = props.children,\n      className = props.className,\n      compact = props.compact,\n      content = props.content,\n      horizontal = props.horizontal,\n      piled = props.piled,\n      raised = props.raised,\n      size = props.size,\n      stacked = props.stacked;\n  var classes = cx('ui', size, useKeyOnly(compact, 'compact'), useKeyOnly(horizontal, 'horizontal'), useKeyOnly(piled, 'piled'), useKeyOnly(raised, 'raised'), useKeyOnly(stacked, 'stacked'), 'segments', className);\n  var rest = getUnhandledProps(SegmentGroup, props);\n  var ElementType = getElementType(SegmentGroup, props);\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nSegmentGroup.handledProps = [\"as\", \"children\", \"className\", \"compact\", \"content\", \"horizontal\", \"piled\", \"raised\", \"size\", \"stacked\"];\nSegmentGroup.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** A segment may take up only as much space as is necessary. */\n  compact: PropTypes.bool,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** Formats content to be aligned horizontally. */\n  horizontal: PropTypes.bool,\n\n  /** Formatted to look like a pile of pages. */\n  piled: PropTypes.bool,\n\n  /** A segment group may be formatted to raise above the page. */\n  raised: PropTypes.bool,\n\n  /** A segment group can have different sizes. */\n  size: PropTypes.oneOf(_without(SUI.SIZES, 'medium')),\n\n  /** Formatted to show it contains multiple pages. */\n  stacked: PropTypes.bool\n} : {};\nexport default SegmentGroup;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps } from '../../lib';\n/**\n * A placeholder segment can be inline.\n */\n\nfunction SegmentInline(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content;\n  var classes = cx('inline', className);\n  var rest = getUnhandledProps(SegmentInline, props);\n  var ElementType = getElementType(SegmentInline, props);\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nSegmentInline.handledProps = [\"as\", \"children\", \"className\", \"content\"];\nSegmentInline.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand\n} : {};\nexport default SegmentInline;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _without from \"lodash-es/without\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useKeyOrValueAndKey, useTextAlignProp, useValueAndKey } from '../../lib';\nimport SegmentGroup from './SegmentGroup';\nimport SegmentInline from './SegmentInline';\n/**\n * A segment is used to create a grouping of related content.\n */\n\nfunction Segment(props) {\n  var attached = props.attached,\n      basic = props.basic,\n      children = props.children,\n      circular = props.circular,\n      className = props.className,\n      clearing = props.clearing,\n      color = props.color,\n      compact = props.compact,\n      content = props.content,\n      disabled = props.disabled,\n      floated = props.floated,\n      inverted = props.inverted,\n      loading = props.loading,\n      placeholder = props.placeholder,\n      padded = props.padded,\n      piled = props.piled,\n      raised = props.raised,\n      secondary = props.secondary,\n      size = props.size,\n      stacked = props.stacked,\n      tertiary = props.tertiary,\n      textAlign = props.textAlign,\n      vertical = props.vertical;\n  var classes = cx('ui', color, size, useKeyOnly(basic, 'basic'), useKeyOnly(circular, 'circular'), useKeyOnly(clearing, 'clearing'), useKeyOnly(compact, 'compact'), useKeyOnly(disabled, 'disabled'), useKeyOnly(inverted, 'inverted'), useKeyOnly(loading, 'loading'), useKeyOnly(placeholder, 'placeholder'), useKeyOnly(piled, 'piled'), useKeyOnly(raised, 'raised'), useKeyOnly(secondary, 'secondary'), useKeyOnly(stacked, 'stacked'), useKeyOnly(tertiary, 'tertiary'), useKeyOnly(vertical, 'vertical'), useKeyOrValueAndKey(attached, 'attached'), useKeyOrValueAndKey(padded, 'padded'), useTextAlignProp(textAlign), useValueAndKey(floated, 'floated'), 'segment', className);\n  var rest = getUnhandledProps(Segment, props);\n  var ElementType = getElementType(Segment, props);\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nSegment.handledProps = [\"as\", \"attached\", \"basic\", \"children\", \"circular\", \"className\", \"clearing\", \"color\", \"compact\", \"content\", \"disabled\", \"floated\", \"inverted\", \"loading\", \"padded\", \"piled\", \"placeholder\", \"raised\", \"secondary\", \"size\", \"stacked\", \"tertiary\", \"textAlign\", \"vertical\"];\nSegment.Group = SegmentGroup;\nSegment.Inline = SegmentInline;\nSegment.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Attach segment to other content, like a header. */\n  attached: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['top', 'bottom'])]),\n\n  /** A basic segment has no special formatting. */\n  basic: PropTypes.bool,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** A segment can be circular. */\n  circular: PropTypes.bool,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** A segment can clear floated content. */\n  clearing: PropTypes.bool,\n\n  /** Segment can be colored. */\n  color: PropTypes.oneOf(SUI.COLORS),\n\n  /** A segment may take up only as much space as is necessary. */\n  compact: PropTypes.bool,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** A segment may show its content is disabled. */\n  disabled: PropTypes.bool,\n\n  /** Segment content can be floated to the left or right. */\n  floated: PropTypes.oneOf(SUI.FLOATS),\n\n  /** A segment can have its colors inverted for contrast. */\n  inverted: PropTypes.bool,\n\n  /** A segment may show its content is being loaded. */\n  loading: PropTypes.bool,\n\n  /** A segment can increase its padding. */\n  padded: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['very'])]),\n\n  /** A segment can be used to reserve space for conditionally displayed content. */\n  placeholder: PropTypes.bool,\n\n  /** Formatted to look like a pile of pages. */\n  piled: PropTypes.bool,\n\n  /** A segment may be formatted to raise above the page. */\n  raised: PropTypes.bool,\n\n  /** A segment can be formatted to appear less noticeable. */\n  secondary: PropTypes.bool,\n\n  /** A segment can have different sizes. */\n  size: PropTypes.oneOf(_without(SUI.SIZES, 'medium')),\n\n  /** Formatted to show it contains multiple pages. */\n  stacked: PropTypes.bool,\n\n  /** A segment can be formatted to appear even less noticeable. */\n  tertiary: PropTypes.bool,\n\n  /** Formats content to be aligned as part of a vertical group. */\n  textAlign: PropTypes.oneOf(_without(SUI.TEXT_ALIGNMENTS, 'justified')),\n\n  /** Formats content to be aligned vertically. */\n  vertical: PropTypes.bool\n} : {};\nexport default Segment;","import React, { useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { isIE } from 'react-device-detect'\nimport { Segment, Table, Icon, Image } from 'semantic-ui-react'\nimport { filterCountries } from '../reducers/countryReducer'\nimport useSortableData from '../services/sortableTable'\nimport regions from '../regions'\n\nconst CountriesTable1 = () => {\n  const [, setRegion] = useState({\n    id: 'FZUe47mEY9PCOzYmMxzYY',\n    region: 'All',\n    subregions: [],\n  })\n\n  const dispatch = useDispatch()\n  const state = useSelector((state) => state)\n\n  const unit = useSelector((state) => state.unit.unit)\n\n  const countriesFiltered = useSelector((state) => {\n    return state.countries.filtered.length > 0\n      ? state.countries.filtered\n      : state.countries.initialCountries\n  })\n\n  const countriesFilteredByRegion = useSelector(\n    (state) => state.countries.filtered\n  )\n\n  const countriesFilteredBySubRegion = useSelector(\n    (state) => state.countries.filtered\n  )\n\n  const countriesToRender =\n    countriesFilteredBySubRegion.length > 0\n      ? countriesFilteredBySubRegion\n      : countriesFilteredByRegion.length > 0\n      ? countriesFilteredByRegion\n      : countriesFiltered\n\n  const handleClick = (country) => {\n    dispatch(filterCountries(country))\n    const reg = regions.filter((r) => r.region === country.region)\n    setRegion(reg[0])\n  }\n\n  const tableHeaders = [\n    { fieldName: 'CCA3', id: 'cca3' },\n    { fieldName: 'Flag', id: 'flag' },\n    { fieldName: 'Name', id: 'name' },\n    { fieldName: 'Capital', id: 'capital' },\n    { fieldName: 'Region', id: 'region' },\n    { fieldName: 'Subregion', id: 'subregion' },\n    { fieldName: 'Population', id: 'population' },\n    { fieldName: 'Area km²', id: 'area' },\n  ]\n\n  const { items, requestSort } = useSortableData(countriesToRender)\n\n  const sortIcons = (id) => {\n    if (\n      window.localStorage.getItem('direction') === 'ascending' &&\n      window.localStorage.getItem('sort key') === id\n    ) {\n      return <Icon name=\"caret up\" />\n    } else if (\n      window.localStorage.getItem('direction') === 'descending' &&\n      window.localStorage.getItem('sort key') === id\n    ) {\n      return <Icon name=\"caret down\" />\n    }\n  }\n  console.dir('isIE?', isIE)\n\n  return (\n    <Segment attached=\"bottom\" style={{ padding: 0, border: 0 }}>\n      {countriesToRender.length > 1 ? (\n        <>\n          <Table\n            sortable\n            compact\n            selectable\n            unstackable\n            size=\"small\"\n            style={{ border: 0 }}\n          >\n            <Table.Header\n              style={\n                state.countries.filter.region.toLowerCase() === 'all'\n                  ? { top: 104 }\n                  : { top: 146 }\n              }\n            >\n              <Table.Row>\n                <>\n                  {tableHeaders.map(({ fieldName, id }) => (\n                    <Table.HeaderCell key={id} onClick={() => requestSort(id)}>\n                      {fieldName === 'Area km²'\n                        ? unit === 'metric'\n                          ? fieldName\n                          : 'Area mi²'\n                        : fieldName}\n                      {sortIcons(id)}\n                    </Table.HeaderCell>\n                  ))}\n                </>\n              </Table.Row>\n            </Table.Header>\n            <Table.Body>\n              <>\n                {items.map((item) => {\n                  const areaConvert = Math.round(item.area / 2.59)\n                  return (\n                    <Table.Row\n                      style={{ cursor: 'pointer' }}\n                      key={item.cca3}\n                      onClick={() => handleClick(item)}\n                    >\n                      <Table.Cell>{item.cca3}</Table.Cell>\n                      <Table.Cell>\n                        <Image\n                          srcSet={`${item.flags.svg} 100w`}\n                          style={{ width: '100%', height: 'auto' }}\n                          size=\"tiny\"\n                          src={isIE ? item.flags.png : item.flags.svg}\n                          alt=\"country flag\"\n                          bordered\n                          loading=\"lazy\"\n                        />\n                      </Table.Cell>\n                      <Table.Cell>{item.name.common}</Table.Cell>\n                      <Table.Cell>\n                        {item.capital === undefined ? 'no data' : item.capital}\n                      </Table.Cell>\n                      <Table.Cell>{item.region}</Table.Cell>\n                      <Table.Cell>{item.subregion}</Table.Cell>\n                      <Table.Cell>\n                        {item.population.toLocaleString()}\n                      </Table.Cell>\n                      <Table.Cell>\n                        {unit === 'imperial'\n                          ? areaConvert.toLocaleString()\n                          : item.area.toLocaleString()}\n                      </Table.Cell>\n                    </Table.Row>\n                  )\n                })}\n              </>\n            </Table.Body>\n          </Table>\n        </>\n      ) : null}\n    </Segment>\n  )\n}\n\nconst CountriesTable = React.memo(CountriesTable1)\n\nexport default CountriesTable\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { getElementType, getUnhandledProps } from '../../lib';\n\nfunction TableBody(props) {\n  var children = props.children,\n      className = props.className;\n  var classes = cx(className);\n  var rest = getUnhandledProps(TableBody, props);\n  var ElementType = getElementType(TableBody, props);\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), children);\n}\n\nTableBody.handledProps = [\"as\", \"children\", \"className\"];\nTableBody.defaultProps = {\n  as: 'tbody'\n};\nTableBody.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string\n} : {};\nexport default TableBody;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _without from \"lodash-es/without\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, createShorthandFactory, customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useTextAlignProp, useVerticalAlignProp, useWidthProp } from '../../lib';\nimport Icon from '../../elements/Icon';\n/**\n * A table row can have cells.\n */\n\nfunction TableCell(props) {\n  var active = props.active,\n      children = props.children,\n      className = props.className,\n      collapsing = props.collapsing,\n      content = props.content,\n      disabled = props.disabled,\n      error = props.error,\n      icon = props.icon,\n      negative = props.negative,\n      positive = props.positive,\n      selectable = props.selectable,\n      singleLine = props.singleLine,\n      textAlign = props.textAlign,\n      verticalAlign = props.verticalAlign,\n      warning = props.warning,\n      width = props.width;\n  var classes = cx(useKeyOnly(active, 'active'), useKeyOnly(collapsing, 'collapsing'), useKeyOnly(disabled, 'disabled'), useKeyOnly(error, 'error'), useKeyOnly(negative, 'negative'), useKeyOnly(positive, 'positive'), useKeyOnly(selectable, 'selectable'), useKeyOnly(singleLine, 'single line'), useKeyOnly(warning, 'warning'), useTextAlignProp(textAlign), useVerticalAlignProp(verticalAlign), useWidthProp(width, 'wide'), className);\n  var rest = getUnhandledProps(TableCell, props);\n  var ElementType = getElementType(TableCell, props);\n\n  if (!childrenUtils.isNil(children)) {\n    return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n      className: classes\n    }), children);\n  }\n\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), Icon.create(icon), content);\n}\n\nTableCell.handledProps = [\"active\", \"as\", \"children\", \"className\", \"collapsing\", \"content\", \"disabled\", \"error\", \"icon\", \"negative\", \"positive\", \"selectable\", \"singleLine\", \"textAlign\", \"verticalAlign\", \"warning\", \"width\"];\nTableCell.defaultProps = {\n  as: 'td'\n};\nTableCell.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** A cell can be active or selected by a user. */\n  active: PropTypes.bool,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** A cell can be collapsing so that it only uses as much space as required. */\n  collapsing: PropTypes.bool,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** A cell can be disabled. */\n  disabled: PropTypes.bool,\n\n  /** A cell may call attention to an error or a negative value. */\n  error: PropTypes.bool,\n\n  /** Add an Icon by name, props object, or pass an <Icon /> */\n  icon: customPropTypes.itemShorthand,\n\n  /** A cell may let a user know whether a value is bad. */\n  negative: PropTypes.bool,\n\n  /** A cell may let a user know whether a value is good. */\n  positive: PropTypes.bool,\n\n  /** A cell can be selectable. */\n  selectable: PropTypes.bool,\n\n  /** A cell can specify that its contents should remain on a single line and not wrap. */\n  singleLine: PropTypes.bool,\n\n  /** A table cell can adjust its text alignment. */\n  textAlign: PropTypes.oneOf(_without(SUI.TEXT_ALIGNMENTS, 'justified')),\n\n  /** A table cell can adjust its text alignment. */\n  verticalAlign: PropTypes.oneOf(SUI.VERTICAL_ALIGNMENTS),\n\n  /** A cell may warn a user. */\n  warning: PropTypes.bool,\n\n  /** A table can specify the width of individual columns independently. */\n  width: PropTypes.oneOf(SUI.WIDTHS)\n} : {};\nTableCell.create = createShorthandFactory(TableCell, function (content) {\n  return {\n    content: content\n  };\n});\nexport default TableCell;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, useKeyOnly } from '../../lib';\n/**\n * A table can have a header.\n */\n\nfunction TableHeader(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content,\n      fullWidth = props.fullWidth;\n  var classes = cx(useKeyOnly(fullWidth, 'full-width'), className);\n  var rest = getUnhandledProps(TableHeader, props);\n  var ElementType = getElementType(TableHeader, props);\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nTableHeader.handledProps = [\"as\", \"children\", \"className\", \"content\", \"fullWidth\"];\nTableHeader.defaultProps = {\n  as: 'thead'\n};\nTableHeader.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** A definition table can have a full width header or footer, filling in the gap left by the first column. */\n  fullWidth: PropTypes.bool\n} : {};\nexport default TableHeader;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { getUnhandledProps } from '../../lib';\nimport TableHeader from './TableHeader';\n/**\n * A table can have a footer.\n */\n\nfunction TableFooter(props) {\n  var as = props.as;\n  var rest = getUnhandledProps(TableFooter, props);\n  return /*#__PURE__*/React.createElement(TableHeader, _extends({}, rest, {\n    as: as\n  }));\n}\n\nTableFooter.handledProps = [\"as\"];\nTableFooter.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType\n} : {};\nTableFooter.defaultProps = {\n  as: 'tfoot'\n};\nexport default TableFooter;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { getUnhandledProps, useValueAndKey } from '../../lib';\nimport TableCell from './TableCell';\n/**\n * A table can have a header cell.\n */\n\nfunction TableHeaderCell(props) {\n  var as = props.as,\n      className = props.className,\n      sorted = props.sorted;\n  var classes = cx(useValueAndKey(sorted, 'sorted'), className);\n  var rest = getUnhandledProps(TableHeaderCell, props);\n  return /*#__PURE__*/React.createElement(TableCell, _extends({}, rest, {\n    as: as,\n    className: classes\n  }));\n}\n\nTableHeaderCell.handledProps = [\"as\", \"className\", \"sorted\"];\nTableHeaderCell.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** A header cell can be sorted in ascending or descending order. */\n  sorted: PropTypes.oneOf(['ascending', 'descending'])\n} : {};\nTableHeaderCell.defaultProps = {\n  as: 'th'\n};\nexport default TableHeaderCell;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _without from \"lodash-es/without\";\nimport _map from \"lodash-es/map\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, createShorthandFactory, customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useTextAlignProp, useVerticalAlignProp } from '../../lib';\nimport TableCell from './TableCell';\n/**\n * A table can have rows.\n */\n\nfunction TableRow(props) {\n  var active = props.active,\n      cellAs = props.cellAs,\n      cells = props.cells,\n      children = props.children,\n      className = props.className,\n      disabled = props.disabled,\n      error = props.error,\n      negative = props.negative,\n      positive = props.positive,\n      textAlign = props.textAlign,\n      verticalAlign = props.verticalAlign,\n      warning = props.warning;\n  var classes = cx(useKeyOnly(active, 'active'), useKeyOnly(disabled, 'disabled'), useKeyOnly(error, 'error'), useKeyOnly(negative, 'negative'), useKeyOnly(positive, 'positive'), useKeyOnly(warning, 'warning'), useTextAlignProp(textAlign), useVerticalAlignProp(verticalAlign), className);\n  var rest = getUnhandledProps(TableRow, props);\n  var ElementType = getElementType(TableRow, props);\n\n  if (!childrenUtils.isNil(children)) {\n    return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n      className: classes\n    }), children);\n  }\n\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), _map(cells, function (cell) {\n    return TableCell.create(cell, {\n      defaultProps: {\n        as: cellAs\n      }\n    });\n  }));\n}\n\nTableRow.handledProps = [\"active\", \"as\", \"cellAs\", \"cells\", \"children\", \"className\", \"disabled\", \"error\", \"negative\", \"positive\", \"textAlign\", \"verticalAlign\", \"warning\"];\nTableRow.defaultProps = {\n  as: 'tr',\n  cellAs: 'td'\n};\nTableRow.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** A row can be active or selected by a user. */\n  active: PropTypes.bool,\n\n  /** An element type to render as (string or function). */\n  cellAs: PropTypes.elementType,\n\n  /** Shorthand array of props for TableCell. */\n  cells: customPropTypes.collectionShorthand,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** A row can be disabled. */\n  disabled: PropTypes.bool,\n\n  /** A row may call attention to an error or a negative value. */\n  error: PropTypes.bool,\n\n  /** A row may let a user know whether a value is bad. */\n  negative: PropTypes.bool,\n\n  /** A row may let a user know whether a value is good. */\n  positive: PropTypes.bool,\n\n  /** A table row can adjust its text alignment. */\n  textAlign: PropTypes.oneOf(_without(SUI.TEXT_ALIGNMENTS, 'justified')),\n\n  /** A table row can adjust its vertical alignment. */\n  verticalAlign: PropTypes.oneOf(SUI.VERTICAL_ALIGNMENTS),\n\n  /** A row may warn a user. */\n  warning: PropTypes.bool\n} : {};\nTableRow.create = createShorthandFactory(TableRow, function (cells) {\n  return {\n    cells: cells\n  };\n});\nexport default TableRow;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _without from \"lodash-es/without\";\nimport _map from \"lodash-es/map\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useKeyOrValueAndKey, useTextAlignProp, useVerticalAlignProp, useWidthProp } from '../../lib';\nimport TableBody from './TableBody';\nimport TableCell from './TableCell';\nimport TableFooter from './TableFooter';\nimport TableHeader from './TableHeader';\nimport TableHeaderCell from './TableHeaderCell';\nimport TableRow from './TableRow';\n/**\n * A table displays a collections of data grouped into rows.\n */\n\nfunction Table(props) {\n  var attached = props.attached,\n      basic = props.basic,\n      celled = props.celled,\n      children = props.children,\n      className = props.className,\n      collapsing = props.collapsing,\n      color = props.color,\n      columns = props.columns,\n      compact = props.compact,\n      definition = props.definition,\n      fixed = props.fixed,\n      footerRow = props.footerRow,\n      headerRow = props.headerRow,\n      headerRows = props.headerRows,\n      inverted = props.inverted,\n      padded = props.padded,\n      renderBodyRow = props.renderBodyRow,\n      selectable = props.selectable,\n      singleLine = props.singleLine,\n      size = props.size,\n      sortable = props.sortable,\n      stackable = props.stackable,\n      striped = props.striped,\n      structured = props.structured,\n      tableData = props.tableData,\n      textAlign = props.textAlign,\n      unstackable = props.unstackable,\n      verticalAlign = props.verticalAlign;\n  var classes = cx('ui', color, size, useKeyOnly(celled, 'celled'), useKeyOnly(collapsing, 'collapsing'), useKeyOnly(definition, 'definition'), useKeyOnly(fixed, 'fixed'), useKeyOnly(inverted, 'inverted'), useKeyOnly(selectable, 'selectable'), useKeyOnly(singleLine, 'single line'), useKeyOnly(sortable, 'sortable'), useKeyOnly(stackable, 'stackable'), useKeyOnly(striped, 'striped'), useKeyOnly(structured, 'structured'), useKeyOnly(unstackable, 'unstackable'), useKeyOrValueAndKey(attached, 'attached'), useKeyOrValueAndKey(basic, 'basic'), useKeyOrValueAndKey(compact, 'compact'), useKeyOrValueAndKey(padded, 'padded'), useTextAlignProp(textAlign), useVerticalAlignProp(verticalAlign), useWidthProp(columns, 'column'), 'table', className);\n  var rest = getUnhandledProps(Table, props);\n  var ElementType = getElementType(Table, props);\n\n  if (!childrenUtils.isNil(children)) {\n    return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n      className: classes\n    }), children);\n  }\n\n  var hasHeaderRows = headerRow || headerRows;\n  var headerShorthandOptions = {\n    defaultProps: {\n      cellAs: 'th'\n    }\n  };\n  var headerElement = hasHeaderRows && /*#__PURE__*/React.createElement(TableHeader, null, TableRow.create(headerRow, headerShorthandOptions), _map(headerRows, function (data) {\n    return TableRow.create(data, headerShorthandOptions);\n  }));\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), headerElement, /*#__PURE__*/React.createElement(TableBody, null, renderBodyRow && _map(tableData, function (data, index) {\n    return TableRow.create(renderBodyRow(data, index));\n  })), footerRow && /*#__PURE__*/React.createElement(TableFooter, null, TableRow.create(footerRow)));\n}\n\nTable.handledProps = [\"as\", \"attached\", \"basic\", \"celled\", \"children\", \"className\", \"collapsing\", \"color\", \"columns\", \"compact\", \"definition\", \"fixed\", \"footerRow\", \"headerRow\", \"headerRows\", \"inverted\", \"padded\", \"renderBodyRow\", \"selectable\", \"singleLine\", \"size\", \"sortable\", \"stackable\", \"striped\", \"structured\", \"tableData\", \"textAlign\", \"unstackable\", \"verticalAlign\"];\nTable.defaultProps = {\n  as: 'table'\n};\nTable.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Attach table to other content */\n  attached: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['top', 'bottom'])]),\n\n  /** A table can reduce its complexity to increase readability. */\n  basic: PropTypes.oneOfType([PropTypes.oneOf(['very']), PropTypes.bool]),\n\n  /** A table may be divided into individual cells. */\n  celled: PropTypes.bool,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** A table can be collapsing, taking up only as much space as its rows. */\n  collapsing: PropTypes.bool,\n\n  /** A table can be given a color to distinguish it from other tables. */\n  color: PropTypes.oneOf(SUI.COLORS),\n\n  /** A table can specify its column count to divide its content evenly. */\n  columns: PropTypes.oneOf(SUI.WIDTHS),\n\n  /** A table may sometimes need to be more compact to make more rows visible at a time. */\n  compact: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['very'])]),\n\n  /** A table may be formatted to emphasize a first column that defines a rows content. */\n  definition: PropTypes.bool,\n\n  /**\n   * A table can use fixed a special faster form of table rendering that does not resize table cells based on content\n   */\n  fixed: PropTypes.bool,\n\n  /** Shorthand for a TableRow to be placed within Table.Footer. */\n  footerRow: customPropTypes.itemShorthand,\n\n  /** Shorthand for a TableRow to be placed within Table.Header. */\n  headerRow: customPropTypes.every([customPropTypes.disallow(['headerRows']), customPropTypes.itemShorthand]),\n\n  /** Shorthand for multiple TableRows to be placed within Table.Header. */\n  headerRows: customPropTypes.every([customPropTypes.disallow(['headerRow']), customPropTypes.collectionShorthand]),\n\n  /** A table's colors can be inverted. */\n  inverted: PropTypes.bool,\n\n  /** A table may sometimes need to be more padded for legibility. */\n  padded: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['very'])]),\n\n  /**\n   * Mapped over `tableData` and should return shorthand for each Table.Row to be placed within Table.Body.\n   *\n   * @param {*} data - An element in the `tableData` array.\n   * @param {number} index - The index of the current element in `tableData`.\n   * @returns {*} Shorthand for a Table.Row.\n   */\n  renderBodyRow: customPropTypes.every([customPropTypes.disallow(['children']), customPropTypes.demand(['tableData']), PropTypes.func]),\n\n  /** A table can have its rows appear selectable. */\n  selectable: PropTypes.bool,\n\n  /** A table can specify that its cell contents should remain on a single line and not wrap. */\n  singleLine: PropTypes.bool,\n\n  /** A table can also be small or large. */\n  size: PropTypes.oneOf(_without(SUI.SIZES, 'mini', 'tiny', 'medium', 'big', 'huge', 'massive')),\n\n  /** A table may allow a user to sort contents by clicking on a table header. */\n  sortable: PropTypes.bool,\n\n  /** A table can specify how it stacks table content responsively. */\n  stackable: PropTypes.bool,\n\n  /** A table can stripe alternate rows of content with a darker color to increase contrast. */\n  striped: PropTypes.bool,\n\n  /** A table can be formatted to display complex structured data. */\n  structured: PropTypes.bool,\n\n  /** Data to be passed to the renderBodyRow function. */\n  tableData: customPropTypes.every([customPropTypes.disallow(['children']), customPropTypes.demand(['renderBodyRow']), PropTypes.array]),\n\n  /** A table can adjust its text alignment. */\n  textAlign: PropTypes.oneOf(_without(SUI.TEXT_ALIGNMENTS, 'justified')),\n\n  /** A table can specify how it stacks table content responsively. */\n  unstackable: PropTypes.bool,\n\n  /** A table can adjust its text alignment. */\n  verticalAlign: PropTypes.oneOf(SUI.VERTICAL_ALIGNMENTS)\n} : {};\nTable.Body = TableBody;\nTable.Cell = TableCell;\nTable.Footer = TableFooter;\nTable.Header = TableHeader;\nTable.HeaderCell = TableHeaderCell;\nTable.Row = TableRow;\nexport default Table;"],"sourceRoot":""}