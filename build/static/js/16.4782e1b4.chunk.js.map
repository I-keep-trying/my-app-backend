{"version":3,"sources":["pages/Countries.js"],"names":["HeaderNav","loadable","Country","CountriesTable","Countries1","useState","geo","setGeo","dispatch","useDispatch","state","useSelector","countriesFiltered","countries","filtered","contextRef","useRef","getGeo","country","a","axios","get","res","selectedGeo","data","useEffect","length","name","common","region","getCountryNews","noMatch","console","log","id","ref","context","attached","tabular","widths","regions","map","r","Item","active","filter","toLowerCase","onClick","reg","filterCountriesByRegion","subregions","s","subregion","sub","filterCountriesBySubRegion"],"mappings":"8RAaMA,EAAYC,aAAS,kBAAM,+DAC3BC,EAAUD,aAAS,kBAAM,sEACzBE,EAAiBF,aAAS,kBAAM,wDA0GvBG,UAxGI,WACjB,MAAsBC,mBAAS,IAA/B,mBAAOC,EAAP,KAAYC,EAAZ,KAEMC,EAAWC,cAEXC,EAAQC,aAAY,SAACD,GAAD,OAAWA,KAE/BE,EAAoBD,aAAY,SAACD,GAAD,OAAWA,EAAMG,UAAUC,YAU3DC,EAAaC,mBAEbC,EAAM,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,sEACKC,IAAMC,IAAN,uDACgCH,EADhC,mCADL,cACPI,EADO,OAIPC,EAAcD,EAAIE,KAAK,GAJhB,kBAKNjB,EAAOgB,IALD,2CAAH,sDAQZE,qBAAU,WACR,GAAiC,IAA7Bb,EAAkBc,OAAc,CAClC,IAAMR,EAAUN,EAAkB,GAAGe,KAAKC,OACN,cAAhChB,EAAkB,GAAGiB,OACvBrB,EAASsB,YAAe,cAExBtB,EAASsB,YAAeZ,IAE1BD,EAAOC,MAER,CAACN,IAEJ,IAAMmB,EAAuC,IAA7BnB,EAAkBc,OAElC,OADFM,QAAQC,IAAI,QAAQvB,GACXqB,EACL,qBAAKG,GAAG,MAAMC,IAAKpB,EAAnB,SACE,cAAC,IAAD,CAAQmB,GAAG,SAASE,QAASrB,EAA7B,SACE,cAACf,EAAD,QAIJ,sBAAKkC,GAAG,MAAMC,IAAKpB,EAAnB,UACE,eAAC,IAAD,CAAQmB,GAAG,SAASE,QAASrB,EAA7B,UACE,cAACf,EAAD,IAE8B,IAA7BY,EAAkBc,OACjB,6BAEA,qCACE,cAAC,IAAD,CAAMW,UAAQ,EAACC,SAAO,EAACC,OAAQ,EAA/B,SACGC,EAAQC,KAAI,SAACC,GAAD,OACX,cAAC,IAAKC,KAAN,CAEEC,OACElC,EAAMG,UAAUgC,OAAOhB,OAAOA,OAAOiB,gBACrCJ,EAAEb,OAAOiB,cAEXC,QAAS,kBAvDEC,EAuDsBN,OAtD/ClC,EAASyC,YAAwBD,IADT,IAACA,GAiDb,SAQgB,QAAbN,EAAEb,OAAmB,cAAgBa,EAAEb,QAPnCa,EAAER,SAW2C,QAAvDxB,EAAMG,UAAUgC,OAAOhB,OAAOA,OAAOiB,cACpC,cAAC,IAAD,CACEP,OAAQ7B,EAAMG,UAAUgC,OAAOhB,OAAOqB,WAAWxB,OACjDW,UAAQ,EACRC,SAAO,EAHT,SAKG5B,EAAMG,UAAUgC,OAAOhB,OAAOqB,WAAWT,KAAI,SAACU,GAAD,OAC5C,cAAC,IAAKR,KAAN,CAEEC,OACElC,EAAMG,UAAUgC,OAAOO,UAAUN,gBACjCK,EAAExB,KAAKmB,cAETC,QAAS,kBAtEGM,EAsEwBF,EAAExB,UArEtDnB,EAAS8C,YAA2BD,IADT,IAACA,GAgEd,SAQGF,EAAExB,MAPEwB,EAAEjB,SAYb,mCAKsB,IAA7BtB,EAAkBc,OACjB,cAACxB,EAAD,CAASI,IAAKA,IAEd,cAACH,EAAD","file":"static/js/16.4782e1b4.chunk.js","sourcesContent":["import React, { useState, useRef, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport axios from 'axios'\r\nimport { Sticky, Menu } from 'semantic-ui-react'\r\nimport loadable from '@loadable/component'\r\nimport {\r\n  filterCountriesByRegion,\r\n  filterCountriesBySubRegion,\r\n} from '../reducers/countriesReducer'\r\nimport { getCountryNews } from '../reducers/countryNewsReducer'\r\nimport regions from '../regions'\r\nimport '../assets/css/App1.css'\r\n\r\nconst HeaderNav = loadable(() => import('../components/Header'))\r\nconst Country = loadable(() => import('./Country'))\r\nconst CountriesTable = loadable(() => import('../components/Table'))\r\n\r\nconst Countries1 = () => {\r\n  const [geo, setGeo] = useState([])\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const state = useSelector((state) => state)\r\n\r\n  const countriesFiltered = useSelector((state) => state.countries.filtered)\r\n\r\n  const handleRegionClick = (reg) => {\r\n    dispatch(filterCountriesByRegion(reg))\r\n  }\r\n\r\n  const handleSubregionClick = (sub) => {\r\n    dispatch(filterCountriesBySubRegion(sub))\r\n  }\r\n\r\n  const contextRef = useRef()\r\n\r\n  const getGeo = async (country) => {\r\n    const res = await axios.get(\r\n      `https://nominatim.openstreetmap.org/search?q=${country}&polygon_geojson=1&format=json`\r\n    )\r\n    const selectedGeo = res.data[0]\r\n    return setGeo(selectedGeo)\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (countriesFiltered.length === 1) {\r\n      const country = countriesFiltered[0].name.common\r\n      if (countriesFiltered[0].region === 'Antarctic') {\r\n        dispatch(getCountryNews('Antarctic'))\r\n      } else {\r\n        dispatch(getCountryNews(country))\r\n      }\r\n      getGeo(country)\r\n    }\r\n  }, [countriesFiltered])\r\n\r\n  const noMatch = countriesFiltered.length === 0\r\nconsole.log('state',state)\r\n  return noMatch ? (\r\n    <div id=\"ref\" ref={contextRef}>\r\n      <Sticky id=\"Sticky\" context={contextRef}>\r\n        <HeaderNav />\r\n      </Sticky>\r\n    </div>\r\n  ) : (\r\n    <div id=\"ref\" ref={contextRef}>\r\n      <Sticky id=\"Sticky\" context={contextRef}>\r\n        <HeaderNav />\r\n\r\n        {countriesFiltered.length === 1 ? (\r\n          <></>\r\n        ) : (\r\n          <>\r\n            <Menu attached tabular widths={7}>\r\n              {regions.map((r) => (\r\n                <Menu.Item\r\n                  key={r.id}\r\n                  active={\r\n                    state.countries.filter.region.region.toLowerCase() ===\r\n                    r.region.toLowerCase()\r\n                  }\r\n                  onClick={() => handleRegionClick(r)}\r\n                >\r\n                  {r.region === 'All' ? 'All Regions' : r.region}\r\n                </Menu.Item>\r\n              ))}\r\n            </Menu>\r\n            {state.countries.filter.region.region.toLowerCase() !== 'all' ? (\r\n              <Menu\r\n                widths={state.countries.filter.region.subregions.length}\r\n                attached\r\n                tabular\r\n              >\r\n                {state.countries.filter.region.subregions.map((s) => (\r\n                  <Menu.Item\r\n                    key={s.id}\r\n                    active={\r\n                      state.countries.filter.subregion.toLowerCase() ===\r\n                      s.name.toLowerCase()\r\n                    }\r\n                    onClick={() => handleSubregionClick(s.name)}\r\n                  >\r\n                    {s.name}\r\n                  </Menu.Item>\r\n                ))}\r\n              </Menu>\r\n            ) : (\r\n              <></>\r\n            )}\r\n          </>\r\n        )}\r\n      </Sticky>\r\n      {countriesFiltered.length === 1 ? (\r\n        <Country geo={geo} />\r\n      ) : (\r\n        <CountriesTable />\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Countries1\r\n"],"sourceRoot":""}