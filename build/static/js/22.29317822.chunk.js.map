{"version":3,"sources":["components/TableMobile.js"],"names":["CountriesTableMobile","dispatch","useDispatch","state","useSelector","unit","countriesFiltered","countries","filtered","id","attached","length","sortable","compact","selectable","unstackable","Header","filter","region","toLowerCase","celled","map","item","areaConvert","Math","round","area","Fragment","Row","textAlign","color","Column","width","labelPosition","icon","basic","fluid","content","name","common","onClick","country","location","latlng","selectCountry","getCountryFeatures","getCountryNews","handleClick","cca3","alt","bordered","loading","size","src","flags","svg","capital","subregion","population","toLocaleString"],"mappings":"qHAAA,2HA+GeA,UAvGc,WAC3B,IAAMC,EAAWC,cACXC,EAAQC,aAAY,SAACD,GAAD,OAAWA,KAC/BE,EAAOD,aAAY,SAACD,GAAD,OAAWA,EAAME,KAAKA,QAEzCC,EAAoBF,aAAY,SAACD,GAAD,OAAWA,EAAMI,UAAUC,YAajE,OACE,cAAC,IAAD,CAASC,GAAG,eAAeC,SAAS,SAApC,SACGJ,EAAkBK,OAAS,EAC1B,qCACE,cAAC,IAAD,CAAOC,UAAQ,EAACC,SAAO,EAACC,YAAU,EAACC,aAAW,EAA9C,SACE,cAAC,IAAMC,OAAP,CACEP,GACyD,QAAvDN,EAAMI,UAAUU,OAAOC,OAAOA,OAAOC,cACjC,OACA,WAIV,cAAC,IAAD,CAAMC,QAAM,EAACX,GAAG,cAAhB,SACGH,EAAkBe,KAAI,SAACC,GACtB,IAAMC,EAAcC,KAAKC,MAAMH,EAAKI,KAAO,MAC3C,OACE,eAAC,IAAMC,SAAP,WACE,cAAC,IAAKC,IAAN,CAAUC,UAAU,SAASC,MAAM,QAAnC,SACE,cAAC,IAAKC,OAAN,CAAaC,MAAO,GAApB,SACE,cAAC,IAAD,CACEC,cAAc,QACdC,KAAK,gBACLC,OAAK,EACLL,MAAM,SACNM,OAAK,EACLC,QAASf,EAAKgB,KAAKC,OACnBC,QAAS,kBAtCX,SAACC,GACnB,IAAMC,EAAWD,EAAQE,OACzB1C,EAAS2C,YAAcH,IACvBxC,EAAS4C,YAAmBH,IACL,cAAnBD,EAAQvB,OACVjB,EAAS6C,YAAe,cAExB7C,EAAS6C,YAAeL,EAAQH,KAAKC,SA+BJQ,CAAYzB,UAIjC,eAAC,IAAKM,IAAN,WACE,cAAC,IAAKG,OAAN,CAAaC,MAAO,EAApB,kBACA,cAAC,IAAKD,OAAN,CAAaC,MAAO,GAApB,SAAyBV,EAAK0B,UAEhC,eAAC,IAAKpB,IAAN,WACE,cAAC,IAAKG,OAAN,CAAaC,MAAO,EAApB,kBACA,cAAC,IAAKD,OAAN,CAAaC,MAAO,GAApB,SACE,cAAC,IAAD,CACEiB,IAAI,eACJC,UAAQ,EACRC,QAAQ,OACRC,KAAK,QACLC,IAAK/B,EAAKgC,MAAMC,WAItB,eAAC,IAAK3B,IAAN,WACE,cAAC,IAAKG,OAAN,CAAaC,MAAO,EAApB,qBACA,cAAC,IAAKD,OAAN,CAAaC,MAAO,GAApB,SAAyBV,EAAKkC,aAEhC,eAAC,IAAK5B,IAAN,WACE,cAAC,IAAKG,OAAN,CAAaC,MAAO,EAApB,oBACA,cAAC,IAAKD,OAAN,CAAaC,MAAO,GAApB,SAAyBV,EAAKJ,YAEhC,eAAC,IAAKU,IAAN,WACE,cAAC,IAAKG,OAAN,CAAaC,MAAO,EAApB,uBACA,cAAC,IAAKD,OAAN,CAAaC,MAAO,GAApB,SAAyBV,EAAKmC,eAEhC,eAAC,IAAK7B,IAAN,WACE,cAAC,IAAKG,OAAN,CAAaC,MAAO,EAApB,wBACA,cAAC,IAAKD,OAAN,CAAaC,MAAO,GAApB,SACGV,EAAKoC,WAAWC,sBAGrB,eAAC,IAAK/B,IAAN,WACE,cAAC,IAAKG,OAAN,CAAaC,MAAO,EAApB,SACY,WAAT3B,EAAoB,cAAa,gBAEpC,cAAC,IAAK0B,OAAN,CAAaC,MAAO,GAApB,SACY,aAAT3B,EACGkB,EAAYoC,iBACZrC,EAAKI,KAAKiC,wBAvDCrC,EAAK0B,cA+DhC","file":"static/js/22.29317822.chunk.js","sourcesContent":["import React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Segment, Table, Image, Grid, Button } from 'semantic-ui-react'\r\nimport { selectCountry } from '../reducers/countriesReducer'\r\nimport { getCountryFeatures } from '../reducers/countryDataReducer'\r\nimport { getCountryNews } from '../reducers/countryNewsReducer'\r\nimport '../assets/css/App1.css'\r\n\r\nconst CountriesTableMobile = () => {\r\n  const dispatch = useDispatch()\r\n  const state = useSelector((state) => state)\r\n  const unit = useSelector((state) => state.unit.unit)\r\n\r\n  const countriesFiltered = useSelector((state) => state.countries.filtered)\r\n\r\n  const handleClick = (country) => {\r\n    const location = country.latlng\r\n    dispatch(selectCountry(country))\r\n    dispatch(getCountryFeatures(location))\r\n    if (country.region === 'Antarctic') {\r\n      dispatch(getCountryNews('Antarctic'))\r\n    } else {\r\n      dispatch(getCountryNews(country.name.common))\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Segment id=\"mobile-table\" attached=\"bottom\">\r\n      {countriesFiltered.length > 1 ? (\r\n        <>\r\n          <Table sortable compact selectable unstackable>\r\n            <Table.Header\r\n              id={\r\n                state.countries.filter.region.region.toLowerCase() === 'all'\r\n                  ? 'oneM'\r\n                  : 'twoM'\r\n              }\r\n            ></Table.Header>\r\n          </Table>\r\n          <Grid celled id=\"grid-mobile\">\r\n            {countriesFiltered.map((item) => {\r\n              const areaConvert = Math.round(item.area / 2.59)\r\n              return (\r\n                <React.Fragment key={item.cca3}>\r\n                  <Grid.Row textAlign=\"center\" color=\"black\">\r\n                    <Grid.Column width={16}>\r\n                      <Button\r\n                        labelPosition=\"right\"\r\n                        icon=\"right chevron\"\r\n                        basic\r\n                        color=\"yellow\"\r\n                        fluid\r\n                        content={item.name.common}\r\n                        onClick={() => handleClick(item)}\r\n                      ></Button>\r\n                    </Grid.Column>\r\n                  </Grid.Row>\r\n                  <Grid.Row>\r\n                    <Grid.Column width={4}>CCA3</Grid.Column>\r\n                    <Grid.Column width={12}>{item.cca3}</Grid.Column>\r\n                  </Grid.Row>\r\n                  <Grid.Row>\r\n                    <Grid.Column width={4}>Flag</Grid.Column>\r\n                    <Grid.Column width={12}>\r\n                      <Image\r\n                        alt=\"country flag\"\r\n                        bordered\r\n                        loading=\"lazy\"\r\n                        size=\"small\"\r\n                        src={item.flags.svg}\r\n                      />\r\n                    </Grid.Column>\r\n                  </Grid.Row>\r\n                  <Grid.Row>\r\n                    <Grid.Column width={4}>Capital</Grid.Column>\r\n                    <Grid.Column width={12}>{item.capital}</Grid.Column>\r\n                  </Grid.Row>\r\n                  <Grid.Row>\r\n                    <Grid.Column width={4}>Region</Grid.Column>\r\n                    <Grid.Column width={12}>{item.region}</Grid.Column>\r\n                  </Grid.Row>\r\n                  <Grid.Row>\r\n                    <Grid.Column width={4}>Subregion</Grid.Column>\r\n                    <Grid.Column width={12}>{item.subregion}</Grid.Column>\r\n                  </Grid.Row>\r\n                  <Grid.Row>\r\n                    <Grid.Column width={4}>Population</Grid.Column>\r\n                    <Grid.Column width={12}>\r\n                      {item.population.toLocaleString()}\r\n                    </Grid.Column>\r\n                  </Grid.Row>\r\n                  <Grid.Row>\r\n                    <Grid.Column width={4}>\r\n                      {unit === 'metric' ? 'Area km²' : 'Area mi²'}\r\n                    </Grid.Column>\r\n                    <Grid.Column width={12}>\r\n                      {unit === 'imperial'\r\n                        ? areaConvert.toLocaleString()\r\n                        : item.area.toLocaleString()}\r\n                    </Grid.Column>\r\n                  </Grid.Row>\r\n                </React.Fragment>\r\n              )\r\n            })}\r\n          </Grid>\r\n        </>\r\n      ) : null}\r\n    </Segment>\r\n  )\r\n}\r\n\r\nexport default CountriesTableMobile\r\n"],"sourceRoot":""}