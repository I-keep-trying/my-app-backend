{"version":3,"sources":["services/sortableTable.js","components/TableMobile.js"],"names":["useSortableData1","items","useState","key","direction","sortConfig","setSortConfig","window","localStorage","setItem","now","Date","getTime","setupTime","getItem","clear","useMemo","sortableItems","sort","a","b","common","localeCompare","requestSort","CountriesTableMobile","id","region","subregions","setRegion","dispatch","useDispatch","state","useSelector","unit","countriesFiltered","countries","filtered","length","initialCountries","useSortableData","attached","sortable","compact","selectable","unstackable","Header","filter","toLowerCase","celled","map","item","areaConvert","Math","round","area","Fragment","Row","textAlign","color","Column","width","labelPosition","icon","basic","fluid","content","name","onClick","country","filterCountries","reg","regions","r","handleClick","cca3","size","src","isIE","flags","png","svg","capital","continents","subregion","population","toLocaleString","nanoid"],"mappings":"ygCAqEeA,IAnEU,SAACC,GACxB,MAAoCC,mBAAS,CAC3CC,IAAK,OACLC,UAAW,cAFb,mBAAOC,EAAP,KAAmBC,EAAnB,KAKAC,OAAOC,aAAaC,QAAQ,WAAYJ,EAAWF,KACnDI,OAAOC,aAAaC,QAAQ,YAAaJ,EAAWD,WAGpD,IAAMM,GAAM,IAAIC,MAAOC,UACjBC,EAAYL,aAAaM,QAAQ,aACtB,MAAbD,EACFL,aAAaC,QAAQ,YAAaC,GAE9BA,EAAMG,EAAY,OACpBL,aAAaO,QACbP,aAAaC,QAAQ,YAAaC,IA+CtC,MAAO,CAAET,MA3CWe,mBAAQ,WAC1B,IAAIC,EAAa,YAAOhB,GA+BxB,MA9BuB,SAAnBI,EAAWF,KAAqC,eAAnBE,EAAWF,IAC1Cc,EAAcC,MAAK,SAACC,EAAGC,GACrB,OAAID,EAAEd,EAAWF,KAAOiB,EAAEf,EAAWF,KACH,cAAzBE,EAAWD,WAA6B,EAAI,EAEjDe,EAAEd,EAAWF,KAAOiB,EAAEf,EAAWF,KACH,cAAzBE,EAAWD,UAA4B,GAAK,EAE9C,KAEmB,SAAnBC,EAAWF,IACpBc,EAAcC,MAAK,SAACC,EAAGC,GACrB,MAAgC,cAAzBf,EAAWD,UACde,EAAEd,EAAWF,KAAKkB,OAAOC,cAAcF,EAAEf,EAAWF,KAAKkB,QACzDD,EAAEf,EAAWF,KAAKkB,OAAOC,cAAcH,EAAEd,EAAWF,KAAKkB,WAEnC,YAAnBhB,EAAWF,KAAwC,eAAnBE,EAAWF,IACpDc,EAAcC,MAAK,SAACC,EAAGC,GACrB,MAAgC,cAAzBf,EAAWD,UACde,EAAEd,EAAWF,KAAK,GAAGmB,cAAcF,EAAEf,EAAWF,KAAK,IACrDiB,EAAEf,EAAWF,KAAK,GAAGmB,cAAcH,EAAEd,EAAWF,KAAK,OAG3Dc,EAAcC,MAAK,SAACC,EAAGC,GACrB,OAAOD,EAAEd,EAAWF,MAAiC,cAAzBE,EAAWD,UACnCe,EAAEd,EAAWF,KAAKmB,cAAcF,EAAEf,EAAWF,MAC7CiB,EAAEf,EAAWF,KAAKmB,cAAcH,EAAEd,EAAWF,SAI9Cc,IACN,CAAChB,EAAOI,IAUkBkB,YART,SAACpB,GACnB,IAAIC,EACuB,cAAzBC,EAAWD,UAA4B,aAAe,YACxDE,EAAc,CAAEH,MAAKC,cACrBG,OAAOC,aAAaC,QAAQ,WAAYN,GACxCI,OAAOC,aAAaC,QAAQ,YAAaL,O,wLC2D9BoB,UAhHc,WAC3B,MAAsBtB,mBAAS,CAC7BuB,GAAI,wBACJC,OAAQ,MACRC,WAAY,KAHLC,EAAT,oBAMMC,EAAWC,cACXC,EAAQC,aAAY,SAACD,GAAD,OAAWA,KAE/BE,EAAOD,aAAY,SAACD,GAAD,OAAWA,EAAME,KAAKA,QAEzCC,EAAoBF,aAAY,SAACD,GACrC,OAAOA,EAAMI,UAAUC,SAASC,OAAS,EACrCN,EAAMI,UAAUC,SAChBL,EAAMI,UAAUG,oBASdrC,EAAUsC,YAAgBL,GAA1BjC,MAER,OACE,cAAC,IAAD,CAASuC,SAAS,SAAlB,SACGN,EAAkBG,OAAS,EAC1B,qCACE,cAAC,IAAD,CAAOI,UAAQ,EAACC,SAAO,EAACC,YAAU,EAACC,aAAW,EAA9C,SACE,cAAC,IAAMC,OAAP,CACEpB,GACkD,QAAhDM,EAAMI,UAAUW,OAAOpB,OAAOqB,cAC1B,OACA,WAIV,cAAC,IAAD,CAAMC,QAAM,EAACvB,GAAG,cAAhB,SACGxB,EAAMgD,KAAI,SAACC,GACV,IAAMC,EAAcC,KAAKC,MAAMH,EAAKI,KAAO,MAC3C,OACE,eAAC,IAAMC,SAAP,WACE,cAAC,IAAKC,IAAN,CAAUC,UAAU,SAASC,MAAM,QAAnC,SACE,cAAC,IAAKC,OAAN,CAAaC,MAAO,GAApB,SACE,cAAC,IAAD,CACEC,cAAc,QACdC,KAAK,gBACLC,OAAK,EACLL,MAAM,SACNM,OAAK,EACLC,QAASf,EAAKgB,KAAK7C,OACnB8C,QAAS,kBAnCX,SAACC,GACnBvC,EAASwC,YAAgBD,IACzB,IAAME,EAAMC,EAAQzB,QAAO,SAAC0B,GAAD,OAAOA,EAAE9C,SAAW0C,EAAQ1C,UACvDE,EAAU0C,EAAI,IAgCqBG,CAAYvB,UAIjC,eAAC,IAAKM,IAAN,WACE,cAAC,IAAKG,OAAN,CAAaC,MAAO,EAApB,kBACA,cAAC,IAAKD,OAAN,CAAaC,MAAO,GAApB,SAAyBV,EAAKwB,UAEhC,eAAC,IAAKlB,IAAN,WACE,cAAC,IAAKG,OAAN,CAAaC,MAAO,EAApB,kBACA,cAAC,IAAKD,OAAN,CAAaC,MAAO,GAApB,SACE,cAAC,IAAD,CACEe,KAAK,QACLC,IAAKC,OAAO3B,EAAK4B,MAAMC,IAAM7B,EAAK4B,MAAME,WAI9C,eAAC,IAAKxB,IAAN,WACE,cAAC,IAAKG,OAAN,CAAaC,MAAO,EAApB,qBACA,cAAC,IAAKD,OAAN,CAAaC,MAAO,GAApB,SAAyBV,EAAK+B,aAEhC,eAAC,IAAKzB,IAAN,WACE,cAAC,IAAKG,OAAN,CAAaC,MAAO,EAApB,uBACA,cAAC,IAAKD,OAAN,CAAaC,MAAO,GAApB,SAAyBV,EAAKgC,WAAW,QAE3C,eAAC,IAAK1B,IAAN,WACE,cAAC,IAAKG,OAAN,CAAaC,MAAO,EAApB,oBACA,cAAC,IAAKD,OAAN,CAAaC,MAAO,GAApB,SAAyBV,EAAKxB,YAEhC,eAAC,IAAK8B,IAAN,WACE,cAAC,IAAKG,OAAN,CAAaC,MAAO,EAApB,uBACA,cAAC,IAAKD,OAAN,CAAaC,MAAO,GAApB,SAAyBV,EAAKiC,eAEhC,eAAC,IAAK3B,IAAN,WACE,cAAC,IAAKG,OAAN,CAAaC,MAAO,EAApB,wBACA,cAAC,IAAKD,OAAN,CAAaC,MAAO,GAApB,SACGV,EAAKkC,WAAWC,sBAGrB,eAAC,IAAK7B,IAAN,WACE,cAAC,IAAKG,OAAN,CAAaC,MAAO,EAApB,SACY,WAAT3B,EAAoB,cAAa,gBAEpC,cAAC,IAAK0B,OAAN,CAAaC,MAAO,GAApB,SACY,aAAT3B,EACGkB,EAAYkC,iBACZnC,EAAKI,KAAK+B,wBAxDCC,uBAgE3B","file":"static/js/14.b9cb01c4.chunk.js","sourcesContent":["import { useState, useMemo } from 'react'\r\n\r\nconst useSortableData1 = (items) => {\r\n  const [sortConfig, setSortConfig] = useState({\r\n    key: 'name',\r\n    direction: 'ascending',\r\n  })\r\n  // set initial sort\r\n  window.localStorage.setItem('sort key', sortConfig.key)\r\n  window.localStorage.setItem('direction', sortConfig.direction)\r\n\r\n  // set expiration for local storage to clear\r\n  const now = new Date().getTime()\r\n  const setupTime = localStorage.getItem('setupTime')\r\n  if (setupTime == null) {\r\n    localStorage.setItem('setupTime', now)\r\n  } else {\r\n    if (now - setupTime > 1 * 60 * 60 * 1000) {\r\n      localStorage.clear()\r\n      localStorage.setItem('setupTime', now)\r\n    }\r\n  }\r\n\r\n  const sortedItems = useMemo(() => {\r\n    let sortableItems = [...items]\r\n    if (sortConfig.key === 'area' || sortConfig.key === 'population') {\r\n      sortableItems.sort((a, b) => {\r\n        if (a[sortConfig.key] < b[sortConfig.key]) {\r\n          return sortConfig.direction === 'ascending' ? -1 : 1\r\n        }\r\n        if (a[sortConfig.key] > b[sortConfig.key]) {\r\n          return sortConfig.direction === 'ascending' ? 1 : -1\r\n        }\r\n        return 0\r\n      })\r\n    } else if (sortConfig.key === 'name') {\r\n      sortableItems.sort((a, b) => {\r\n        return sortConfig.direction === 'ascending'\r\n          ? a[sortConfig.key].common.localeCompare(b[sortConfig.key].common)\r\n          : b[sortConfig.key].common.localeCompare(a[sortConfig.key].common)\r\n      })\r\n    } else if (sortConfig.key === 'capital' || sortConfig.key === 'continents') {\r\n      sortableItems.sort((a, b) => {\r\n        return sortConfig.direction === 'ascending'\r\n          ? a[sortConfig.key][0].localeCompare(b[sortConfig.key][0])\r\n          : b[sortConfig.key][0].localeCompare(a[sortConfig.key][0])\r\n      })\r\n    } else {\r\n      sortableItems.sort((a, b) => {\r\n        return a[sortConfig.key] && sortConfig.direction === 'ascending'\r\n          ? a[sortConfig.key].localeCompare(b[sortConfig.key])\r\n          : b[sortConfig.key].localeCompare(a[sortConfig.key])\r\n      })\r\n    }\r\n\r\n    return sortableItems\r\n  }, [items, sortConfig])\r\n\r\n  const requestSort = (key) => {\r\n    let direction =\r\n      sortConfig.direction === 'ascending' ? 'descending' : 'ascending'\r\n    setSortConfig({ key, direction })\r\n    window.localStorage.setItem('sort key', key)\r\n    window.localStorage.setItem('direction', direction)\r\n  }\r\n\r\n  return { items: sortedItems, requestSort }\r\n}\r\n\r\nexport default useSortableData1\r\n\r\n// original table sort code: https://codesandbox.io/s/table-sorting-gxt7g?file=/src/App.js:161-2693\r\n","import React, { useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Segment, Table, Image, Grid, Button } from 'semantic-ui-react'\r\nimport { isIE } from 'react-device-detect'\r\nimport { nanoid } from 'nanoid'\r\nimport { filterCountries } from '../reducers/countryReducer'\r\nimport useSortableData from '../services/sortableTable'\r\nimport regions from '../regions'\r\nimport '../App1.css'\r\n\r\nconst CountriesTableMobile = () => {\r\n  const [, setRegion] = useState({\r\n    id: 'FZUe47mEY9PCOzYmMxzYY',\r\n    region: 'All',\r\n    subregions: [],\r\n  })\r\n\r\n  const dispatch = useDispatch()\r\n  const state = useSelector((state) => state)\r\n\r\n  const unit = useSelector((state) => state.unit.unit)\r\n\r\n  const countriesFiltered = useSelector((state) => {\r\n    return state.countries.filtered.length > 0\r\n      ? state.countries.filtered\r\n      : state.countries.initialCountries\r\n  })\r\n\r\n  const handleClick = (country) => {\r\n    dispatch(filterCountries(country))\r\n    const reg = regions.filter((r) => r.region === country.region)\r\n    setRegion(reg[0])\r\n  }\r\n\r\n  const { items } = useSortableData(countriesFiltered)\r\n\r\n  return (\r\n    <Segment attached=\"bottom\">\r\n      {countriesFiltered.length > 1 ? (\r\n        <>\r\n          <Table sortable compact selectable unstackable>\r\n            <Table.Header\r\n              id={\r\n                state.countries.filter.region.toLowerCase() === 'all'\r\n                  ? 'oneM'\r\n                  : 'twoM'\r\n              }\r\n            ></Table.Header>\r\n          </Table>\r\n          <Grid celled id=\"grid-mobile\">\r\n            {items.map((item) => {\r\n              const areaConvert = Math.round(item.area / 2.59)\r\n              return (\r\n                <React.Fragment key={nanoid()}>\r\n                  <Grid.Row textAlign=\"center\" color=\"black\">\r\n                    <Grid.Column width={16}>\r\n                      <Button\r\n                        labelPosition=\"right\"\r\n                        icon=\"right chevron\"\r\n                        basic\r\n                        color=\"yellow\"\r\n                        fluid\r\n                        content={item.name.common}\r\n                        onClick={() => handleClick(item)}\r\n                      ></Button>\r\n                    </Grid.Column>\r\n                  </Grid.Row>\r\n                  <Grid.Row>\r\n                    <Grid.Column width={4}>CCA3</Grid.Column>\r\n                    <Grid.Column width={12}>{item.cca3}</Grid.Column>\r\n                  </Grid.Row>\r\n                  <Grid.Row>\r\n                    <Grid.Column width={4}>Flag</Grid.Column>\r\n                    <Grid.Column width={12}>\r\n                      <Image\r\n                        size=\"small\"\r\n                        src={isIE ? item.flags.png : item.flags.svg}\r\n                      />\r\n                    </Grid.Column>\r\n                  </Grid.Row>\r\n                  <Grid.Row>\r\n                    <Grid.Column width={4}>Capital</Grid.Column>\r\n                    <Grid.Column width={12}>{item.capital}</Grid.Column>\r\n                  </Grid.Row>\r\n                  <Grid.Row>\r\n                    <Grid.Column width={4}>Continent</Grid.Column>\r\n                    <Grid.Column width={12}>{item.continents[0]}</Grid.Column>\r\n                  </Grid.Row>\r\n                  <Grid.Row>\r\n                    <Grid.Column width={4}>Region</Grid.Column>\r\n                    <Grid.Column width={12}>{item.region}</Grid.Column>\r\n                  </Grid.Row>\r\n                  <Grid.Row>\r\n                    <Grid.Column width={4}>Subregion</Grid.Column>\r\n                    <Grid.Column width={12}>{item.subregion}</Grid.Column>\r\n                  </Grid.Row>\r\n                  <Grid.Row>\r\n                    <Grid.Column width={4}>Population</Grid.Column>\r\n                    <Grid.Column width={12}>\r\n                      {item.population.toLocaleString()}\r\n                    </Grid.Column>\r\n                  </Grid.Row>\r\n                  <Grid.Row>\r\n                    <Grid.Column width={4}>\r\n                      {unit === 'metric' ? 'Area km²' : 'Area mi²'}\r\n                    </Grid.Column>\r\n                    <Grid.Column width={12}>\r\n                      {unit === 'imperial'\r\n                        ? areaConvert.toLocaleString()\r\n                        : item.area.toLocaleString()}\r\n                    </Grid.Column>\r\n                  </Grid.Row>\r\n                </React.Fragment>\r\n              )\r\n            })}\r\n          </Grid>\r\n        </>\r\n      ) : null}\r\n    </Segment>\r\n  )\r\n}\r\n\r\nexport default CountriesTableMobile\r\n"],"sourceRoot":""}