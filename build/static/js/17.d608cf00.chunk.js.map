{"version":3,"sources":["components/HeaderMobile.js"],"names":["HeaderNav","useState","value","setValue","activeItem","setActiveItem","activeSubregion","setActiveSubregion","id","region","subregions","setRegion","state","useSelector","recordsFound","countries","filtered","unit","dispatch","useDispatch","handleInput","e","preventDefault","input","target","searchCountriesByName","handleSort","key","dir","sortCountries","sortIcons","sortConfig","direction","name","attached","inverted","borderless","Item","header","onClick","toggleMenu","Menu","position","val","toggleUnit","color","vertical","fluid","size","icon","link","length","type","placeholder","onChange","item","text","regions","map","r","active","reg","filterCountriesByRegion","s","i","sub","filterCountriesBySubRegion"],"mappings":"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","file":"static/js/17.d608cf00.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport {\r\n  Menu,\r\n  Icon,\r\n  Input,\r\n  Label,\r\n  Dropdown,\r\n} from 'semantic-ui-react'\r\nimport {\r\n  toggleUnit,\r\n  toggleMenu,\r\n  searchCountriesByName,\r\n  sortCountries,\r\n  filterCountriesByRegion,\r\n  filterCountriesBySubRegion,\r\n} from '../reducers/countryReducer'\r\nimport regions from '../regions'\r\n\r\nimport '../assets/css/App.css'\r\n\r\nconst HeaderNav = () => {\r\n  const [value, setValue] = useState('')\r\n  const [activeItem, setActiveItem] = useState('All')\r\n  const [activeSubregion, setActiveSubregion] = useState('')\r\n  const [region, setRegion] = useState({\r\n    id: 'FZUe47mEY9PCOzYmMxzYY',\r\n    region: 'All',\r\n    subregions: [],\r\n  })\r\n\r\n  const state = useSelector((state) => state)\r\n\r\n  const recordsFound = useSelector((state) => state.countries.filtered)\r\n\r\n  const unit = useSelector((state) => state.unit.unit)\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const handleInput = (e) => {\r\n    e.preventDefault()\r\n    const input = e.target.value\r\n    dispatch(searchCountriesByName(input))\r\n    setValue(input)\r\n  }\r\n\r\n  const clearInput = () => {\r\n    dispatch(searchCountriesByName(''))\r\n    setValue('')\r\n  }\r\n\r\n  const showHideMenu = () => {\r\n    dispatch(toggleMenu())\r\n  }\r\n\r\n  const changeUnit = (val) => {\r\n    dispatch(toggleUnit(val))\r\n  }\r\n\r\n  const handleSort = (key, dir) => {\r\n    dispatch(sortCountries(key, dir))\r\n  }\r\n\r\n  const handleRegionClick = (reg) => {\r\n    dispatch(filterCountriesByRegion(reg.region))\r\n    setActiveItem(reg.region)\r\n    setActiveSubregion(reg.subregions[0])\r\n    setRegion(reg)\r\n    setValue('')\r\n  }\r\n\r\n  const handleSubregionClick = (sub) => {\r\n    dispatch(filterCountriesBySubRegion(sub))\r\n    setActiveSubregion(sub)\r\n    setValue('')\r\n  }\r\n\r\n  const sortIcons = (id) => {\r\n    if (\r\n      state.countries.sortConfig.direction === 'ascending' &&\r\n      state.countries.sortConfig.key === id\r\n    ) {\r\n      return <Icon name=\"caret up\" />\r\n    } else if (\r\n      state.countries.sortConfig.direction === 'descending' &&\r\n      state.countries.sortConfig.key === id\r\n    ) {\r\n      return <Icon name=\"caret down\" />\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Menu attached=\"top\" inverted borderless>\r\n        <Menu.Item header onClick={() => showHideMenu()}>\r\n          <p> World Countries Mobile </p>\r\n        </Menu.Item>\r\n        <Menu.Menu position=\"right\">\r\n          <Menu.Item onClick={() => changeUnit()}>\r\n            <Label color=\"blue\">{unit}</Label>\r\n          </Menu.Item>\r\n        </Menu.Menu>\r\n      </Menu>\r\n\r\n      <Menu id=\"mobile-header\" inverted vertical fluid>\r\n        <Menu.Item id=\"mobile-header-item\">\r\n          <Input\r\n            inverted\r\n            size=\"mini\"\r\n            icon={\r\n              <Icon\r\n                link\r\n                name={value.length > 0 ? 'close' : 'search'}\r\n                onClick={value.length > 0 ? clearInput : handleInput}\r\n              />\r\n            }\r\n            type=\"search\"\r\n            value={value}\r\n            placeholder=\"Search by name\"\r\n            onChange={handleInput}\r\n          />\r\n        </Menu.Item>\r\n      </Menu>\r\n      <Menu id=\"mobile-header2\" inverted vertical fluid>\r\n        <Menu.Item id=\"mobile-header2-item\">\r\n          {recordsFound.length} records found\r\n        </Menu.Item>\r\n      </Menu>\r\n      <Menu inverted borderless size=\"tiny\">\r\n        <Dropdown item text=\"Sort\">\r\n          <Dropdown.Menu>\r\n            <Dropdown.Item onClick={() => handleSort('name')}>\r\n              {sortIcons('name')}\r\n              Name\r\n            </Dropdown.Item>\r\n            <Dropdown.Item onClick={() => handleSort('capital')}>\r\n              {sortIcons('capital')}\r\n              Capital\r\n            </Dropdown.Item>\r\n            <Dropdown.Item onClick={() => handleSort('region')}>\r\n              {sortIcons('region')}\r\n              Region\r\n            </Dropdown.Item>\r\n            <Dropdown.Item onClick={() => handleSort('subregion')}>\r\n              {sortIcons('subregion')}\r\n              Subregion\r\n            </Dropdown.Item>\r\n            <Dropdown.Item onClick={() => handleSort('population')}>\r\n              {sortIcons('population')}\r\n              Population\r\n            </Dropdown.Item>\r\n            <Dropdown.Item onClick={() => handleSort('area')}>\r\n              {sortIcons('area')}\r\n              Area\r\n            </Dropdown.Item>\r\n          </Dropdown.Menu>\r\n        </Dropdown>\r\n        <Menu.Item position=\"right\">\r\n          Sorted by: {state.countries.sortConfig.key}\r\n          {', '}\r\n          {state.countries.sortConfig.direction}\r\n        </Menu.Item>\r\n      </Menu>\r\n      <Menu inverted borderless size=\"tiny\">\r\n        <Menu.Item position=\"left\">Filter by</Menu.Item>\r\n        <Dropdown item text={activeItem}>\r\n          <Dropdown.Menu>\r\n            {regions.map((r) => (\r\n              <Dropdown.Item\r\n                key={r.id}\r\n                text={r.region}\r\n                value={r.region}\r\n                active={activeItem === r.region}\r\n                onClick={() => handleRegionClick(r)}\r\n              />\r\n            ))}\r\n          </Dropdown.Menu>\r\n        </Dropdown>\r\n      </Menu>\r\n      {/* subregions filter */}\r\n\r\n      {region.region !== 'All' ? (\r\n        <Menu inverted borderless size=\"tiny\">\r\n          <Menu.Item position=\"left\">Subregion: </Menu.Item>\r\n          <Dropdown item text={activeSubregion}>\r\n            <Dropdown.Menu>\r\n              {region.subregions.map((s, i) => (\r\n                <Dropdown.Item\r\n                  key={i}\r\n                  text={s}\r\n                  value={s}\r\n                  active={activeSubregion === s}\r\n                  onClick={() => handleSubregionClick(s)}\r\n                />\r\n              ))}\r\n            </Dropdown.Menu>\r\n          </Dropdown>\r\n        </Menu>\r\n      ) : (\r\n        <></>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default HeaderNav\r\n"],"sourceRoot":""}