{"version":3,"sources":["pages/Countries.js"],"names":["HeaderNav","loadable","Country","CountriesTable","Countries1","useState","id","region","subregions","setRegion","dispatch","useDispatch","state","useSelector","countriesFiltered","countries","filtered","length","initialCountries","contextRef","useRef","useEffect","filter","toLowerCase","reg","regions","r","ref","context","attached","tabular","widths","map","Item","active","onClick","filterCountriesByRegion","window","localStorage","clear","s","i","subregion","sub","filterCountriesBySubRegion","data"],"mappings":"kmCAWMA,EAAYC,aAAS,kBAAM,+DAC3BC,EAAUD,aAAS,kBAAM,6EACzBE,EAAiBF,aAAS,kBAAM,wDAqGvBG,UAnGI,WAEjB,MAA4BC,mBAAS,CACnCC,GAAI,wBACJC,OAAQ,MACRC,WAAY,KAHd,mBAAOD,EAAP,KAAeE,EAAf,KAMMC,EAAWC,cACXC,EAAQC,aAAY,SAACD,GAAD,OAAWA,KAE/BE,EAAoBD,aAAY,SAACD,GACrC,OAAOA,EAAMG,UAAUC,SAASC,OAAS,EACrCL,EAAMG,UAAUC,SAChBJ,EAAMG,UAAUG,oBAehBC,EAAaC,mBAkBnB,OAhBAC,qBAAU,WACR,GACET,EAAMG,UAAUO,OAAOf,OAAOgB,gBAC9BhB,EAAOA,OAAOgB,cASd,OAAOhB,EAPP,IAAMiB,EAAMC,EAAQH,QAAO,SAACI,GAAD,OACzBA,EAAEnB,OAAOgB,gBAAkBX,EAAMG,UAAUO,OAAOf,OAAOgB,cACrDG,EACA,QAENjB,EAAUe,EAAI,MAIf,CAACZ,IAGF,sBAAKN,GAAG,MAAMqB,IAAKR,EAAnB,UACE,eAAC,IAAD,CAAQb,GAAG,SAASsB,QAAST,EAA7B,UACE,cAACnB,EAAD,IAC8B,IAA7Bc,EAAkBG,OACjB,6BAEA,qCACE,cAAC,IAAD,CAAMY,UAAQ,EAACC,SAAO,EAACC,OAAQ,EAA/B,SACGN,EAAQO,KAAI,SAACN,GAAD,OACX,cAAC,IAAKO,KAAN,CAEEC,OACEtB,EAAMG,UAAUO,OAAOf,OAAOgB,gBAC9BG,EAAEnB,OAAOgB,cAEXY,QAAS,kBA9CEX,EA8CsBE,EA7C/ChB,EAAS0B,YAAwBZ,EAAIjB,SACrCE,EAAUe,QACS,QAAfA,EAAIjB,QACN8B,OAAOC,aAAaC,SAJE,IAACf,GAwCb,SAQgB,QAAbE,EAAEnB,OAAmB,cAAgBmB,EAAEnB,QAPnCmB,EAAEpB,SAWoC,QAAhDM,EAAMG,UAAUO,OAAOf,OAAOgB,cAC7B,cAAC,IAAD,CAAMQ,OAAQxB,EAAOC,WAAWS,OAAQY,UAAQ,EAACC,SAAO,EAAxD,SACGvB,EAAOC,WAAWwB,KAAI,SAACQ,EAAGC,GAAJ,OACrB,cAAC,IAAKR,KAAN,CAEEC,OACEtB,EAAMG,UAAUO,OAAOoB,UAAUnB,gBACjCiB,EAAEjB,cAEJY,QAAS,kBArDGQ,EAqDwBH,OApDpD9B,EAASkC,YAA2BD,IADT,IAACA,GA+Cd,SAQGH,GAPIC,QAYX,6BACC,UAIqB,IAA7B3B,EAAkBG,OACjB,cAACf,EAAD,CAAS2C,KAAM/B,EAAkB,KAEjC,cAACX,EAAD","file":"static/js/18.a83ccd83.chunk.js","sourcesContent":["import React, { useState, useRef, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Sticky, Menu } from 'semantic-ui-react'\r\nimport loadable from '@loadable/component'\r\nimport {\r\n  filterCountriesByRegion,\r\n  filterCountriesBySubRegion,\r\n} from '../reducers/countryReducer'\r\nimport regions from '../regions'\r\nimport '../App1.css'\r\n\r\nconst HeaderNav = loadable(() => import('../components/Header'))\r\nconst Country = loadable(() => import('./Country'))\r\nconst CountriesTable = loadable(() => import('../components/Table'))\r\n\r\nconst Countries1 = () => {\r\n  // 'useState' region/subregion is only being used to identify menu active tab\r\n  const [region, setRegion] = useState({\r\n    id: 'FZUe47mEY9PCOzYmMxzYY',\r\n    region: 'All',\r\n    subregions: [],\r\n  })\r\n\r\n  const dispatch = useDispatch()\r\n  const state = useSelector((state) => state)\r\n  //console.log('state', state)\r\n  const countriesFiltered = useSelector((state) => {\r\n    return state.countries.filtered.length > 0\r\n      ? state.countries.filtered\r\n      : state.countries.initialCountries\r\n  })\r\n\r\n  const handleRegionClick = (reg) => {\r\n    dispatch(filterCountriesByRegion(reg.region))\r\n    setRegion(reg)\r\n    if (reg.region === 'All') {\r\n      window.localStorage.clear()\r\n    }\r\n  }\r\n\r\n  const handleSubregionClick = (sub) => {\r\n    dispatch(filterCountriesBySubRegion(sub))\r\n  }\r\n\r\n  const contextRef = useRef()\r\n\r\n  useEffect(() => {\r\n    if (\r\n      state.countries.filter.region.toLowerCase() !==\r\n      region.region.toLowerCase()\r\n    ) {\r\n      const reg = regions.filter((r) =>\r\n        r.region.toLowerCase() === state.countries.filter.region.toLowerCase()\r\n          ? r\r\n          : null\r\n      )\r\n      setRegion(reg[0])\r\n    } else {\r\n      return region\r\n    }\r\n  }, [state])\r\n\r\n  return (\r\n    <div id=\"ref\" ref={contextRef}>\r\n      <Sticky id=\"Sticky\" context={contextRef}>\r\n        <HeaderNav />\r\n        {countriesFiltered.length === 1 ? (\r\n          <></>\r\n        ) : (\r\n          <>\r\n            <Menu attached tabular widths={7}>\r\n              {regions.map((r) => (\r\n                <Menu.Item\r\n                  key={r.id}\r\n                  active={\r\n                    state.countries.filter.region.toLowerCase() ===\r\n                    r.region.toLowerCase()\r\n                  }\r\n                  onClick={() => handleRegionClick(r)}\r\n                >\r\n                  {r.region === 'All' ? 'All Regions' : r.region}\r\n                </Menu.Item>\r\n              ))}\r\n            </Menu>\r\n            {state.countries.filter.region.toLowerCase() !== 'all' ? (\r\n              <Menu widths={region.subregions.length} attached tabular>\r\n                {region.subregions.map((s, i) => (\r\n                  <Menu.Item\r\n                    key={i}\r\n                    active={\r\n                      state.countries.filter.subregion.toLowerCase() ===\r\n                      s.toLowerCase()\r\n                    }\r\n                    onClick={() => handleSubregionClick(s)}\r\n                  >\r\n                    {s}\r\n                  </Menu.Item>\r\n                ))}\r\n              </Menu>\r\n            ) : (\r\n              <></>\r\n            )}{' '}\r\n          </>\r\n        )}\r\n      </Sticky>\r\n      {countriesFiltered.length === 1 ? (\r\n        <Country data={countriesFiltered[0]} />\r\n      ) : (\r\n        <CountriesTable />\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Countries1\r\n"],"sourceRoot":""}