{"version":3,"sources":["reducers/countryDataReducer.js","components/Table.js","../node_modules/semantic-ui-react/dist/es/collections/Table/TableBody.js","../node_modules/semantic-ui-react/dist/es/collections/Table/TableCell.js","../node_modules/semantic-ui-react/dist/es/collections/Table/TableHeader.js","../node_modules/semantic-ui-react/dist/es/collections/Table/TableFooter.js","../node_modules/semantic-ui-react/dist/es/collections/Table/TableHeaderCell.js","../node_modules/semantic-ui-react/dist/es/collections/Table/TableRow.js","../node_modules/semantic-ui-react/dist/es/collections/Table/Table.js"],"names":["getCountryData","country","dispatch","a","countryService","getCiaData","countryData","type","data","getAllCountriesData","getAllCiaData","countriesData","CountriesTable1","useDispatch","state","useSelector","unit","countriesFiltered","countries","filtered","useEffect","sortIcons","id","sortConfig","direction","key","name","attached","length","sortable","compact","selectable","unstackable","size","Header","filter","region","toLowerCase","Row","fieldName","map","HeaderCell","onClick","sortCountries","handleSort","Body","item","areaConvert","Math","round","area","filterCountries","Cell","textAlign","cca3","srcSet","flags","svg","src","isIE","png","alt","bordered","loading","common","undefined","capital","subregion","population","toLocaleString","CountriesTable","React","memo","TableBody","props","children","className","classes","cx","rest","getUnhandledProps","ElementType","getElementType","createElement","_extends","handledProps","defaultProps","as","propTypes","TableCell","active","collapsing","content","disabled","error","icon","negative","positive","singleLine","verticalAlign","warning","width","useKeyOnly","useTextAlignProp","useVerticalAlignProp","useWidthProp","childrenUtils","isNil","Icon","create","createShorthandFactory","TableHeader","fullWidth","TableFooter","TableHeaderCell","sorted","useValueAndKey","TableRow","cellAs","cells","_map","cell","Table","basic","celled","color","columns","definition","fixed","footerRow","headerRow","headerRows","inverted","padded","renderBodyRow","stackable","striped","structured","tableData","useKeyOrValueAndKey","headerShorthandOptions","headerElement","index","Footer"],"mappings":"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","file":"static/js/18.16b2b441.chunk.js","sourcesContent":["import countryService from '../services/countriesData'\n\nconst countryDataReducer = (state = {}, action) => {\n  switch (action.type) {\n    case 'COUNTRY_CIA_DATA':\n      if (action.data.toString().includes('Error')) {\n        return { data: 'no data' }\n      } else {\n        return action.data\n      }\n    default:\n      return state\n  }\n}\n\nexport const allCountriesDataReducer = (state = [], action) => {\n  switch (action.type) {\n    case 'ALL_COUNTRIES_CIA_DATA':\n   //   console.log('cia reducer state: ',state)\n  //    console.log('cia reducer action: ',action.data)\n      return action.data\n    default:\n      return state\n  }\n}\n\nexport const getCountryData = (country) => {\n  return async (dispatch) => {\n    const countryData = await countryService.getCiaData(country)\n    dispatch({\n      type: 'COUNTRY_CIA_DATA',\n      data: countryData,\n    })\n  }\n}\n\nexport const getAllCountriesData = () => {\n  return async (dispatch) => {\n    const countriesData = await countryService.getAllCiaData()\n    dispatch({\n      type: 'ALL_COUNTRIES_CIA_DATA',\n      data: countriesData,\n    })\n  }\n}\n\nexport default countryDataReducer\n","import React, { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { isIE } from 'react-device-detect'\r\nimport { Segment, Table, Icon, Image } from 'semantic-ui-react'\r\nimport { filterCountries, sortCountries } from '../reducers/countryReducer'\r\nimport { getAllCountriesData } from '../reducers/countryDataReducer'\r\n\r\nconst CountriesTable1 = () => {\r\n  const dispatch = useDispatch()\r\n  const state = useSelector((state) => state)\r\n  const unit = useSelector((state) => state.unit.unit)\r\n  const countriesFiltered = useSelector((state) => state.countries.filtered)\r\n\r\n  useEffect(() => {\r\n    dispatch(getAllCountriesData())\r\n  }, [])\r\n\r\n  const handleClick = (country) => {\r\n    dispatch(filterCountries(country))\r\n  }\r\n\r\n  const tableHeaders = [\r\n    { fieldName: 'CCA3', id: 'cca3' },\r\n    { fieldName: 'Flag', id: 'flag' },\r\n    { fieldName: 'Name', id: 'name' },\r\n    { fieldName: 'Capital', id: 'capital' },\r\n    { fieldName: 'Region', id: 'region' },\r\n    { fieldName: 'Subregion', id: 'subregion' },\r\n    { fieldName: 'Population', id: 'population' },\r\n    { fieldName: 'Area', id: 'area' },\r\n  ]\r\n\r\n  const sortIcons = (id) => {\r\n    if (\r\n      state.countries.sortConfig.direction === 'ascending' &&\r\n      state.countries.sortConfig.key === id\r\n    ) {\r\n      return <Icon name=\"caret up\" />\r\n    } else if (\r\n      state.countries.sortConfig.direction === 'descending' &&\r\n      state.countries.sortConfig.key === id\r\n    ) {\r\n      return <Icon name=\"caret down\" />\r\n    }\r\n  }\r\n\r\n  const handleSort = (id) => {\r\n    dispatch(sortCountries(id))\r\n  }\r\n\r\n  return (\r\n    <Segment attached=\"bottom\">\r\n      {countriesFiltered.length > 1 ? (\r\n        <>\r\n          <Table sortable compact selectable unstackable size=\"small\">\r\n            <Table.Header\r\n              id={\r\n                state.countries.filter.region.toLowerCase() === 'all'\r\n                  ? 'one'\r\n                  : 'two'\r\n              }\r\n            >\r\n              <Table.Row>\r\n                <>\r\n                  {tableHeaders.map(({ fieldName, id }) => (\r\n                    <Table.HeaderCell key={id} onClick={() => handleSort(id)}>\r\n                      {fieldName === 'Area'\r\n                        ? unit === 'metric'\r\n                          ? 'Area km²'\r\n                          : 'Area mi²'\r\n                        : fieldName}\r\n                      {sortIcons(id)}\r\n                    </Table.HeaderCell>\r\n                  ))}\r\n                </>\r\n              </Table.Row>\r\n            </Table.Header>\r\n            <Table.Body>\r\n              <>\r\n                {countriesFiltered.map((item) => {\r\n                  const areaConvert = Math.round(item.area / 2.59)\r\n                  return (\r\n                    <Table.Row\r\n                      data-test-id=\"table-row\"\r\n                      id=\"table-row\"\r\n                      key={item.cca3}\r\n                      onClick={() => handleClick(item)}\r\n                    >\r\n                      <Table.Cell textAlign=\"center\">{item.cca3}</Table.Cell>\r\n                      <Table.Cell>\r\n                        <Image\r\n                          srcSet={`${item.flags.svg} 100w`}\r\n                          size=\"tiny\"\r\n                          src={isIE ? item.flags.png : item.flags.svg}\r\n                          alt=\"country flag\"\r\n                          bordered\r\n                          loading=\"lazy\"\r\n                        />\r\n                      </Table.Cell>\r\n                      <Table.Cell>{item.name.common}</Table.Cell>\r\n                      <Table.Cell>\r\n                        {item.capital === undefined ? 'no data' : item.capital}\r\n                      </Table.Cell>\r\n                      <Table.Cell>{item.region}</Table.Cell>\r\n                      <Table.Cell>{item.subregion}</Table.Cell>\r\n                      <Table.Cell>\r\n                        {item.population.toLocaleString()}\r\n                      </Table.Cell>\r\n                      <Table.Cell>\r\n                        {unit === 'imperial'\r\n                          ? areaConvert.toLocaleString()\r\n                          : item.area.toLocaleString()}\r\n                      </Table.Cell>\r\n                    </Table.Row>\r\n                  )\r\n                })}\r\n              </>\r\n            </Table.Body>\r\n          </Table>\r\n        </>\r\n      ) : null}\r\n    </Segment>\r\n  )\r\n}\r\n\r\nconst CountriesTable = React.memo(CountriesTable1)\r\n\r\nexport default CountriesTable\r\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { getElementType, getUnhandledProps } from '../../lib';\n\nfunction TableBody(props) {\n  var children = props.children,\n      className = props.className;\n  var classes = cx(className);\n  var rest = getUnhandledProps(TableBody, props);\n  var ElementType = getElementType(TableBody, props);\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), children);\n}\n\nTableBody.handledProps = [\"as\", \"children\", \"className\"];\nTableBody.defaultProps = {\n  as: 'tbody'\n};\nTableBody.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string\n} : {};\nexport default TableBody;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _without from \"lodash-es/without\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, createShorthandFactory, customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useTextAlignProp, useVerticalAlignProp, useWidthProp } from '../../lib';\nimport Icon from '../../elements/Icon';\n/**\n * A table row can have cells.\n */\n\nfunction TableCell(props) {\n  var active = props.active,\n      children = props.children,\n      className = props.className,\n      collapsing = props.collapsing,\n      content = props.content,\n      disabled = props.disabled,\n      error = props.error,\n      icon = props.icon,\n      negative = props.negative,\n      positive = props.positive,\n      selectable = props.selectable,\n      singleLine = props.singleLine,\n      textAlign = props.textAlign,\n      verticalAlign = props.verticalAlign,\n      warning = props.warning,\n      width = props.width;\n  var classes = cx(useKeyOnly(active, 'active'), useKeyOnly(collapsing, 'collapsing'), useKeyOnly(disabled, 'disabled'), useKeyOnly(error, 'error'), useKeyOnly(negative, 'negative'), useKeyOnly(positive, 'positive'), useKeyOnly(selectable, 'selectable'), useKeyOnly(singleLine, 'single line'), useKeyOnly(warning, 'warning'), useTextAlignProp(textAlign), useVerticalAlignProp(verticalAlign), useWidthProp(width, 'wide'), className);\n  var rest = getUnhandledProps(TableCell, props);\n  var ElementType = getElementType(TableCell, props);\n\n  if (!childrenUtils.isNil(children)) {\n    return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n      className: classes\n    }), children);\n  }\n\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), Icon.create(icon), content);\n}\n\nTableCell.handledProps = [\"active\", \"as\", \"children\", \"className\", \"collapsing\", \"content\", \"disabled\", \"error\", \"icon\", \"negative\", \"positive\", \"selectable\", \"singleLine\", \"textAlign\", \"verticalAlign\", \"warning\", \"width\"];\nTableCell.defaultProps = {\n  as: 'td'\n};\nTableCell.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** A cell can be active or selected by a user. */\n  active: PropTypes.bool,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** A cell can be collapsing so that it only uses as much space as required. */\n  collapsing: PropTypes.bool,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** A cell can be disabled. */\n  disabled: PropTypes.bool,\n\n  /** A cell may call attention to an error or a negative value. */\n  error: PropTypes.bool,\n\n  /** Add an Icon by name, props object, or pass an <Icon /> */\n  icon: customPropTypes.itemShorthand,\n\n  /** A cell may let a user know whether a value is bad. */\n  negative: PropTypes.bool,\n\n  /** A cell may let a user know whether a value is good. */\n  positive: PropTypes.bool,\n\n  /** A cell can be selectable. */\n  selectable: PropTypes.bool,\n\n  /** A cell can specify that its contents should remain on a single line and not wrap. */\n  singleLine: PropTypes.bool,\n\n  /** A table cell can adjust its text alignment. */\n  textAlign: PropTypes.oneOf(_without(SUI.TEXT_ALIGNMENTS, 'justified')),\n\n  /** A table cell can adjust its text alignment. */\n  verticalAlign: PropTypes.oneOf(SUI.VERTICAL_ALIGNMENTS),\n\n  /** A cell may warn a user. */\n  warning: PropTypes.bool,\n\n  /** A table can specify the width of individual columns independently. */\n  width: PropTypes.oneOf(SUI.WIDTHS)\n} : {};\nTableCell.create = createShorthandFactory(TableCell, function (content) {\n  return {\n    content: content\n  };\n});\nexport default TableCell;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, useKeyOnly } from '../../lib';\n/**\n * A table can have a header.\n */\n\nfunction TableHeader(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content,\n      fullWidth = props.fullWidth;\n  var classes = cx(useKeyOnly(fullWidth, 'full-width'), className);\n  var rest = getUnhandledProps(TableHeader, props);\n  var ElementType = getElementType(TableHeader, props);\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nTableHeader.handledProps = [\"as\", \"children\", \"className\", \"content\", \"fullWidth\"];\nTableHeader.defaultProps = {\n  as: 'thead'\n};\nTableHeader.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** A definition table can have a full width header or footer, filling in the gap left by the first column. */\n  fullWidth: PropTypes.bool\n} : {};\nexport default TableHeader;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { getUnhandledProps } from '../../lib';\nimport TableHeader from './TableHeader';\n/**\n * A table can have a footer.\n */\n\nfunction TableFooter(props) {\n  var as = props.as;\n  var rest = getUnhandledProps(TableFooter, props);\n  return /*#__PURE__*/React.createElement(TableHeader, _extends({}, rest, {\n    as: as\n  }));\n}\n\nTableFooter.handledProps = [\"as\"];\nTableFooter.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType\n} : {};\nTableFooter.defaultProps = {\n  as: 'tfoot'\n};\nexport default TableFooter;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { getUnhandledProps, useValueAndKey } from '../../lib';\nimport TableCell from './TableCell';\n/**\n * A table can have a header cell.\n */\n\nfunction TableHeaderCell(props) {\n  var as = props.as,\n      className = props.className,\n      sorted = props.sorted;\n  var classes = cx(useValueAndKey(sorted, 'sorted'), className);\n  var rest = getUnhandledProps(TableHeaderCell, props);\n  return /*#__PURE__*/React.createElement(TableCell, _extends({}, rest, {\n    as: as,\n    className: classes\n  }));\n}\n\nTableHeaderCell.handledProps = [\"as\", \"className\", \"sorted\"];\nTableHeaderCell.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** A header cell can be sorted in ascending or descending order. */\n  sorted: PropTypes.oneOf(['ascending', 'descending'])\n} : {};\nTableHeaderCell.defaultProps = {\n  as: 'th'\n};\nexport default TableHeaderCell;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _without from \"lodash-es/without\";\nimport _map from \"lodash-es/map\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, createShorthandFactory, customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useTextAlignProp, useVerticalAlignProp } from '../../lib';\nimport TableCell from './TableCell';\n/**\n * A table can have rows.\n */\n\nfunction TableRow(props) {\n  var active = props.active,\n      cellAs = props.cellAs,\n      cells = props.cells,\n      children = props.children,\n      className = props.className,\n      disabled = props.disabled,\n      error = props.error,\n      negative = props.negative,\n      positive = props.positive,\n      textAlign = props.textAlign,\n      verticalAlign = props.verticalAlign,\n      warning = props.warning;\n  var classes = cx(useKeyOnly(active, 'active'), useKeyOnly(disabled, 'disabled'), useKeyOnly(error, 'error'), useKeyOnly(negative, 'negative'), useKeyOnly(positive, 'positive'), useKeyOnly(warning, 'warning'), useTextAlignProp(textAlign), useVerticalAlignProp(verticalAlign), className);\n  var rest = getUnhandledProps(TableRow, props);\n  var ElementType = getElementType(TableRow, props);\n\n  if (!childrenUtils.isNil(children)) {\n    return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n      className: classes\n    }), children);\n  }\n\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), _map(cells, function (cell) {\n    return TableCell.create(cell, {\n      defaultProps: {\n        as: cellAs\n      }\n    });\n  }));\n}\n\nTableRow.handledProps = [\"active\", \"as\", \"cellAs\", \"cells\", \"children\", \"className\", \"disabled\", \"error\", \"negative\", \"positive\", \"textAlign\", \"verticalAlign\", \"warning\"];\nTableRow.defaultProps = {\n  as: 'tr',\n  cellAs: 'td'\n};\nTableRow.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** A row can be active or selected by a user. */\n  active: PropTypes.bool,\n\n  /** An element type to render as (string or function). */\n  cellAs: PropTypes.elementType,\n\n  /** Shorthand array of props for TableCell. */\n  cells: customPropTypes.collectionShorthand,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** A row can be disabled. */\n  disabled: PropTypes.bool,\n\n  /** A row may call attention to an error or a negative value. */\n  error: PropTypes.bool,\n\n  /** A row may let a user know whether a value is bad. */\n  negative: PropTypes.bool,\n\n  /** A row may let a user know whether a value is good. */\n  positive: PropTypes.bool,\n\n  /** A table row can adjust its text alignment. */\n  textAlign: PropTypes.oneOf(_without(SUI.TEXT_ALIGNMENTS, 'justified')),\n\n  /** A table row can adjust its vertical alignment. */\n  verticalAlign: PropTypes.oneOf(SUI.VERTICAL_ALIGNMENTS),\n\n  /** A row may warn a user. */\n  warning: PropTypes.bool\n} : {};\nTableRow.create = createShorthandFactory(TableRow, function (cells) {\n  return {\n    cells: cells\n  };\n});\nexport default TableRow;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _without from \"lodash-es/without\";\nimport _map from \"lodash-es/map\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useKeyOrValueAndKey, useTextAlignProp, useVerticalAlignProp, useWidthProp } from '../../lib';\nimport TableBody from './TableBody';\nimport TableCell from './TableCell';\nimport TableFooter from './TableFooter';\nimport TableHeader from './TableHeader';\nimport TableHeaderCell from './TableHeaderCell';\nimport TableRow from './TableRow';\n/**\n * A table displays a collections of data grouped into rows.\n */\n\nfunction Table(props) {\n  var attached = props.attached,\n      basic = props.basic,\n      celled = props.celled,\n      children = props.children,\n      className = props.className,\n      collapsing = props.collapsing,\n      color = props.color,\n      columns = props.columns,\n      compact = props.compact,\n      definition = props.definition,\n      fixed = props.fixed,\n      footerRow = props.footerRow,\n      headerRow = props.headerRow,\n      headerRows = props.headerRows,\n      inverted = props.inverted,\n      padded = props.padded,\n      renderBodyRow = props.renderBodyRow,\n      selectable = props.selectable,\n      singleLine = props.singleLine,\n      size = props.size,\n      sortable = props.sortable,\n      stackable = props.stackable,\n      striped = props.striped,\n      structured = props.structured,\n      tableData = props.tableData,\n      textAlign = props.textAlign,\n      unstackable = props.unstackable,\n      verticalAlign = props.verticalAlign;\n  var classes = cx('ui', color, size, useKeyOnly(celled, 'celled'), useKeyOnly(collapsing, 'collapsing'), useKeyOnly(definition, 'definition'), useKeyOnly(fixed, 'fixed'), useKeyOnly(inverted, 'inverted'), useKeyOnly(selectable, 'selectable'), useKeyOnly(singleLine, 'single line'), useKeyOnly(sortable, 'sortable'), useKeyOnly(stackable, 'stackable'), useKeyOnly(striped, 'striped'), useKeyOnly(structured, 'structured'), useKeyOnly(unstackable, 'unstackable'), useKeyOrValueAndKey(attached, 'attached'), useKeyOrValueAndKey(basic, 'basic'), useKeyOrValueAndKey(compact, 'compact'), useKeyOrValueAndKey(padded, 'padded'), useTextAlignProp(textAlign), useVerticalAlignProp(verticalAlign), useWidthProp(columns, 'column'), 'table', className);\n  var rest = getUnhandledProps(Table, props);\n  var ElementType = getElementType(Table, props);\n\n  if (!childrenUtils.isNil(children)) {\n    return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n      className: classes\n    }), children);\n  }\n\n  var hasHeaderRows = headerRow || headerRows;\n  var headerShorthandOptions = {\n    defaultProps: {\n      cellAs: 'th'\n    }\n  };\n  var headerElement = hasHeaderRows && /*#__PURE__*/React.createElement(TableHeader, null, TableRow.create(headerRow, headerShorthandOptions), _map(headerRows, function (data) {\n    return TableRow.create(data, headerShorthandOptions);\n  }));\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), headerElement, /*#__PURE__*/React.createElement(TableBody, null, renderBodyRow && _map(tableData, function (data, index) {\n    return TableRow.create(renderBodyRow(data, index));\n  })), footerRow && /*#__PURE__*/React.createElement(TableFooter, null, TableRow.create(footerRow)));\n}\n\nTable.handledProps = [\"as\", \"attached\", \"basic\", \"celled\", \"children\", \"className\", \"collapsing\", \"color\", \"columns\", \"compact\", \"definition\", \"fixed\", \"footerRow\", \"headerRow\", \"headerRows\", \"inverted\", \"padded\", \"renderBodyRow\", \"selectable\", \"singleLine\", \"size\", \"sortable\", \"stackable\", \"striped\", \"structured\", \"tableData\", \"textAlign\", \"unstackable\", \"verticalAlign\"];\nTable.defaultProps = {\n  as: 'table'\n};\nTable.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Attach table to other content */\n  attached: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['top', 'bottom'])]),\n\n  /** A table can reduce its complexity to increase readability. */\n  basic: PropTypes.oneOfType([PropTypes.oneOf(['very']), PropTypes.bool]),\n\n  /** A table may be divided into individual cells. */\n  celled: PropTypes.bool,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** A table can be collapsing, taking up only as much space as its rows. */\n  collapsing: PropTypes.bool,\n\n  /** A table can be given a color to distinguish it from other tables. */\n  color: PropTypes.oneOf(SUI.COLORS),\n\n  /** A table can specify its column count to divide its content evenly. */\n  columns: PropTypes.oneOf(SUI.WIDTHS),\n\n  /** A table may sometimes need to be more compact to make more rows visible at a time. */\n  compact: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['very'])]),\n\n  /** A table may be formatted to emphasize a first column that defines a rows content. */\n  definition: PropTypes.bool,\n\n  /**\n   * A table can use fixed a special faster form of table rendering that does not resize table cells based on content\n   */\n  fixed: PropTypes.bool,\n\n  /** Shorthand for a TableRow to be placed within Table.Footer. */\n  footerRow: customPropTypes.itemShorthand,\n\n  /** Shorthand for a TableRow to be placed within Table.Header. */\n  headerRow: customPropTypes.every([customPropTypes.disallow(['headerRows']), customPropTypes.itemShorthand]),\n\n  /** Shorthand for multiple TableRows to be placed within Table.Header. */\n  headerRows: customPropTypes.every([customPropTypes.disallow(['headerRow']), customPropTypes.collectionShorthand]),\n\n  /** A table's colors can be inverted. */\n  inverted: PropTypes.bool,\n\n  /** A table may sometimes need to be more padded for legibility. */\n  padded: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['very'])]),\n\n  /**\n   * Mapped over `tableData` and should return shorthand for each Table.Row to be placed within Table.Body.\n   *\n   * @param {*} data - An element in the `tableData` array.\n   * @param {number} index - The index of the current element in `tableData`.\n   * @returns {*} Shorthand for a Table.Row.\n   */\n  renderBodyRow: customPropTypes.every([customPropTypes.disallow(['children']), customPropTypes.demand(['tableData']), PropTypes.func]),\n\n  /** A table can have its rows appear selectable. */\n  selectable: PropTypes.bool,\n\n  /** A table can specify that its cell contents should remain on a single line and not wrap. */\n  singleLine: PropTypes.bool,\n\n  /** A table can also be small or large. */\n  size: PropTypes.oneOf(_without(SUI.SIZES, 'mini', 'tiny', 'medium', 'big', 'huge', 'massive')),\n\n  /** A table may allow a user to sort contents by clicking on a table header. */\n  sortable: PropTypes.bool,\n\n  /** A table can specify how it stacks table content responsively. */\n  stackable: PropTypes.bool,\n\n  /** A table can stripe alternate rows of content with a darker color to increase contrast. */\n  striped: PropTypes.bool,\n\n  /** A table can be formatted to display complex structured data. */\n  structured: PropTypes.bool,\n\n  /** Data to be passed to the renderBodyRow function. */\n  tableData: customPropTypes.every([customPropTypes.disallow(['children']), customPropTypes.demand(['renderBodyRow']), PropTypes.array]),\n\n  /** A table can adjust its text alignment. */\n  textAlign: PropTypes.oneOf(_without(SUI.TEXT_ALIGNMENTS, 'justified')),\n\n  /** A table can specify how it stacks table content responsively. */\n  unstackable: PropTypes.bool,\n\n  /** A table can adjust its text alignment. */\n  verticalAlign: PropTypes.oneOf(SUI.VERTICAL_ALIGNMENTS)\n} : {};\nTable.Body = TableBody;\nTable.Cell = TableCell;\nTable.Footer = TableFooter;\nTable.Header = TableHeader;\nTable.HeaderCell = TableHeaderCell;\nTable.Row = TableRow;\nexport default Table;"],"sourceRoot":""}