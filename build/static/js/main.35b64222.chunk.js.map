{"version":3,"sources":["services/countriesData.js","reducers/weatherReducer.js","reducers/timeZoneReducer.js","components/WorldLeaders.js","App.js","store.js","index.js","reducers/countryReducer.js"],"names":["getAll","a","console","log","axios","get","response","data","getWeather","params","location","unit","res","getTimeZone","dispatch","countryService","weather","type","weatherReducer","state","action","timeZone","timeZoneReducer","Leaders","country","govData","leaders","filter","l","name","common","colors","length","map","g","i","id","Item","c","ci","color","horizontal","positionlabel","start_year","end_year","officeholderlabel","Countries","loadable","CountriesMobile","App","useDispatch","useEffect","initializeCountries","undefined","useSelector","countries","initialCountries","isMobile","reducer","combineReducers","countryReducer","unitReducer","time","menu","menuReducer","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById","show","toggleUnit","toggleMenu","resetFilter","reset","searchCountries","input","filterCountries","filterCountriesByContinent","continent","filterCountriesByRegion","region","filterCountriesBySubRegion","subregion","noCapitals","item","antarctica","capital","bouvetIsland","heardIsland","macau","usMinor","southGeorgia","frenchSouthern","otherCountries","filtered","toSearch","toLowerCase","startsWith","continents","selectContinent","continentFiltered","countriesFiltered","selectRegion","regionFiltered","selectSubRegion","subregionFiltered","s","newState"],"mappings":"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","file":"static/js/main.35b64222.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst baseUrl = '/api/countries'\r\nconst getAll = async () => {\r\n  console.log('getAll')\r\n  const response = await axios.get(baseUrl)\r\n  return response.data\r\n}\r\n\r\nconst getWeather = async (params) => {\r\nconsole.log('getWeather')\r\n  const res = await axios.get(\r\n    `/api/weather/lat/${params.location[0]}/lng/${params.location[1]}/unit/${params.unit}`\r\n  )\r\n  return res.data\r\n}\r\n\r\nconst getTimeZone = async (params) => {\r\n  const res = await axios.get(\r\n    `/api/time/lat/${params.location[0]}/lng/${params.location[1]}`\r\n  )\r\n  return res.data\r\n}\r\n\r\nexport default { getAll, getWeather, getTimeZone }\r\n","import countryService from '../services/countriesData'\n\nconst weatherReducer = (state = {}, action) => {\n  switch (action.type) {\n    case 'GET_WEATHER':\n      return action.data\n    default:\n      return state\n  }\n}\n\nexport const getWeather = (location) => {\n  return async (dispatch) => {\n    const weather = await countryService.getWeather(location)\n    dispatch({\n      type: 'GET_WEATHER',\n      data: weather,\n    })\n  }\n}\n\nexport default weatherReducer\n","import countryService from '../services/countriesData'\n\nconst timeZoneReducer = (state = {}, action) => {\n  switch (action.type) {\n    case 'GET_TIME_ZONE':\n      return action.data\n    default:\n      return state\n  }\n}\n\nexport const getTimeZone = (location) => {\n  return async (dispatch) => {\n    const timeZone = await countryService.getTimeZone(location)\n    dispatch({\n      type: 'GET_TIME_ZONE',\n      data: timeZone,\n    })\n  }\n}\n\nexport default timeZoneReducer\n","import React from 'react'\nimport { List, Label } from 'semantic-ui-react'\nimport leaders from '../worldLeaders'\n\nconst Leaders = ({ country }) => {\n  console.log('Gov country', country)\n  const govData = leaders.filter((l) => l.country === country.name.common)\n  console.log('govData', govData)\n  const colors = [\n    'olive',\n    'green',\n    'teal',\n    'blue',\n    'violet',\n    'purple',\n    'pink',\n    'brown',\n  ]\n\n  return govData.length > 0 ? (\n    <>\n      {govData.map((g, i) => (\n        <List id=\"government\" key={i}>\n          <List.Item>\n            {colors.map((c, ci) =>\n              ci === i ? (\n                <Label key={ci} color={c} horizontal>\n                  {g.positionlabel}\n                  {', '}\n                  {g.start_year}\n                  {' - '}\n                  {g.end_year !== null ? g.end_year : 'current'}\n                </Label>\n              ) : null\n            )}\n          </List.Item>\n          <List.Item>{g.officeholderlabel}</List.Item>\n        </List>\n      ))}\n    </>\n  ) : (\n    <Label color=\"black\">No information available</Label>\n  )\n}\n\nexport default Leaders\n","import React, { useEffect } from 'react'\r\nimport { isMobile } from 'react-device-detect'\r\nimport loadable from '@loadable/component'\r\nimport { initializeCountries } from './reducers/countryReducer'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n\r\nconst Countries = loadable(() => import('./pages/Countries'))\r\nconst CountriesMobile = loadable(() => import('./pages/CountriesMobile'))\r\n\r\nimport Gov from './components/WorldLeaders'\r\n\r\nfunction App() {\r\n  const dispatch = useDispatch()\r\n\r\n  useEffect(() => {\r\n    dispatch(initializeCountries())\r\n  }, [dispatch])\r\n\r\n  const countries = useSelector((state) => {\r\n    return state.countries.initialCountries\r\n  })\r\n\r\n  return countries !== undefined ? (\r\n    isMobile ? (\r\n      <CountriesMobile />\r\n    ) : (\r\n      <Countries />\r\n    )\r\n  ) : (\r\n    <></>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import { createStore, combineReducers, applyMiddleware } from 'redux'\nimport thunk from 'redux-thunk'\nimport { composeWithDevTools } from 'redux-devtools-extension'\n\nimport countryReducer, {\n  unitReducer,\n  menuReducer,\n} from './reducers/countryReducer'\nimport weatherReducer from './reducers/weatherReducer'\nimport timeZoneReducer from './reducers/timeZoneReducer'\n\nconst reducer = combineReducers({\n  countries: countryReducer,\n  unit: unitReducer,\n  weather: weatherReducer,\n  time: timeZoneReducer,\n  menu: menuReducer,\n})\n\nconst store = createStore(reducer, composeWithDevTools(applyMiddleware(thunk)))\n\nexport default store\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport { Provider } from 'react-redux'\r\nimport './assets/css/semantic.css'\r\nimport 'react-app-polyfill/ie11'\r\nimport 'core-js'\r\nimport App from './App'\r\nimport store from './store'\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n)\r\n//  \"proxy\": \"https://sheltered-scrubland-08732.herokuapp.com\",\r\n// local proxy: \"proxy\": \"http://localhost:3001/\"\r\n// backend: https://github.com/I-keep-trying/my-app-backend\r\n","import countryService from '../services/countriesData'\r\n\r\n/* ---------- Reducers ------------- */\r\nconst countryReducer = (state = [], action) => {\r\n  switch (action.type) {\r\n    case 'INIT_COUNTRIES':\r\n      // Find countries from restcountries.com api with missing keys\r\n      const noCapitals = action.data.filter(\r\n        (item) =>\r\n          item.name.common === 'Antarctica' ||\r\n          item.name.common === 'Bouvet Island' ||\r\n          item.name.common === 'Heard Island and McDonald Islands' ||\r\n          item.name.common === 'Macau' ||\r\n          item.name.common === 'United States Minor Outlying Islands' ||\r\n          item.name.common === 'South Georgia' ||\r\n          item.name.common === 'French Southern and Antarctic Lands'\r\n      )\r\n\r\n      // Create replacements inserting missing keys\r\n      const antarctica = noCapitals\r\n        .filter((c) => c.name.common === 'Antarctica')\r\n        .map((c) => {\r\n          return { ...c, capital: ['No Capital City'], subregion: 'Antarctic' }\r\n        })\r\n\r\n      const bouvetIsland = noCapitals\r\n        .filter((c) => c.name.common === 'Bouvet Island')\r\n        .map((c) => {\r\n          return { ...c, capital: ['Oslo'], subregion: 'Antarctic' }\r\n        })\r\n\r\n      const heardIsland = noCapitals\r\n        .filter((c) => c.name.common === 'Heard Island and McDonald Islands')\r\n        .map((c) => {\r\n          return { ...c, capital: ['Bern'], subregion: 'Antarctic' }\r\n        })\r\n\r\n      const macau = noCapitals\r\n        .filter((c) => c.name.common === 'Macau')\r\n        .map((c) => {\r\n          return { ...c, capital: ['Macau'] }\r\n        })\r\n\r\n      const usMinor = noCapitals\r\n        .filter((c) => c.name.common === 'United States Minor Outlying Islands')\r\n        .map((c) => {\r\n          return { ...c, capital: ['Washington DC'] }\r\n        })\r\n\r\n      const southGeorgia = noCapitals\r\n        .filter((c) => c.name.common === 'South Georgia')\r\n        .map((c) => {\r\n          return { ...c, subregion: 'Antarctic' }\r\n        })\r\n\r\n      const frenchSouthern = noCapitals\r\n        .filter((c) => c.name.common === 'French Southern and Antarctic Lands')\r\n        .map((c) => {\r\n          return { ...c, subregion: 'Antarctic' }\r\n        })\r\n\r\n      // Remove defective country objects\r\n      const otherCountries = action.data.filter(\r\n        (item) =>\r\n          item.name.common !== 'Antarctica' &&\r\n          item.name.common !== 'Bouvet Island' &&\r\n          item.name.common !== 'Heard Island and McDonald Islands' &&\r\n          item.name.common !== 'Macau' &&\r\n          item.name.common !== 'United States Minor Outlying Islands' &&\r\n          item.name.common !== 'South Georgia' &&\r\n          item.name.common !== 'French Southern and Antarctic Lands'\r\n      )\r\n\r\n      // Insert replacement objects with keys in place\r\n      const initialCountries = [\r\n        ...otherCountries,\r\n        southGeorgia[0],\r\n        heardIsland[0],\r\n        macau[0],\r\n        usMinor[0],\r\n        antarctica[0],\r\n        bouvetIsland[0],\r\n        frenchSouthern[0],\r\n      ]\r\n      return {\r\n        initialCountries,\r\n        filter: {\r\n          input: '',\r\n          country: '',\r\n          continent: 'All',\r\n          region: 'All',\r\n          subregion: '',\r\n          reset: false,\r\n        },\r\n        filtered: [],\r\n      }\r\n    case 'FILTER_COUNTRIES':\r\n      if (action.input === '') {\r\n        return {\r\n          ...state,\r\n          filter: {\r\n            input: '',\r\n            country: '',\r\n            continent: 'All',\r\n            region: 'All',\r\n            subregion: '',\r\n            reset: false,\r\n          },\r\n          filtered: [],\r\n        }\r\n      } else if (action.input) {\r\n        const toSearch = {\r\n          ...state,\r\n          filter: {\r\n            ...state.filter,\r\n            input: action.input.toLowerCase(),\r\n          },\r\n        }\r\n        const filtered = toSearch.initialCountries.filter((c) =>\r\n          c.name.common.toLowerCase().startsWith(toSearch.filter.input)\r\n        )\r\n        return filtered.length === 1\r\n          ? {\r\n              ...toSearch,\r\n              filter: {\r\n                ...toSearch.filter,\r\n                country: filtered[0].name.common,\r\n                continent: filtered[0].continents[0],\r\n                region: filtered[0].region,\r\n                subregion: filtered[0].subregion,\r\n              },\r\n              filtered: filtered,\r\n            }\r\n          : { ...toSearch, filtered: filtered }\r\n      } else if (action.country) {\r\n        const toSearch = {\r\n          ...state,\r\n          filter: {\r\n            ...state.filter,\r\n            country: action.country.name.common.toLowerCase(),\r\n            continent: action.country.continents[0].toLowerCase(),\r\n            region: action.country.region,\r\n            subregion: action.country.subregion,\r\n          },\r\n        }\r\n        const filtered = toSearch.initialCountries.filter((c) =>\r\n          c.name.common.toLowerCase().startsWith(toSearch.filter.country)\r\n        )\r\n        return { ...toSearch, filtered: filtered }\r\n      } else if (action.continent) {\r\n        const selectContinent = {\r\n          ...state,\r\n          filter: {\r\n            ...state.filter,\r\n            continent: action.continent.toLowerCase(),\r\n          },\r\n        }\r\n        const continentFiltered =\r\n          selectContinent.filter.continent === 'All'\r\n            ? selectContinent.initialCountries\r\n            : selectContinent.initialCountries.filter(\r\n                (c) =>\r\n                  c.continents[0].toLowerCase() ===\r\n                  selectContinent.filter.continent\r\n              )\r\n        const countriesFiltered = {\r\n          ...selectContinent,\r\n          filtered: continentFiltered,\r\n          filter: {\r\n            ...selectContinent.filter,\r\n            input: '',\r\n            country: '',\r\n            continent: action.continent.toLowerCase(),\r\n            region: 'All',\r\n            subregion: '',\r\n          },\r\n        }\r\n        return countriesFiltered\r\n      } else if (action.region) {\r\n        const selectRegion = {\r\n          ...state,\r\n          filter: { ...state.filter, region: action.region.toLowerCase() },\r\n        }\r\n\r\n        const regionFiltered =\r\n          selectRegion.filter.region === 'all'\r\n            ? selectRegion.initialCountries\r\n            : selectRegion.initialCountries.filter(\r\n                (c) => c.region.toLowerCase() === selectRegion.filter.region\r\n              )\r\n\r\n        return {\r\n          ...selectRegion,\r\n          filtered: regionFiltered,\r\n        }\r\n      } else if (action.subregion) {\r\n        const selectSubRegion = {\r\n          ...state,\r\n          filter: {\r\n            ...state.filter,\r\n            subregion: action.subregion.toLowerCase(),\r\n          },\r\n        }\r\n        const subregionFiltered = selectSubRegion.initialCountries.filter(\r\n          (s) => s.subregion?.toLowerCase() === selectSubRegion.filter.subregion\r\n        )\r\n        const newState = { ...selectSubRegion, filtered: subregionFiltered }\r\n        return newState\r\n      } else {\r\n        return state\r\n      }\r\n\r\n    case 'RESET_FILTER':\r\n      return {\r\n        ...state,\r\n        filter: {\r\n          input: '',\r\n          country: '',\r\n          continent: '',\r\n          region: 'All',\r\n          subregion: '',\r\n          reset: true,\r\n        },\r\n        filtered: [],\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport const unitReducer = (state = { unit: 'metric' }, action) => {\r\n  switch (action.type) {\r\n    case 'UNIT_TOGGLE':\r\n      const unit = state.unit === 'metric' ? 'imperial' : 'metric'\r\n      return { ...state, unit: unit }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport const menuReducer = (state = { show: false }, action) => {\r\n  switch (action.type) {\r\n    case 'MENU_TOGGLE':\r\n      const show = state.show === false ? true : false\r\n      return { ...state, show: show }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\n/* ------------ Actions ------------- */\r\n\r\nexport const initializeCountries = () => {\r\n  return async (dispatch) => {\r\n    const countries = await countryService.getAll()\r\n    dispatch({\r\n      type: 'INIT_COUNTRIES',\r\n      data: countries,\r\n    })\r\n  }\r\n}\r\n\r\nexport const toggleUnit = (unit) => {\r\n  return {\r\n    type: 'UNIT_TOGGLE',\r\n    unit: unit,\r\n  }\r\n}\r\n\r\nexport const toggleMenu = (show) => {\r\n  return {\r\n    type: 'MENU_TOGGLE',\r\n    show: show,\r\n  }\r\n}\r\n\r\nexport const resetFilter = (reset) => {\r\n  return {\r\n    type: 'RESET_FILTER',\r\n    reset: reset,\r\n  }\r\n}\r\n\r\nexport const searchCountries = (input) => {\r\n  return {\r\n    type: 'FILTER_COUNTRIES',\r\n    input,\r\n  }\r\n}\r\n\r\nexport const filterCountries = (country) => {\r\n  return {\r\n    type: 'FILTER_COUNTRIES',\r\n    country,\r\n  }\r\n}\r\n\r\nexport const filterCountriesByContinent = (continent) => {\r\n  return {\r\n    type: 'FILTER_COUNTRIES',\r\n    continent,\r\n  }\r\n}\r\n\r\nexport const filterCountriesByRegion = (region) => {\r\n  return {\r\n    type: 'FILTER_COUNTRIES',\r\n    region,\r\n  }\r\n}\r\n\r\nexport const filterCountriesBySubRegion = (subregion) => {\r\n  return {\r\n    type: 'FILTER_COUNTRIES',\r\n    subregion,\r\n  }\r\n}\r\n\r\nexport default countryReducer\r\n"],"sourceRoot":""}