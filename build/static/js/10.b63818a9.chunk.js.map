{"version":3,"sources":["components/Header.js","../node_modules/semantic-ui-react/dist/es/elements/Input/Input.js"],"names":["HeaderNav","console","log","isIE","useState","value","setValue","unit","useSelector","state","dispatch","useDispatch","handleInput","e","preventDefault","input","target","searchCountries","noMatch","countries","filtered","length","filter","clearInput","changeUnit","val","toggleUnit","id","attached","inverted","borderless","Item","header","className","name","color","size","icon","link","onClick","type","placeholder","onChange","position","Group","basic","compact","info","Header","Input","_Component","_this","_len","arguments","args","Array","_key","call","apply","this","concat","inputRef","createRef","computeIcon","_this$props","props","loading","_isNil","computeTabIndex","_this$props2","disabled","tabIndex","focus","current","select","handleChange","_get","_invoke","_extends","handleChildOverrides","child","defaultProps","ref","c","handleRef","partitionProps","_this$props3","unhandled","getUnhandledProps","_partitionHTMLProps","partitionHTMLProps","htmlInputProps","rest","_inheritsLoose","prototype","render","_this2","_this$props4","action","actionPosition","children","error","fluid","iconPosition","label","labelPosition","transparent","classes","cx","useKeyOnly","useValueAndKey","ElementType","getElementType","_this$partitionProps","childrenUtils","isNil","childElements","_map","Children","toArray","cloneElement","React","createElement","actionElement","Button","create","autoGenerateKey","labelElement","Label","_includes","createHTMLInput","Icon","Component","handledProps","propTypes","createShorthandFactory"],"mappings":"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","file":"static/js/10.b63818a9.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { isIE } from 'react-device-detect'\nimport {\n  Menu,\n  Icon,\n  Input,\n  Button,\n  Container,\n  Message,\n} from 'semantic-ui-react'\nimport { toggleUnit, searchCountries } from '../reducers/countryReducer'\nimport '../assets/css/App.css'\n\nconst HeaderNav = () => {\n  console.log('Desktop')\n  console.log('isIE?', isIE)\n  const [value, setValue] = useState('')\n  const unit = useSelector((state) => state.unit.unit)\n\n  const state = useSelector((state) => state)\n\n  const dispatch = useDispatch()\n\n  const handleInput = (e) => {\n    e.preventDefault()\n    const input = e.target.value\n    dispatch(searchCountries(input))\n    setValue(input)\n  }\n\n  const noMatch =\n    state.countries.filtered.length === 0 && state.countries.filter.input !== ''\n\n  const clearInput = () => {\n    dispatch(searchCountries(''))\n    setValue('')\n  }\n\n  const changeUnit = (val) => {\n    dispatch(toggleUnit(val))\n  }\n\n  return (\n    <>\n      <Menu id=\"nav menu\" attached=\"top\" inverted borderless>\n        <Menu.Item header>\n          <Icon className=\"App-logo\" name=\"globe\" color=\"teal\" size=\"big\" />\n          <p> World Countries </p>\n        </Menu.Item>\n        <Menu.Item>\n          <Input\n            icon={\n              <Icon\n                link\n                name={value.length > 0 ? 'close' : 'search'}\n                onClick={value.length > 0 ? clearInput : handleInput}\n              />\n            }\n            type=\"search\"\n            value={value}\n            placeholder=\"Search by name\"\n            onChange={handleInput}\n          />\n        </Menu.Item>\n        <Menu.Item position=\"right\">\n          <Button.Group>\n            <Button\n              size=\"medium\"\n              basic={unit === 'metric' ? false : true}\n              inverted\n              color=\"teal\"\n              onClick={() => changeUnit('metric')}\n            >\n              Metric\n            </Button>\n            <Button\n              size=\"medium\"\n              basic={unit === 'metric' ? true : false}\n              inverted\n              color=\"teal\"\n              onClick={() => changeUnit('imperial')}\n            >\n              Imperial\n            </Button>\n          </Button.Group>\n        </Menu.Item>\n      </Menu>\n      {noMatch ? (\n        <Container>\n          <Message compact info>\n            <Message.Header>No matches, please try again.</Message.Header>\n            <Button basic color=\"teal\" onClick={clearInput}>\n              OK\n            </Button>\n          </Message>\n        </Container>\n      ) : (\n        <></>\n      )}\n    </>\n  )\n}\n\nexport default HeaderNav\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport _includes from \"lodash-es/includes\";\nimport _map from \"lodash-es/map\";\nimport _invoke from \"lodash-es/invoke\";\nimport _get from \"lodash-es/get\";\nimport _isNil from \"lodash-es/isNil\";\nimport { handleRef } from '@fluentui/react-component-ref';\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React, { Children, cloneElement, Component, createRef } from 'react';\nimport { childrenUtils, createHTMLInput, createShorthandFactory, customPropTypes, getElementType, getUnhandledProps, partitionHTMLProps, useKeyOnly, useValueAndKey } from '../../lib';\nimport Button from '../Button';\nimport Icon from '../Icon';\nimport Label from '../Label';\n/**\n * An Input is a field used to elicit a response from a user.\n * @see Button\n * @see Form\n * @see Icon\n * @see Label\n */\n\nvar Input = /*#__PURE__*/function (_Component) {\n  _inheritsLoose(Input, _Component);\n\n  function Input() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _Component.call.apply(_Component, [this].concat(args)) || this;\n    _this.inputRef = /*#__PURE__*/createRef();\n\n    _this.computeIcon = function () {\n      var _this$props = _this.props,\n          loading = _this$props.loading,\n          icon = _this$props.icon;\n      if (!_isNil(icon)) return icon;\n      if (loading) return 'spinner';\n    };\n\n    _this.computeTabIndex = function () {\n      var _this$props2 = _this.props,\n          disabled = _this$props2.disabled,\n          tabIndex = _this$props2.tabIndex;\n      if (!_isNil(tabIndex)) return tabIndex;\n      if (disabled) return -1;\n    };\n\n    _this.focus = function () {\n      return _this.inputRef.current.focus();\n    };\n\n    _this.select = function () {\n      return _this.inputRef.current.select();\n    };\n\n    _this.handleChange = function (e) {\n      var value = _get(e, 'target.value');\n\n      _invoke(_this.props, 'onChange', e, _extends({}, _this.props, {\n        value: value\n      }));\n    };\n\n    _this.handleChildOverrides = function (child, defaultProps) {\n      return _extends({}, defaultProps, child.props, {\n        ref: function ref(c) {\n          handleRef(child.ref, c);\n          _this.inputRef.current = c;\n        }\n      });\n    };\n\n    _this.partitionProps = function () {\n      var _this$props3 = _this.props,\n          disabled = _this$props3.disabled,\n          type = _this$props3.type;\n\n      var tabIndex = _this.computeTabIndex();\n\n      var unhandled = getUnhandledProps(Input, _this.props);\n\n      var _partitionHTMLProps = partitionHTMLProps(unhandled),\n          htmlInputProps = _partitionHTMLProps[0],\n          rest = _partitionHTMLProps[1];\n\n      return [_extends({}, htmlInputProps, {\n        disabled: disabled,\n        type: type,\n        tabIndex: tabIndex,\n        onChange: _this.handleChange,\n        ref: _this.inputRef\n      }), rest];\n    };\n\n    return _this;\n  }\n\n  var _proto = Input.prototype;\n\n  _proto.render = function render() {\n    var _this2 = this;\n\n    var _this$props4 = this.props,\n        action = _this$props4.action,\n        actionPosition = _this$props4.actionPosition,\n        children = _this$props4.children,\n        className = _this$props4.className,\n        disabled = _this$props4.disabled,\n        error = _this$props4.error,\n        fluid = _this$props4.fluid,\n        focus = _this$props4.focus,\n        icon = _this$props4.icon,\n        iconPosition = _this$props4.iconPosition,\n        input = _this$props4.input,\n        inverted = _this$props4.inverted,\n        label = _this$props4.label,\n        labelPosition = _this$props4.labelPosition,\n        loading = _this$props4.loading,\n        size = _this$props4.size,\n        transparent = _this$props4.transparent,\n        type = _this$props4.type;\n    var classes = cx('ui', size, useKeyOnly(disabled, 'disabled'), useKeyOnly(error, 'error'), useKeyOnly(fluid, 'fluid'), useKeyOnly(focus, 'focus'), useKeyOnly(inverted, 'inverted'), useKeyOnly(loading, 'loading'), useKeyOnly(transparent, 'transparent'), useValueAndKey(actionPosition, 'action') || useKeyOnly(action, 'action'), useValueAndKey(iconPosition, 'icon') || useKeyOnly(icon || loading, 'icon'), useValueAndKey(labelPosition, 'labeled') || useKeyOnly(label, 'labeled'), 'input', className);\n    var ElementType = getElementType(Input, this.props);\n\n    var _this$partitionProps = this.partitionProps(),\n        htmlInputProps = _this$partitionProps[0],\n        rest = _this$partitionProps[1]; // Render with children\n    // ----------------------------------------\n\n\n    if (!childrenUtils.isNil(children)) {\n      // add htmlInputProps to the `<input />` child\n      var childElements = _map(Children.toArray(children), function (child) {\n        if (child.type !== 'input') return child;\n        return /*#__PURE__*/cloneElement(child, _this2.handleChildOverrides(child, htmlInputProps));\n      });\n\n      return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n        className: classes\n      }), childElements);\n    } // Render Shorthand\n    // ----------------------------------------\n\n\n    var actionElement = Button.create(action, {\n      autoGenerateKey: false\n    });\n    var labelElement = Label.create(label, {\n      defaultProps: {\n        className: cx('label', // add 'left|right corner'\n        _includes(labelPosition, 'corner') && labelPosition)\n      },\n      autoGenerateKey: false\n    });\n    return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n      className: classes\n    }), actionPosition === 'left' && actionElement, labelPosition !== 'right' && labelElement, createHTMLInput(input || type, {\n      defaultProps: htmlInputProps,\n      autoGenerateKey: false\n    }), Icon.create(this.computeIcon(), {\n      autoGenerateKey: false\n    }), actionPosition !== 'left' && actionElement, labelPosition === 'right' && labelElement);\n  };\n\n  return Input;\n}(Component);\n\nInput.handledProps = [\"action\", \"actionPosition\", \"as\", \"children\", \"className\", \"disabled\", \"error\", \"fluid\", \"focus\", \"icon\", \"iconPosition\", \"input\", \"inverted\", \"label\", \"labelPosition\", \"loading\", \"onChange\", \"size\", \"tabIndex\", \"transparent\", \"type\"];\nInput.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** An Input can be formatted to alert the user to an action they may perform. */\n  action: PropTypes.oneOfType([PropTypes.bool, customPropTypes.itemShorthand]),\n\n  /** An action can appear along side an Input on the left or right. */\n  actionPosition: PropTypes.oneOf(['left']),\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** An Input field can show that it is disabled. */\n  disabled: PropTypes.bool,\n\n  /** An Input field can show the data contains errors. */\n  error: PropTypes.bool,\n\n  /** Take on the size of its container. */\n  fluid: PropTypes.bool,\n\n  /** An Input field can show a user is currently interacting with it. */\n  focus: PropTypes.bool,\n\n  /** Optional Icon to display inside the Input. */\n  icon: PropTypes.oneOfType([PropTypes.bool, customPropTypes.itemShorthand]),\n\n  /** An Icon can appear inside an Input on the left or right. */\n  iconPosition: PropTypes.oneOf(['left']),\n\n  /** Shorthand for creating the HTML Input. */\n  input: customPropTypes.itemShorthand,\n\n  /** Format to appear on dark backgrounds. */\n  inverted: PropTypes.bool,\n\n  /** Optional Label to display along side the Input. */\n  label: customPropTypes.itemShorthand,\n\n  /** A Label can appear outside an Input on the left or right. */\n  labelPosition: PropTypes.oneOf(['left', 'right', 'left corner', 'right corner']),\n\n  /** An Icon Input field can show that it is currently loading data. */\n  loading: PropTypes.bool,\n\n  /**\n   * Called on change.\n   *\n   * @param {ChangeEvent} event - React's original SyntheticEvent.\n   * @param {object} data - All props and a proposed value.\n   */\n  onChange: PropTypes.func,\n\n  /** An Input can vary in size. */\n  size: PropTypes.oneOf(['mini', 'small', 'large', 'big', 'huge', 'massive']),\n\n  /** An Input can receive focus. */\n  tabIndex: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /** Transparent Input has no background. */\n  transparent: PropTypes.bool,\n\n  /** The HTML input type. */\n  type: PropTypes.string\n} : {};\nInput.defaultProps = {\n  type: 'text'\n};\nInput.create = createShorthandFactory(Input, function (type) {\n  return {\n    type: type\n  };\n});\nexport default Input;"],"sourceRoot":""}