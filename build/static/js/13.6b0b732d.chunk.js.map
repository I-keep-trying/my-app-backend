{"version":3,"sources":["assets/images/github.svg","components/HeaderMobile.js"],"names":["HeaderNav","useState","value","setValue","id","region","subregions","setRegion","state","useSelector","console","log","recordsFound","countries","filtered","isLandscape","useMobileOrientation","activeSubregion","filter","subregion","unit","dispatch","useDispatch","handleInput","e","preventDefault","input","target","searchCountriesByName","clearInput","handleSort","key","sortCountries","handleRegionClick","reg","filterCountriesByRegion","handleSubregionClick","sub","filterCountriesBySubRegion","attached","inverted","borderless","Item","header","compact","color","content","onClick","val","toggleUnit","as","href","alt","srcSet","github","size","src","vertical","fluid","icon","link","name","length","type","placeholder","onChange","textAlign","labelPosition","basic","common","item","inline","text","defaultValue","Menu","window","localStorage","getItem","position","tabular","widths","regions","map","r","active","toLowerCase","s"],"mappings":"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","file":"static/js/13.6b0b732d.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/github.e0fa2a0e.svg\";","import React, { useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Headroom from 'react-headroom'\r\nimport {\r\n  Menu,\r\n  Icon,\r\n  Input,\r\n  Label,\r\n  Dropdown,\r\n  Button,\r\n  Segment,\r\n  Image,\r\n  Header,\r\n} from 'semantic-ui-react'\r\nimport { useMobileOrientation } from 'react-device-detect'\r\nimport {\r\n  toggleUnit,\r\n  searchCountriesByName,\r\n  sortCountries,\r\n  filterCountriesBySubRegion,\r\n  filterCountriesByRegion,\r\n} from '../reducers/countriesReducer'\r\n\r\nimport regions from '../regions'\r\n\r\nimport '../assets/css/App.css'\r\nimport github from '../assets/images/github.svg'\r\n\r\nconst HeaderNav = () => {\r\n  const [value, setValue] = useState('')\r\n  const [region, setRegion] = useState({\r\n    id: 'FZUe47mEY9PCOzYmMxzYY',\r\n    region: 'All',\r\n    subregions: [],\r\n  })\r\n\r\n  const state = useSelector((state) => state)\r\n  console.log('state', state)\r\n  const recordsFound = useSelector((state) => state.countries.filtered)\r\n\r\n  const { isLandscape } = useMobileOrientation()\r\n\r\n  const activeSubregion = useSelector(\r\n    (state) => state.countries.filter.subregion\r\n  ) //subregion string\r\n\r\n  const unit = useSelector((state) => state.unit.unit)\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const handleInput = (e) => {\r\n    e.preventDefault()\r\n    const input = e.target.value\r\n    dispatch(searchCountriesByName(input))\r\n    setValue(input)\r\n  }\r\n\r\n  const clearInput = () => {\r\n    dispatch(searchCountriesByName(''))\r\n    setValue('')\r\n  }\r\n\r\n  const changeUnit = (val) => {\r\n    dispatch(toggleUnit(val))\r\n  }\r\n\r\n  const handleSort = (key) => {\r\n    dispatch(sortCountries(key))\r\n  }\r\n\r\n  const handleRegionClick = (reg) => {\r\n    dispatch(filterCountriesByRegion(reg))\r\n    setRegion(reg)\r\n    setValue('')\r\n  }\r\n\r\n  const handleSubregionClick = (sub) => {\r\n    dispatch(filterCountriesBySubRegion(sub))\r\n    setValue('')\r\n  }\r\n\r\n  const handleSubClose = () => {\r\n    dispatch(filterCountriesByRegion(region))\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Menu attached=\"top\" inverted borderless>\r\n        <Menu.Item id=\"app-title\" header>\r\n          <p> World Countries</p>\r\n        </Menu.Item>\r\n        <Menu.Item id=\"mobile-header-button\">\r\n          <Button\r\n            compact\r\n            color=\"yellow\"\r\n            inverted\r\n            content={unit === 'metric' ? 'imperial' : 'metric'}\r\n            onClick={() =>\r\n              changeUnit(unit === 'metric' ? 'imperial' : 'metric')\r\n            }\r\n          ></Button>\r\n        </Menu.Item>\r\n        <Menu.Item id=\"github\">\r\n          <Image\r\n            as=\"a\"\r\n            href=\"https://github.com/I-keep-trying/countries3.1\"\r\n            alt=\"github\"\r\n            srcSet={`${github} 100w`}\r\n            size=\"mini\"\r\n            src={github}\r\n          />\r\n        </Menu.Item>\r\n      </Menu>\r\n\r\n      {/* text input */}\r\n      <Headroom>\r\n        <Menu id=\"mobile-header\" inverted vertical fluid>\r\n          <Menu.Item id=\"mobile-header-item\">\r\n            <Input\r\n              inverted\r\n              size=\"mini\"\r\n              icon={\r\n                <Icon\r\n                  link\r\n                  name={value.length > 0 ? 'close' : 'search'}\r\n                  onClick={value.length > 0 ? clearInput : handleInput}\r\n                />\r\n              }\r\n              type=\"search\"\r\n              value={value}\r\n              placeholder=\"Search by name\"\r\n              onChange={handleInput}\r\n            />\r\n          </Menu.Item>\r\n        </Menu>\r\n        {recordsFound.length > 1 ? (\r\n          <Menu id=\"mobile-header2\" inverted vertical fluid>\r\n            <Menu.Item id=\"mobile-header2-item\">\r\n              {recordsFound.length}\r\n              {' records found'}\r\n            </Menu.Item>\r\n          </Menu>\r\n        ) : (\r\n          <></>\r\n        )}\r\n\r\n        {/* sort menu */}\r\n\r\n        {recordsFound.length === 1 ? (\r\n          <>\r\n            <Segment inverted textAlign=\"center\">\r\n              <Button\r\n                labelPosition=\"left\"\r\n                icon=\"left chevron\"\r\n                basic\r\n                color=\"yellow\"\r\n                content=\"All Countries\"\r\n                onClick={() => dispatch(searchCountriesByName(''))}\r\n              />\r\n              <Button\r\n                labelPosition=\"left\"\r\n                icon=\"left chevron\"\r\n                basic\r\n                color=\"yellow\"\r\n                content={recordsFound[0].region}\r\n                onClick={() =>\r\n                  dispatch(filterCountriesByRegion(recordsFound[0].region))\r\n                }\r\n              />\r\n              <Button\r\n                labelPosition=\"left\"\r\n                icon=\"left chevron\"\r\n                basic\r\n                color=\"yellow\"\r\n                content={activeSubregion}\r\n                onClick={() =>\r\n                  dispatch(filterCountriesBySubRegion(activeSubregion))\r\n                }\r\n              />\r\n            </Segment>{' '}\r\n            <Segment inverted>\r\n              <Header id=\"country-header\" textAlign=\"center\">\r\n                {recordsFound[0].name.common}\r\n              </Header>\r\n            </Segment>\r\n          </>\r\n        ) : (\r\n          <>\r\n            <Menu inverted borderless size=\"tiny\" id=\"mobile-filters\">\r\n              <Dropdown item inline text=\"Sort\" defaultValue=\"Name\">\r\n                <Dropdown.Menu id=\"dropdown menu\">\r\n                  <Dropdown.Item onClick={() => handleSort('name')}>\r\n                    {window.localStorage.getItem('sort key') === 'name' ? (\r\n                      <Icon\r\n                        name={\r\n                          window.localStorage.getItem('direction') ===\r\n                          'ascending'\r\n                            ? 'arrow up'\r\n                            : 'arrow down'\r\n                        }\r\n                      />\r\n                    ) : (\r\n                      <></>\r\n                    )}\r\n                    Name\r\n                  </Dropdown.Item>\r\n                  <Dropdown.Item onClick={() => handleSort('capital')}>\r\n                    {window.localStorage.getItem('sort key') === 'capital' ? (\r\n                      <Icon\r\n                        name={\r\n                          window.localStorage.getItem('direction') === 'ascending'\r\n                            ? 'arrow up'\r\n                            : 'arrow down'\r\n                        }\r\n                      />\r\n                    ) : (\r\n                      <></>\r\n                    )}\r\n                    Capital\r\n                  </Dropdown.Item>\r\n                  <Dropdown.Item onClick={() => handleSort('region')}>\r\n                    {window.localStorage.getItem('sort key') === 'region' ? (\r\n                      <Icon\r\n                        name={\r\n                          window.localStorage.getItem('direction') === 'ascending'\r\n                            ? 'arrow up'\r\n                            : 'arrow down'\r\n                        }\r\n                      />\r\n                    ) : (\r\n                      <></>\r\n                    )}\r\n                    Region\r\n                  </Dropdown.Item>\r\n                  <Dropdown.Item onClick={() => handleSort('subregion')}>\r\n                    {window.localStorage.getItem('sort key') === 'subregion' ? (\r\n                      <Icon\r\n                        name={\r\n                          window.localStorage.getItem('direction') === 'ascending'\r\n                            ? 'arrow up'\r\n                            : 'arrow down'\r\n                        }\r\n                      />\r\n                    ) : (\r\n                      <></>\r\n                    )}\r\n                    Subregion\r\n                  </Dropdown.Item>\r\n                  <Dropdown.Item onClick={() => handleSort('population')}>\r\n                    {window.localStorage.getItem('sort key') === 'population' ? (\r\n                      <Icon\r\n                        name={\r\n                          window.localStorage.getItem('direction') === 'ascending'\r\n                            ? 'arrow up'\r\n                            : 'arrow down'\r\n                        }\r\n                      />\r\n                    ) : (\r\n                      <></>\r\n                    )}\r\n                    Population\r\n                  </Dropdown.Item>\r\n                  <Dropdown.Item onClick={() => handleSort('area')}>\r\n                    {window.localStorage.getItem('sort key') === 'area' ? (\r\n                      <Icon\r\n                        name={\r\n                          window.localStorage.getItem('direction') === 'ascending'\r\n                            ? 'arrow up'\r\n                            : 'arrow down'\r\n                        }\r\n                      />\r\n                    ) : (\r\n                      <></>\r\n                    )}\r\n                    Area\r\n                  </Dropdown.Item>\r\n                </Dropdown.Menu>\r\n              </Dropdown>\r\n\r\n              <Menu.Item position=\"right\">\r\n                Sorted by: {window.localStorage.getItem('sort key')}\r\n                {', '}\r\n                {window.localStorage.getItem('direction')}\r\n              </Menu.Item>\r\n            </Menu>\r\n\r\n            {/* Filter By Region Dropdown */}\r\n            {isLandscape ? (\r\n              <Menu size=\"tiny\" tabular widths={7}>\r\n                {regions.map((r) => (\r\n                  <Menu.Item\r\n                    key={r.id}\r\n                    active={\r\n                      state.countries.filter.region.region.toLowerCase() ===\r\n                      r.region.toLowerCase()\r\n                    }\r\n                    onClick={() => handleRegionClick(r)}\r\n                  >\r\n                    {r.region === 'All' ? 'All Regions' : r.region}\r\n                  </Menu.Item>\r\n                ))}\r\n              </Menu>\r\n            ) : (\r\n              <Menu inverted borderless size=\"tiny\" id=\"mobile-filters\">\r\n                <Dropdown item inline text=\"Filter\">\r\n                  <Dropdown.Menu>\r\n                    {regions.map((r) => (\r\n                      <Dropdown.Item\r\n                        key={r.id}\r\n                        text={r.region}\r\n                        value={r.region}\r\n                        onClick={() => handleRegionClick(r)}\r\n                      />\r\n                    ))}\r\n                  </Dropdown.Menu>\r\n                </Dropdown>\r\n                <Menu.Item position=\"right\">\r\n                  {region.region !== 'All' ? (\r\n                    <Label>\r\n                      {region.region}\r\n                      <Icon onClick={() => clearInput()} name=\"delete\" />\r\n                    </Label>\r\n                  ) : (\r\n                    ''\r\n                  )}\r\n                </Menu.Item>\r\n              </Menu>\r\n            )}\r\n\r\n            {/* Filter By Subregion Dropdown */}\r\n\r\n            {isLandscape && region.region !== 'All' ? (\r\n              <Menu\r\n                widths={state.countries.filter.region.subregions.length}\r\n                tabular\r\n                size=\"tiny\"\r\n              >\r\n                {state.countries.filter.region.subregions.map((s) => (\r\n                  <Menu.Item\r\n                    key={s.id}\r\n                    active={\r\n                      state.countries.filter.subregion.toLowerCase() ===\r\n                      s.name.toLowerCase()\r\n                    }\r\n                    onClick={() => handleSubregionClick(s.name)}\r\n                  >\r\n                    {s.name}\r\n                  </Menu.Item>\r\n                ))}\r\n              </Menu>\r\n            ) : (\r\n              <></>\r\n            )}\r\n            {!isLandscape && region.region !== 'All' ? (\r\n              <Menu inverted borderless size=\"tiny\" id=\"mobile-filters\">\r\n                <Dropdown item inline text=\"Subregion\">\r\n                  <Dropdown.Menu>\r\n                    {region.subregions.map((s) => (\r\n                      <Dropdown.Item\r\n                        key={s.id}\r\n                        text={s.name}\r\n                        value={s.name}\r\n                        onClick={() => handleSubregionClick(s.name)}\r\n                      />\r\n                    ))}\r\n                  </Dropdown.Menu>\r\n                </Dropdown>\r\n                <Menu.Item position=\"right\">\r\n                  {activeSubregion !== '' ? (\r\n                    <Label>\r\n                      {activeSubregion}\r\n                      <Icon\r\n                        onClick={() => handleSubClose()}\r\n                        name=\"delete\"\r\n                      />{' '}\r\n                    </Label>\r\n                  ) : (\r\n                    ''\r\n                  )}\r\n                </Menu.Item>\r\n              </Menu>\r\n            ) : (\r\n              <></>\r\n            )}\r\n          </>\r\n        )}\r\n      </Headroom>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default HeaderNav\r\n"],"sourceRoot":""}