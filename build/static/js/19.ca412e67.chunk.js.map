{"version":3,"sources":["../node_modules/semantic-ui-react/dist/es/collections/Grid/GridColumn.js","../node_modules/semantic-ui-react/dist/es/collections/Grid/GridRow.js","../node_modules/semantic-ui-react/dist/es/collections/Grid/Grid.js","components/Weather.js"],"names":["GridColumn","props","children","className","computer","color","floated","largeScreen","mobile","only","stretched","tablet","textAlign","verticalAlign","widescreen","width","classes","cx","useKeyOnly","useMultipleProp","useTextAlignProp","useValueAndKey","useVerticalAlignProp","useWidthProp","rest","getUnhandledProps","ElementType","getElementType","React","createElement","_extends","handledProps","propTypes","create","createShorthandFactory","GridRow","centered","columns","divided","reversed","Grid","celled","container","doubling","inverted","padded","relaxed","stackable","useKeyOrValueAndKey","Column","Row","WeatherWidget1","country","useState","timeDate","setTimeDate","unit","useSelector","state","weather","temp","Math","round","current","wind","wind_speed","timeZone","time","useMemo","status","d","Date","options","weekday","year","month","day","hour","minute","zoneName","toLocaleString","window","navigator","language","code","icon","Images","path","capital","href","target","rel","src","alt","description","daily","map","moment","unix","dt","format","height","sunrise","id","viewBox","fill","x","y","textAnchor","max","min","WeatherWidget","memo"],"mappings":"8LASA,SAASA,EAAWC,GAClB,IAAIC,EAAWD,EAAMC,SACjBC,EAAYF,EAAME,UAClBC,EAAWH,EAAMG,SACjBC,EAAQJ,EAAMI,MACdC,EAAUL,EAAMK,QAChBC,EAAcN,EAAMM,YACpBC,EAASP,EAAMO,OACfC,EAAOR,EAAMQ,KACbC,EAAYT,EAAMS,UAClBC,EAASV,EAAMU,OACfC,EAAYX,EAAMW,UAClBC,EAAgBZ,EAAMY,cACtBC,EAAab,EAAMa,WACnBC,EAAQd,EAAMc,MACdC,EAAUC,YAAGZ,EAAOa,YAAWR,EAAW,aAAcS,YAAgBV,EAAM,QAASW,YAAiBR,GAAYS,YAAef,EAAS,WAAYgB,YAAqBT,GAAgBU,YAAanB,EAAU,iBAAkBmB,YAAahB,EAAa,qBAAsBgB,YAAaf,EAAQ,eAAgBe,YAAaZ,EAAQ,eAAgBY,YAAaT,EAAY,mBAAoBS,YAAaR,EAAO,QAAS,SAAUZ,GACpbqB,EAAOC,YAAkBzB,EAAYC,GACrCyB,EAAcC,YAAe3B,EAAYC,GAC7C,OAAoB2B,IAAMC,cAAcH,EAAaI,YAAS,GAAIN,EAAM,CACtErB,UAAWa,IACTd,GAGNF,EAAW+B,aAAe,CAAC,KAAM,WAAY,YAAa,QAAS,WAAY,UAAW,cAAe,SAAU,OAAQ,YAAa,SAAU,YAAa,gBAAiB,aAAc,SAC9L/B,EAAWgC,UA6CP,GACJhC,EAAWiC,OAASC,YAAuBlC,GAAY,SAAUE,GAC/D,MAAO,CACLA,SAAUA,MAGCF,QC3Ef,SAASmC,EAAQlC,GACf,IAAImC,EAAWnC,EAAMmC,SACjBlC,EAAWD,EAAMC,SACjBC,EAAYF,EAAME,UAClBE,EAAQJ,EAAMI,MACdgC,EAAUpC,EAAMoC,QAChBC,EAAUrC,EAAMqC,QAChB7B,EAAOR,EAAMQ,KACb8B,EAAWtC,EAAMsC,SACjB7B,EAAYT,EAAMS,UAClBE,EAAYX,EAAMW,UAClBC,EAAgBZ,EAAMY,cACtBG,EAAUC,YAAGZ,EAAOa,YAAWkB,EAAU,YAAalB,YAAWoB,EAAS,WAAYpB,YAAWR,EAAW,aAAcS,YAAgBV,EAAM,QAASU,YAAgBoB,EAAU,YAAanB,YAAiBR,GAAYU,YAAqBT,GAAgBU,YAAac,EAAS,UAAU,GAAO,MAAOlC,GAChTqB,EAAOC,YAAkBU,EAASlC,GAClCyB,EAAcC,YAAeQ,EAASlC,GAC1C,OAAoB2B,IAAMC,cAAcH,EAAaI,YAAS,GAAIN,EAAM,CACtErB,UAAWa,IACTd,GAGNiC,EAAQJ,aAAe,CAAC,KAAM,WAAY,WAAY,YAAa,QAAS,UAAW,UAAW,OAAQ,WAAY,YAAa,YAAa,iBAChJI,EAAQH,UAoCJ,GACWG,QCxDf,SAASK,EAAKvC,GACZ,IAAIwC,EAASxC,EAAMwC,OACfL,EAAWnC,EAAMmC,SACjBlC,EAAWD,EAAMC,SACjBC,EAAYF,EAAME,UAClBkC,EAAUpC,EAAMoC,QAChBK,EAAYzC,EAAMyC,UAClBJ,EAAUrC,EAAMqC,QAChBK,EAAW1C,EAAM0C,SACjBC,EAAW3C,EAAM2C,SACjBC,EAAS5C,EAAM4C,OACfC,EAAU7C,EAAM6C,QAChBP,EAAWtC,EAAMsC,SACjBQ,EAAY9C,EAAM8C,UAClBrC,EAAYT,EAAMS,UAClBE,EAAYX,EAAMW,UAClBC,EAAgBZ,EAAMY,cACtBG,EAAUC,YAAG,KAAMC,YAAWkB,EAAU,YAAalB,YAAWwB,EAAW,aAAcxB,YAAWyB,EAAU,YAAazB,YAAW0B,EAAU,YAAa1B,YAAW6B,EAAW,aAAc7B,YAAWR,EAAW,aAAcsC,YAAoBP,EAAQ,UAAWO,YAAoBV,EAAS,WAAYU,YAAoBH,EAAQ,UAAWG,YAAoBF,EAAS,WAAY3B,YAAgBoB,EAAU,YAAanB,YAAiBR,GAAYU,YAAqBT,GAAgBU,YAAac,EAAS,UAAU,GAAO,OAAQlC,GAC7hBqB,EAAOC,YAAkBe,EAAMvC,GAC/ByB,EAAcC,YAAea,EAAMvC,GACvC,OAAoB2B,IAAMC,cAAcH,EAAaI,YAAS,GAAIN,EAAM,CACtErB,UAAWa,IACTd,GAGNsC,EAAKT,aAAe,CAAC,KAAM,SAAU,WAAY,WAAY,YAAa,UAAW,YAAa,UAAW,WAAY,WAAY,SAAU,UAAW,WAAY,YAAa,YAAa,YAAa,iBAC7MS,EAAKS,OAASjD,EACdwC,EAAKU,IAAMf,EACXK,EAAKR,UAmDD,GACWQ,O,2ICpFf,SAASW,EAAT,GAAsC,IAAZC,EAAW,EAAXA,QACxB,EAAgCC,mBAAS,mBAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KAEMC,EAAOC,aAAY,SAACC,GAAD,OAAWA,EAAMF,KAAKA,QAEzCG,EAAUF,aAAY,SAACC,GAAD,OAAWA,EAAMC,WAEvCC,EAAOH,aAAY,SAACC,GAAD,OAAWG,KAAKC,MAAMJ,EAAMC,QAAQI,QAAQH,SAE/DI,EAAOP,aAAY,SAACC,GAAD,OACvBG,KAAKC,MAAMJ,EAAMC,QAAQI,QAAQE,eAG7BC,EAAWT,aAAY,SAACC,GAAD,OAAWA,EAAMS,QAE9CC,mBAAQ,WACN,GAAwB,OAApBF,EAASG,OAAiB,CAC5B,IAAMC,EAAI,IAAIC,KACRC,EAAU,CACdC,QAAS,OACTC,KAAM,UACNC,MAAO,OACPC,IAAK,UACLC,KAAM,UACNC,OAAQ,UACRZ,SAAUA,EAASa,UAErBxB,EAAYe,EAAEU,eAAeC,OAAOC,UAAUC,SAAUX,OAEzD,IAEH,IAAMY,EAAOzB,EAAQI,QAAQJ,QAAQ,GAAG0B,KAClCA,EAAOC,IAAOF,GAAMG,KAE1B,OACE,gCACuB,OAApBrB,EAASG,OACR,qCACG,IACD,qBAAKlE,UAAU,2CAAf,SACE,qBAAKA,UAAU,2BAAf,SACE,sBAAKA,UAAU,2BAAf,sCAC4BiD,EAAQoC,QAAQ,UAIhD,sBAAMrF,UAAU,6BAAhB,SAA8CmD,OAGhD,6BAEF,qBAAKnD,UAAU,2CAAf,SACE,sBAAKA,UAAU,2BAAf,UACE,sBAAKA,UAAU,2BAAf,yBACeiD,EAAQoC,QAAQ,MAG/B,mBACEC,KAAK,8BACLC,OAAO,SACPC,IAAI,aAHN,SAKE,qBAAKxF,UAAU,wCAIrB,cAAC,IAAD,UACE,cAAC,IAAD,CAAM4C,WAAS,EAAf,SACE,eAAC,IAAKG,IAAN,WACE,eAAC,IAAKD,OAAN,CAAalC,MAAO,EAAGF,cAAc,SAASD,UAAU,SAAxD,UACE,mBAAGT,UAAU,2BAAb,gCACA,cAAC,IAAD,CACEiC,UAAQ,EACRwD,IAAKP,EACLQ,IAAKlC,EAAQI,QAAQJ,QAAQ,GAAGmC,YAChC3F,UAAU,2BAEZ,oBAAGA,UAAU,4BAAb,UACGyD,EADH,OACmB,WAATJ,EAAoB,IAAM,OAEpC,sBAAKrD,UAAU,0BAAf,UACE,mBAAGA,UAAU,2BAAb,SACGwD,EAAQI,QAAQJ,QAAQ,GAAGmC,cAE9B,oBAAG3F,UAAU,0BAAb,mBACS6D,EACG,WAATR,EAAoB,OAAS,gBAIpC,eAAC,IAAKP,OAAN,CAAalC,MAAO,GAAIF,cAAc,SAAtC,UACE,qBAAKV,UAAU,2BAAf,sBACA,sBAAKA,UAAU,wBAAf,UACE,cAAC,IAAD,CAAMkC,QAAS,EAAGzB,UAAU,SAA5B,SACE,eAAC,IAAKsC,IAAN,CAAUrC,cAAc,SAAxB,UACG8C,EAAQoC,MAAMC,KAAI,SAAC1B,GAClB,OACE,mCAEI,eAAC,IAAKrB,OAAN,CAEE9C,UAAU,iBAFZ,UAIG8F,IACEC,KAAKvC,EAAQI,QAAQoC,IACrBC,OAAO,WACVH,IAAOC,KAAK5B,EAAE6B,IAAIC,OAAO,SACrB,QACAH,IAAOC,KAAK5B,EAAE6B,IAAIC,OAAO,OAC7B,uBACCH,IAAOC,KAAK5B,EAAE6B,IAAIC,OAAO,SAC1B,qBACER,IAAG,2CAAsCtB,EAAEX,QAAQ,GAAG0B,KAAnD,QACHtE,MAAM,KACNsF,OAAO,KACPR,IAAKI,IAAOC,KAAK5B,EAAE6B,IAAIC,OAAO,WAf3B9B,EAAEgC,cAqBb,SAGR,qBAAKC,GAAG,WAAR,SACE,sBACExF,MAAM,OACNsF,OAAO,OACPG,QAAQ,aACRC,KAAK,UAJP,UAME,4BACE,sBAAMnC,EAAE,giBAGV,uBAAMoC,EAAE,KAAKC,EAAE,qBAAqBC,WAAW,SAA/C,UACG/C,KAAKC,MAAMH,EAAQoC,MAAM,GAAGnC,KAAKiD,KADpC,UAGA,uBAAMH,EAAE,KAAKC,EAAE,oBAAoBC,WAAW,SAA9C,UACG/C,KAAKC,MAAMH,EAAQoC,MAAM,GAAGnC,KAAKkD,KADpC,UAIA,uBACEJ,EAAE,oBACFC,EAAE,oBACFC,WAAW,SAHb,UAKG/C,KAAKC,MAAMH,EAAQoC,MAAM,GAAGnC,KAAKiD,KALpC,UAOA,uBACEH,EAAE,oBACFC,EAAE,oBACFC,WAAW,SAHb,UAKG/C,KAAKC,MAAMH,EAAQoC,MAAM,GAAGnC,KAAKkD,KALpC,UAQA,uBACEJ,EAAE,qBACFC,EAAE,oBACFC,WAAW,SAHb,UAKG/C,KAAKC,MAAMH,EAAQoC,MAAM,GAAGnC,KAAKiD,KALpC,UAOA,uBACEH,EAAE,qBACFC,EAAE,oBACFC,WAAW,SAHb,UAKG/C,KAAKC,MAAMH,EAAQoC,MAAM,GAAGnC,KAAKkD,KALpC,UAQA,uBACEJ,EAAE,qBACFC,EAAE,qBACFC,WAAW,SAHb,UAKG/C,KAAKC,MAAMH,EAAQoC,MAAM,GAAGnC,KAAKiD,KALpC,UAOA,uBACEH,EAAE,qBACFC,EAAE,oBACFC,WAAW,SAHb,UAKG/C,KAAKC,MAAMH,EAAQoC,MAAM,GAAGnC,KAAKkD,KALpC,UAQA,uBACEJ,EAAE,qBACFC,EAAE,oBACFC,WAAW,SAHb,UAKG/C,KAAKC,MAAMH,EAAQoC,MAAM,GAAGnC,KAAKiD,KALpC,UAOA,uBACEH,EAAE,qBACFC,EAAE,oBACFC,WAAW,SAHb,UAKG/C,KAAKC,MAAMH,EAAQoC,MAAM,GAAGnC,KAAKkD,KALpC,UAQA,uBACEJ,EAAE,oBACFC,EAAE,oBACFC,WAAW,SAHb,UAKG/C,KAAKC,MAAMH,EAAQoC,MAAM,GAAGnC,KAAKiD,KALpC,UAOA,uBACEH,EAAE,oBACFC,EAAE,oBACFC,WAAW,SAHb,UAKG/C,KAAKC,MAAMH,EAAQoC,MAAM,GAAGnC,KAAKkD,KALpC,UAQA,uBAAMJ,EAAE,qBAAqBC,EAAE,KAAKC,WAAW,SAA/C,UACG/C,KAAKC,MAAMH,EAAQoC,MAAM,GAAGnC,KAAKiD,KADpC,UAGA,uBACEH,EAAE,qBACFC,EAAE,oBACFC,WAAW,SAHb,UAKG/C,KAAKC,MAAMH,EAAQoC,MAAM,GAAGnC,KAAKkD,KALpC,UAQA,uBAAMJ,EAAE,MAAMC,EAAE,qBAAqBC,WAAW,SAAhD,UACG/C,KAAKC,MAAMH,EAAQoC,MAAM,GAAGnC,KAAKiD,KADpC,UAGA,uBAAMH,EAAE,MAAMC,EAAE,oBAAoBC,WAAW,SAA/C,UACG/C,KAAKC,MAAMH,EAAQoC,MAAM,GAAGnC,KAAKkD,KADpC,+BAcpB,IAAMC,EAAgBnF,IAAMoF,KAAK7D,GAElB4D","file":"static/js/19.ca412e67.chunk.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { customPropTypes, createShorthandFactory, getElementType, getUnhandledProps, SUI, useKeyOnly, useMultipleProp, useTextAlignProp, useValueAndKey, useVerticalAlignProp, useWidthProp } from '../../lib';\n/**\n * A column sub-component for Grid.\n */\n\nfunction GridColumn(props) {\n  var children = props.children,\n      className = props.className,\n      computer = props.computer,\n      color = props.color,\n      floated = props.floated,\n      largeScreen = props.largeScreen,\n      mobile = props.mobile,\n      only = props.only,\n      stretched = props.stretched,\n      tablet = props.tablet,\n      textAlign = props.textAlign,\n      verticalAlign = props.verticalAlign,\n      widescreen = props.widescreen,\n      width = props.width;\n  var classes = cx(color, useKeyOnly(stretched, 'stretched'), useMultipleProp(only, 'only'), useTextAlignProp(textAlign), useValueAndKey(floated, 'floated'), useVerticalAlignProp(verticalAlign), useWidthProp(computer, 'wide computer'), useWidthProp(largeScreen, 'wide large screen'), useWidthProp(mobile, 'wide mobile'), useWidthProp(tablet, 'wide tablet'), useWidthProp(widescreen, 'wide widescreen'), useWidthProp(width, 'wide'), 'column', className);\n  var rest = getUnhandledProps(GridColumn, props);\n  var ElementType = getElementType(GridColumn, props);\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), children);\n}\n\nGridColumn.handledProps = [\"as\", \"children\", \"className\", \"color\", \"computer\", \"floated\", \"largeScreen\", \"mobile\", \"only\", \"stretched\", \"tablet\", \"textAlign\", \"verticalAlign\", \"widescreen\", \"width\"];\nGridColumn.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** A grid column can be colored. */\n  color: PropTypes.oneOf(SUI.COLORS),\n\n  /** A column can specify a width for a computer. */\n  computer: customPropTypes.every([customPropTypes.disallow(['width']), PropTypes.oneOf(SUI.WIDTHS)]),\n\n  /** A column can sit flush against the left or right edge of a row. */\n  floated: PropTypes.oneOf(SUI.FLOATS),\n\n  /** A column can specify a width for a large screen device. */\n  largeScreen: customPropTypes.every([customPropTypes.disallow(['width']), PropTypes.oneOf(SUI.WIDTHS)]),\n\n  /** A column can specify a width for a mobile device. */\n  mobile: customPropTypes.every([customPropTypes.disallow(['width']), PropTypes.oneOf(SUI.WIDTHS)]),\n\n  /** A column can appear only for a specific device, or screen sizes. */\n  only: customPropTypes.multipleProp(SUI.VISIBILITY),\n\n  /** A column can stretch its contents to take up the entire grid or row height. */\n  stretched: PropTypes.bool,\n\n  /** A column can specify a width for a tablet device. */\n  tablet: customPropTypes.every([customPropTypes.disallow(['width']), PropTypes.oneOf(SUI.WIDTHS)]),\n\n  /** A column can specify its text alignment. */\n  textAlign: PropTypes.oneOf(SUI.TEXT_ALIGNMENTS),\n\n  /** A column can specify its vertical alignment to have all its columns vertically centered. */\n  verticalAlign: PropTypes.oneOf(SUI.VERTICAL_ALIGNMENTS),\n\n  /** A column can specify a width for a wide screen device. */\n  widescreen: customPropTypes.every([customPropTypes.disallow(['width']), PropTypes.oneOf(SUI.WIDTHS)]),\n\n  /** Represents width of column. */\n  width: customPropTypes.every([customPropTypes.disallow(['computer', 'largeScreen', 'mobile', 'tablet', 'widescreen']), PropTypes.oneOf(SUI.WIDTHS)])\n} : {};\nGridColumn.create = createShorthandFactory(GridColumn, function (children) {\n  return {\n    children: children\n  };\n});\nexport default GridColumn;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useMultipleProp, useTextAlignProp, useVerticalAlignProp, useWidthProp } from '../../lib';\n/**\n * A row sub-component for Grid.\n */\n\nfunction GridRow(props) {\n  var centered = props.centered,\n      children = props.children,\n      className = props.className,\n      color = props.color,\n      columns = props.columns,\n      divided = props.divided,\n      only = props.only,\n      reversed = props.reversed,\n      stretched = props.stretched,\n      textAlign = props.textAlign,\n      verticalAlign = props.verticalAlign;\n  var classes = cx(color, useKeyOnly(centered, 'centered'), useKeyOnly(divided, 'divided'), useKeyOnly(stretched, 'stretched'), useMultipleProp(only, 'only'), useMultipleProp(reversed, 'reversed'), useTextAlignProp(textAlign), useVerticalAlignProp(verticalAlign), useWidthProp(columns, 'column', true), 'row', className);\n  var rest = getUnhandledProps(GridRow, props);\n  var ElementType = getElementType(GridRow, props);\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), children);\n}\n\nGridRow.handledProps = [\"as\", \"centered\", \"children\", \"className\", \"color\", \"columns\", \"divided\", \"only\", \"reversed\", \"stretched\", \"textAlign\", \"verticalAlign\"];\nGridRow.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** A row can have its columns centered. */\n  centered: PropTypes.bool,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** A grid row can be colored. */\n  color: PropTypes.oneOf(SUI.COLORS),\n\n  /** Represents column count per line in Row. */\n  columns: PropTypes.oneOf([].concat(SUI.WIDTHS, ['equal'])),\n\n  /** A row can have dividers between its columns. */\n  divided: PropTypes.bool,\n\n  /** A row can appear only for a specific device, or screen sizes. */\n  only: customPropTypes.multipleProp(SUI.VISIBILITY),\n\n  /** A row can specify that its columns should reverse order at different device sizes. */\n  reversed: customPropTypes.multipleProp(['computer', 'computer vertically', 'mobile', 'mobile vertically', 'tablet', 'tablet vertically']),\n\n  /** A row can stretch its contents to take up the entire column height. */\n  stretched: PropTypes.bool,\n\n  /** A row can specify its text alignment. */\n  textAlign: PropTypes.oneOf(SUI.TEXT_ALIGNMENTS),\n\n  /** A row can specify its vertical alignment to have all its columns vertically centered. */\n  verticalAlign: PropTypes.oneOf(SUI.VERTICAL_ALIGNMENTS)\n} : {};\nexport default GridRow;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useKeyOrValueAndKey, useMultipleProp, useTextAlignProp, useVerticalAlignProp, useWidthProp } from '../../lib';\nimport GridColumn from './GridColumn';\nimport GridRow from './GridRow';\n/**\n * A grid is used to harmonize negative space in a layout.\n */\n\nfunction Grid(props) {\n  var celled = props.celled,\n      centered = props.centered,\n      children = props.children,\n      className = props.className,\n      columns = props.columns,\n      container = props.container,\n      divided = props.divided,\n      doubling = props.doubling,\n      inverted = props.inverted,\n      padded = props.padded,\n      relaxed = props.relaxed,\n      reversed = props.reversed,\n      stackable = props.stackable,\n      stretched = props.stretched,\n      textAlign = props.textAlign,\n      verticalAlign = props.verticalAlign;\n  var classes = cx('ui', useKeyOnly(centered, 'centered'), useKeyOnly(container, 'container'), useKeyOnly(doubling, 'doubling'), useKeyOnly(inverted, 'inverted'), useKeyOnly(stackable, 'stackable'), useKeyOnly(stretched, 'stretched'), useKeyOrValueAndKey(celled, 'celled'), useKeyOrValueAndKey(divided, 'divided'), useKeyOrValueAndKey(padded, 'padded'), useKeyOrValueAndKey(relaxed, 'relaxed'), useMultipleProp(reversed, 'reversed'), useTextAlignProp(textAlign), useVerticalAlignProp(verticalAlign), useWidthProp(columns, 'column', true), 'grid', className);\n  var rest = getUnhandledProps(Grid, props);\n  var ElementType = getElementType(Grid, props);\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), children);\n}\n\nGrid.handledProps = [\"as\", \"celled\", \"centered\", \"children\", \"className\", \"columns\", \"container\", \"divided\", \"doubling\", \"inverted\", \"padded\", \"relaxed\", \"reversed\", \"stackable\", \"stretched\", \"textAlign\", \"verticalAlign\"];\nGrid.Column = GridColumn;\nGrid.Row = GridRow;\nGrid.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** A grid can have rows divided into cells. */\n  celled: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['internally'])]),\n\n  /** A grid can have its columns centered. */\n  centered: PropTypes.bool,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Represents column count per row in Grid. */\n  columns: PropTypes.oneOf([].concat(SUI.WIDTHS, ['equal'])),\n\n  /** A grid can be combined with a container to use the available layout and alignment. */\n  container: PropTypes.bool,\n\n  /** A grid can have dividers between its columns. */\n  divided: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['vertically'])]),\n\n  /** A grid can double its column width on tablet and mobile sizes. */\n  doubling: PropTypes.bool,\n\n  /** A grid's colors can be inverted. */\n  inverted: PropTypes.bool,\n\n  /** A grid can preserve its vertical and horizontal gutters on first and last columns. */\n  padded: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['horizontally', 'vertically'])]),\n\n  /** A grid can increase its gutters to allow for more negative space. */\n  relaxed: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['very'])]),\n\n  /** A grid can specify that its columns should reverse order at different device sizes. */\n  reversed: customPropTypes.multipleProp(['computer', 'computer vertically', 'mobile', 'mobile vertically', 'tablet', 'tablet vertically']),\n\n  /** A grid can have its columns stack on-top of each other after reaching mobile breakpoints. */\n  stackable: PropTypes.bool,\n\n  /** A grid can stretch its contents to take up the entire grid height. */\n  stretched: PropTypes.bool,\n\n  /** A grid can specify its text alignment. */\n  textAlign: PropTypes.oneOf(SUI.TEXT_ALIGNMENTS),\n\n  /** A grid can specify its vertical alignment to have all its columns vertically centered. */\n  verticalAlign: PropTypes.oneOf(SUI.VERTICAL_ALIGNMENTS)\n} : {};\nexport default Grid;","import React, { useState, useMemo } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { Segment, Grid, Image } from 'semantic-ui-react'\r\nimport moment from 'moment'\r\nimport Images from '../assets/images/weather-animated/index'\r\n//import '../assets/css/owm-left.css'\r\n\r\nfunction WeatherWidget1({ country }) {\r\n  const [timeDate, setTimeDate] = useState('time zone error')\r\n\r\n  const unit = useSelector((state) => state.unit.unit)\r\n\r\n  const weather = useSelector((state) => state.weather)\r\n\r\n  const temp = useSelector((state) => Math.round(state.weather.current.temp))\r\n\r\n  const wind = useSelector((state) =>\r\n    Math.round(state.weather.current.wind_speed)\r\n  )\r\n\r\n  const timeZone = useSelector((state) => state.time)\r\n\r\n  useMemo(() => {\r\n    if (timeZone.status === 'OK') {\r\n      const d = new Date()\r\n      const options = {\r\n        weekday: 'long',\r\n        year: 'numeric',\r\n        month: 'long',\r\n        day: 'numeric',\r\n        hour: '2-digit',\r\n        minute: '2-digit',\r\n        timeZone: timeZone.zoneName,\r\n      }\r\n      setTimeDate(d.toLocaleString(window.navigator.language, options))\r\n    }\r\n  }, [])\r\n\r\n  const code = weather.current.weather[0].icon\r\n  const icon = Images[code].path\r\n\r\n  return (\r\n    <div>\r\n      {timeZone.status === 'OK' ? (\r\n        <>\r\n          {' '}\r\n          <div className=\"widget-left-menu widget-left-menu--brown\">\r\n            <div className=\"widget-left-menu__layout\">\r\n              <div className=\"widget-left-menu__header\">\r\n                Current Date and Time in {country.capital[0]}\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <span className=\"weather-left-card__means2 \">{timeDate}</span>\r\n        </>\r\n      ) : (\r\n        <></>\r\n      )}\r\n      <div className=\"widget-left-menu widget-left-menu--brown\">\r\n        <div className=\"widget-left-menu__layout\">\r\n          <div className=\"widget-left-menu__header\">\r\n            Weather for {country.capital[0]}\r\n          </div>\r\n\r\n          <a\r\n            href=\"https://openweathermap.org/\"\r\n            target=\"_blank\"\r\n            rel=\"noreferrer\"\r\n          >\r\n            <div className=\"widget-left-menu__logo_black\"></div>\r\n          </a>\r\n        </div>\r\n      </div>\r\n      <Segment>\r\n        <Grid stackable>\r\n          <Grid.Row>\r\n            <Grid.Column width={5} verticalAlign=\"middle\" textAlign=\"center\">\r\n              <p className=\"weather-left-card__means\">Current Conditions</p>\r\n              <Image\r\n                centered\r\n                src={icon}\r\n                alt={weather.current.weather[0].description}\r\n                className=\"weather-left-card__img\"\r\n              />\r\n              <p className=\"weather-left-card__number\">\r\n                {temp}°{unit === 'metric' ? 'C' : 'F'}\r\n              </p>\r\n              <div className=\"weather-left-card__row2\">\r\n                <p className=\"weather-left-card__means\">\r\n                  {weather.current.weather[0].description}\r\n                </p>\r\n                <p className=\"weather-left-card__wind\">\r\n                  Wind: {wind}\r\n                  {unit === 'metric' ? ' m/s' : ' mph'}\r\n                </p>\r\n              </div>\r\n            </Grid.Column>\r\n            <Grid.Column width={11} verticalAlign=\"middle\">\r\n              <div className=\"weather-left-card__means\">Forecast</div>\r\n              <div className=\"widget-left__calendar\">\r\n                <Grid columns={8} textAlign=\"center\">\r\n                  <Grid.Row verticalAlign=\"middle\">\r\n                    {weather.daily.map((d) => {\r\n                      return (\r\n                        <>\r\n                          {\r\n                            <Grid.Column\r\n                              key={d.sunrise}\r\n                              className=\"calendar__item\"\r\n                            >\r\n                              {moment\r\n                                .unix(weather.current.dt)\r\n                                .format('MMM D') ===\r\n                              moment.unix(d.dt).format('MMM D')\r\n                                ? 'Today'\r\n                                : moment.unix(d.dt).format('ddd')}\r\n                              <br />\r\n                              {moment.unix(d.dt).format('MMM D')}\r\n                              <img\r\n                                src={`https://openweathermap.org/img/w/${d.weather[0].icon}.png`}\r\n                                width=\"32\"\r\n                                height=\"32\"\r\n                                alt={moment.unix(d.dt).format('ddd')}\r\n                              />\r\n                            </Grid.Column>\r\n                          }\r\n                        </>\r\n                      )\r\n                    })}{' '}\r\n                  </Grid.Row>\r\n                </Grid>\r\n                <div id=\"graphic2\">\r\n                  <svg\r\n                    width=\"100%\"\r\n                    height=\"auto\"\r\n                    viewBox=\"0 0 430 90\"\r\n                    fill=\"#FEB020\"\r\n                  >\r\n                    <g>\r\n                      <path d=\"M15,23.615384615384613L72.14285714285714,30.42307692307692L129.28571428571428,30.42307692307692L186.42857142857142,21.346153846153847L243.57142857142856,41.76923076923077L300.7142857142857,44.03846153846154L357.85714285714283,39.5L415,34.96153846153847L415,53.11538461538461L357.85714285714283,53.11538461538461L300.7142857142857,57.65384615384615L243.57142857142856,53.11538461538461L186.42857142857142,48.57692307692308L129.28571428571428,50.84615384615385L72.14285714285714,50.84615384615385L15,44.03846153846154L15,23.615384615384613\"></path>\r\n                    </g>\r\n\r\n                    <text x=\"15\" y=\"19.115384615384613\" textAnchor=\"middle\">\r\n                      {Math.round(weather.daily[0].temp.max)}°\r\n                    </text>\r\n                    <text x=\"15\" y=\"61.03846153846154\" textAnchor=\"middle\">\r\n                      {Math.round(weather.daily[0].temp.min)}°\r\n                    </text>\r\n\r\n                    <text\r\n                      x=\"72.14285714285714\"\r\n                      y=\"25.92307692307692\"\r\n                      textAnchor=\"middle\"\r\n                    >\r\n                      {Math.round(weather.daily[1].temp.max)}°\r\n                    </text>\r\n                    <text\r\n                      x=\"72.14285714285714\"\r\n                      y=\"67.84615384615384\"\r\n                      textAnchor=\"middle\"\r\n                    >\r\n                      {Math.round(weather.daily[1].temp.min)}°\r\n                    </text>\r\n\r\n                    <text\r\n                      x=\"129.28571428571428\"\r\n                      y=\"25.92307692307692\"\r\n                      textAnchor=\"middle\"\r\n                    >\r\n                      {Math.round(weather.daily[2].temp.max)}°\r\n                    </text>\r\n                    <text\r\n                      x=\"129.28571428571428\"\r\n                      y=\"67.84615384615384\"\r\n                      textAnchor=\"middle\"\r\n                    >\r\n                      {Math.round(weather.daily[2].temp.min)}°\r\n                    </text>\r\n\r\n                    <text\r\n                      x=\"186.42857142857142\"\r\n                      y=\"16.846153846153847\"\r\n                      textAnchor=\"middle\"\r\n                    >\r\n                      {Math.round(weather.daily[3].temp.max)}°\r\n                    </text>\r\n                    <text\r\n                      x=\"186.42857142857142\"\r\n                      y=\"65.57692307692308\"\r\n                      textAnchor=\"middle\"\r\n                    >\r\n                      {Math.round(weather.daily[3].temp.min)}°\r\n                    </text>\r\n\r\n                    <text\r\n                      x=\"243.57142857142856\"\r\n                      y=\"37.26923076923077\"\r\n                      textAnchor=\"middle\"\r\n                    >\r\n                      {Math.round(weather.daily[4].temp.max)}°\r\n                    </text>\r\n                    <text\r\n                      x=\"243.57142857142856\"\r\n                      y=\"70.11538461538461\"\r\n                      textAnchor=\"middle\"\r\n                    >\r\n                      {Math.round(weather.daily[4].temp.min)}°\r\n                    </text>\r\n\r\n                    <text\r\n                      x=\"300.7142857142857\"\r\n                      y=\"39.53846153846154\"\r\n                      textAnchor=\"middle\"\r\n                    >\r\n                      {Math.round(weather.daily[5].temp.max)}°\r\n                    </text>\r\n                    <text\r\n                      x=\"300.7142857142857\"\r\n                      y=\"74.65384615384616\"\r\n                      textAnchor=\"middle\"\r\n                    >\r\n                      {Math.round(weather.daily[5].temp.min)}°\r\n                    </text>\r\n\r\n                    <text x=\"357.85714285714283\" y=\"35\" textAnchor=\"middle\">\r\n                      {Math.round(weather.daily[6].temp.max)}°\r\n                    </text>\r\n                    <text\r\n                      x=\"357.85714285714283\"\r\n                      y=\"70.11538461538461\"\r\n                      textAnchor=\"middle\"\r\n                    >\r\n                      {Math.round(weather.daily[6].temp.min)}°\r\n                    </text>\r\n\r\n                    <text x=\"415\" y=\"30.461538461538467\" textAnchor=\"middle\">\r\n                      {Math.round(weather.daily[7].temp.max)}°\r\n                    </text>\r\n                    <text x=\"415\" y=\"70.11538461538461\" textAnchor=\"middle\">\r\n                      {Math.round(weather.daily[7].temp.min)}°\r\n                    </text>\r\n                  </svg>\r\n                </div>\r\n              </div>\r\n            </Grid.Column>\r\n          </Grid.Row>\r\n        </Grid>\r\n      </Segment>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst WeatherWidget = React.memo(WeatherWidget1)\r\n\r\nexport default WeatherWidget\r\n"],"sourceRoot":""}