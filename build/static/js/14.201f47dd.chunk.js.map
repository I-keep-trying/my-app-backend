{"version":3,"sources":["services/sortableTable.js","components/TableMobile.js"],"names":["useSortableData1","items","useState","key","direction","sortConfig","setSortConfig","window","localStorage","setItem","now","Date","getTime","setupTime","getItem","clear","useMemo","sortableItems","sort","a","b","common","localeCompare","requestSort","useSortableData","React","memo","CountriesTableMobile","id","region","subregions","setRegion","dispatch","useDispatch","state","useSelector","unit","countriesFiltered","countries","filtered","length","initialCountries","countriesFilteredByRegion","countriesFilteredBySubRegion","countriesToRender","attached","sortable","compact","selectable","unstackable","Header","style","top","filter","toLowerCase","celled","marginTop","map","item","areaConvert","Math","round","area","Fragment","Row","textAlign","color","Column","width","labelPosition","icon","basic","fluid","content","name","onClick","country","filterCountries","reg","regions","r","handleClick","cca3","size","src","isIE","flags","png","svg","capital","subregion","population","toLocaleString","nanoid"],"mappings":"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","file":"static/js/14.201f47dd.chunk.js","sourcesContent":["import React, { useState, useMemo } from 'react'\n\nconst useSortableData1 = (items) => {\n  const [sortConfig, setSortConfig] = useState({\n    key: 'name',\n    direction: 'ascending',\n  })\n\n  // set initial sort\n  window.localStorage.setItem('sort key', sortConfig.key)\n  window.localStorage.setItem('direction', sortConfig.direction)\n\n  // set expiration for local storage to clear\n  const now = new Date().getTime()\n  const setupTime = localStorage.getItem('setupTime')\n  if (setupTime == null) {\n    localStorage.setItem('setupTime', now)\n  } else {\n    if (now - setupTime > 1 * 60 * 60 * 1000) {\n      localStorage.clear()\n      localStorage.setItem('setupTime', now)\n    }\n  }\n\n  const sortedItems = useMemo(() => {\n    let sortableItems = [...items]\n    if (sortConfig.key === 'area' || sortConfig.key === 'population') {\n      sortableItems.sort((a, b) => {\n        if (a[sortConfig.key] < b[sortConfig.key]) {\n          return sortConfig.direction === 'ascending' ? -1 : 1\n        }\n        if (a[sortConfig.key] > b[sortConfig.key]) {\n          return sortConfig.direction === 'ascending' ? 1 : -1\n        }\n        return 0\n      })\n    } else if (sortConfig.key === 'name') {\n      sortableItems.sort((a, b) => {\n        return sortConfig.direction === 'ascending'\n          ? a[sortConfig.key].common.localeCompare(b[sortConfig.key].common)\n          : b[sortConfig.key].common.localeCompare(a[sortConfig.key].common)\n      })\n    } else if (sortConfig.key === 'capital') {\n      sortableItems.sort((a, b) => {\n        return sortConfig.direction === 'ascending'\n          ? a[sortConfig.key][0].localeCompare(b[sortConfig.key][0])\n          : b[sortConfig.key][0].localeCompare(a[sortConfig.key][0])\n      })\n    } else {\n      sortableItems.sort((a, b) => {\n        return a[sortConfig.key] && sortConfig.direction === 'ascending'\n          ? a[sortConfig.key].localeCompare(b[sortConfig.key])\n          : b[sortConfig.key].localeCompare(a[sortConfig.key])\n      })\n    }\n\n    return sortableItems\n  }, [items, sortConfig])\n\n  const requestSort = (key) => {\n    let direction =\n      sortConfig.direction === 'ascending' ? 'descending' : 'ascending'\n    setSortConfig({ key, direction })\n    window.localStorage.setItem('sort key', key)\n    window.localStorage.setItem('direction', direction)\n  }\n\n  return { items: sortedItems, requestSort }\n}\n\nconst useSortableData = React.memo(useSortableData1)\n\nexport default useSortableData\n\n// original table sort code: https://codesandbox.io/s/table-sorting-gxt7g?file=/src/App.js:161-2693\n","import React, { useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Segment, Table, Icon, Image, Grid, Button } from 'semantic-ui-react'\nimport { isIE } from 'react-device-detect'\nimport { nanoid } from 'nanoid'\nimport { filterCountries } from '../reducers/countryReducer'\nimport useSortableData from '../services/sortableTable'\nimport regions from '../regions'\nimport '../App1.css'\n\nconst CountriesTableMobile = () => {\n  const [, setRegion] = useState({\n    id: 'FZUe47mEY9PCOzYmMxzYY',\n    region: 'All',\n    subregions: [],\n  })\n\n  const dispatch = useDispatch()\n  const state = useSelector((state) => state)\n\n  const unit = useSelector((state) => state.unit.unit)\n\n  const countriesFiltered = useSelector((state) => {\n    return state.countries.filtered.length > 0\n      ? state.countries.filtered\n      : state.countries.initialCountries\n  })\n\n  const countriesFilteredByRegion = useSelector(\n    (state) => state.countries.filtered\n  )\n\n  const countriesFilteredBySubRegion = useSelector(\n    (state) => state.countries.filtered\n  )\n\n  const countriesToRender =\n    countriesFilteredBySubRegion.length > 0\n      ? countriesFilteredBySubRegion\n      : countriesFilteredByRegion.length > 0\n      ? countriesFilteredByRegion\n      : countriesFiltered\n\n  const handleClick = (country) => {\n    dispatch(filterCountries(country))\n    const reg = regions.filter((r) => r.region === country.region)\n    setRegion(reg[0])\n  }\n\n  const tableHeaders = [\n    { fieldName: 'CCA3', id: 'cca3' },\n    { fieldName: 'Flag', id: 'flag' },\n    { fieldName: 'Name', id: 'name' },\n    { fieldName: 'Capital', id: 'capital' },\n    { fieldName: 'Region', id: 'region' },\n    { fieldName: 'Subregion', id: 'subregion' },\n    { fieldName: 'Population', id: 'population' },\n    { fieldName: 'Area kmÂ²', id: 'area' },\n  ]\n\n  const { items, requestSort } = useSortableData(countriesToRender)\n\n  const sortIcons = (id) => {\n    if (\n      window.localStorage.getItem('direction') === 'ascending' &&\n      window.localStorage.getItem('sort key') === id\n    ) {\n      return <Icon name=\"caret up\" />\n    } else if (\n      window.localStorage.getItem('direction') === 'descending' &&\n      window.localStorage.getItem('sort key') === id\n    ) {\n      return <Icon name=\"caret down\" />\n    }\n  }\n\n  return (\n    <Segment attached=\"bottom\">\n      {countriesToRender.length > 1 ? (\n        <>\n          <Table sortable compact selectable unstackable>\n            <Table.Header\n              style={{\n                top:\n                  state.countries.filter.region.toLowerCase() === 'all'\n                    ? 53\n                    : 146,\n              }}\n            ></Table.Header>\n          </Table>\n          <Grid celled style={{ marginTop: -20 }}>\n            {items.map((item) => {\n              const areaConvert = Math.round(item.area / 2.59)\n              return (\n                <React.Fragment key={nanoid()}>\n                  <Grid.Row textAlign=\"center\" color=\"black\">\n                    <Grid.Column width={16}>\n                      <Button\n                        labelPosition=\"right\"\n                        icon=\"right chevron\"\n                        basic\n                        color=\"yellow\"\n                        fluid\n                        content={item.name.common}\n                        onClick={() => handleClick(item)}\n                      ></Button>\n                    </Grid.Column>\n                  </Grid.Row>\n                  <Grid.Row>\n                    <Grid.Column width={4}>CCA3</Grid.Column>\n                    <Grid.Column width={12}>{item.cca3}</Grid.Column>\n                  </Grid.Row>\n                  <Grid.Row>\n                    <Grid.Column width={4}>Flag</Grid.Column>\n                    <Grid.Column width={12}>\n                      <Image\n                        size=\"small\"\n                        src={isIE ? item.flags.png : item.flags.svg}\n                      />\n                    </Grid.Column>\n                  </Grid.Row>\n                  <Grid.Row>\n                    <Grid.Column width={4}>Capital</Grid.Column>\n                    <Grid.Column width={12}>{item.capital}</Grid.Column>\n                  </Grid.Row>\n                  <Grid.Row>\n                    <Grid.Column width={4}>Region</Grid.Column>\n                    <Grid.Column width={12}>{item.region}</Grid.Column>\n                  </Grid.Row>\n                  <Grid.Row>\n                    <Grid.Column width={4}>Subregion</Grid.Column>\n                    <Grid.Column width={12}>{item.subregion}</Grid.Column>\n                  </Grid.Row>\n                  <Grid.Row>\n                    <Grid.Column width={4}>Population</Grid.Column>\n                    <Grid.Column width={12}>\n                      {item.population.toLocaleString()}\n                    </Grid.Column>\n                  </Grid.Row>\n                  <Grid.Row>\n                    <Grid.Column width={4}>\n                      {unit === 'metric' ? 'Area kmÂ²' : 'Area miÂ²'}\n                    </Grid.Column>\n                    <Grid.Column width={12}>\n                      {unit === 'imperial'\n                        ? areaConvert.toLocaleString()\n                        : item.area.toLocaleString()}\n                    </Grid.Column>\n                  </Grid.Row>\n                </React.Fragment>\n              )\n            })}\n          </Grid>\n        </>\n      ) : null}\n    </Segment>\n  )\n}\n\nexport default CountriesTableMobile\n"],"sourceRoot":""}