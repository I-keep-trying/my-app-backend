{"version":3,"sources":["reducers/weatherReducer.js","reducers/timeZoneReducer.js","App.js","store.js","index.js","reducers/countryReducer.js","services/countriesData.js"],"names":["getWeather","location","dispatch","a","countryService","weather","type","data","weatherReducer","state","action","getTimeZone","timeZone","timeZoneReducer","Countries","loadable","CountriesMobile","App","useDispatch","useEffect","initializeCountries","undefined","useSelector","countries","initialCountries","isMobile","reducer","combineReducers","countryReducer","unit","unitReducer","time","menu","menuReducer","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById","show","getAll","toggleUnit","toggleMenu","resetFilter","reset","searchCountries","input","filterCountries","country","filterCountriesByContinent","continent","filterCountriesByRegion","region","filterCountriesBySubRegion","subregion","noCapitals","filter","item","name","common","antarctica","c","map","capital","bouvetIsland","heardIsland","macau","usMinor","southGeorgia","frenchSouthern","otherCountries","filtered","toSearch","toLowerCase","startsWith","length","continents","selectContinent","continentFiltered","countriesFiltered","selectRegion","regionFiltered","selectSubRegion","subregionFiltered","s","newState","console","log","axios","get","response","params","res"],"mappings":"2LAWaA,EAAa,SAACC,GACzB,8CAAO,WAAOC,GAAP,eAAAC,EAAA,sEACiBC,IAAeJ,WAAWC,GAD3C,OACCI,EADD,OAELH,EAAS,CACPI,KAAM,cACNC,KAAMF,IAJH,2CAAP,uDASaG,IAnBQ,WAAyB,IAAxBC,EAAuB,uDAAf,GAAIC,EAAW,uCAC7C,MACO,gBADCA,EAAOJ,KAEJI,EAAOH,KAEPE,I,wGCIAE,EAAc,SAACV,GAC1B,8CAAO,WAAOC,GAAP,eAAAC,EAAA,sEACkBC,IAAeO,YAAYV,GAD7C,OACCW,EADD,OAELV,EAAS,CACPI,KAAM,gBACNC,KAAMK,IAJH,2CAAP,uDASaC,IAnBS,WAAyB,IAAxBJ,EAAuB,uDAAf,GAAIC,EAAW,uCAC9C,MACO,kBADCA,EAAOJ,KAEJI,EAAOH,KAEPE,I,mhECDPK,EAAYC,aAAS,kBAAM,+DAC3BC,EAAkBD,aAAS,kBAAM,sEAwBxBE,MAtBf,WACE,IAAMf,EAAWgB,cAUjB,OARAC,qBAAU,WACRjB,EAASkB,iBACR,CAAClB,SAMiBmB,IAJHC,aAAY,SAACb,GAC7B,OAAOA,EAAMc,UAAUC,oBAIvBC,WACE,cAACT,EAAD,IAEA,cAACF,EAAD,IAGF,8B,6CChBEY,EAAUC,0BAAgB,CAC9BJ,UAAWK,IACXC,KAAMC,IACNzB,QAASG,IACTuB,KAAMlB,IACNmB,KAAMC,MAKOC,EAFDC,sBAAYT,EAASU,8BAAoBC,0BAAgBC,OCVvEC,IAASC,OACP,cAAC,IAAD,CAAUN,MAAOA,EAAjB,SACE,cAAC,EAAD,MAEFO,SAASC,eAAe,U,2cCyNbZ,EAAc,WAAyC,IAAxCrB,EAAuC,uDAA/B,CAAEoB,KAAM,UAAYnB,EAAW,uCACjE,GACO,gBADCA,EAAOJ,KACb,CACE,IAAMuB,EAAsB,WAAfpB,EAAMoB,KAAoB,WAAa,SACpD,OAAO,2BAAKpB,GAAZ,IAAmBoB,KAAMA,IAEzB,OAAOpB,GAIAwB,EAAc,WAAsC,IAArCxB,EAAoC,uDAA5B,CAAEkC,MAAM,GAASjC,EAAW,uCAC9D,GACO,gBADCA,EAAOJ,KACb,CACE,IAAMqC,GAAsB,IAAflC,EAAMkC,KACnB,OAAO,2BAAKlC,GAAZ,IAAmBkC,KAAMA,IAEzB,OAAOlC,GAMAW,EAAsB,WACjC,8CAAO,WAAOlB,GAAP,eAAAC,EAAA,sEACmBC,IAAewC,SADlC,OACCrB,EADD,OAELrB,EAAS,CACPI,KAAM,iBACNC,KAAMgB,IAJH,2CAAP,uDASWsB,EAAa,SAAChB,GACzB,MAAO,CACLvB,KAAM,cACNuB,KAAMA,IAIGiB,EAAa,SAACH,GACzB,MAAO,CACLrC,KAAM,cACNqC,KAAMA,IAIGI,EAAc,SAACC,GAC1B,MAAO,CACL1C,KAAM,eACN0C,MAAOA,IAIEC,EAAkB,SAACC,GAC9B,MAAO,CACL5C,KAAM,mBACN4C,UAISC,EAAkB,SAACC,GAC9B,MAAO,CACL9C,KAAM,mBACN8C,YAISC,EAA6B,SAACC,GACzC,MAAO,CACLhD,KAAM,mBACNgD,cAISC,EAA0B,SAACC,GACtC,MAAO,CACLlD,KAAM,mBACNkD,WAISC,EAA6B,SAACC,GACzC,MAAO,CACLpD,KAAM,mBACNoD,cAIW9B,IA3TQ,WAAyB,IAAxBnB,EAAuB,uDAAf,GAAIC,EAAW,uCAC7C,OAAQA,EAAOJ,MACb,IAAK,iBAEH,IAAMqD,EAAajD,EAAOH,KAAKqD,QAC7B,SAACC,GAAD,MACuB,eAArBA,EAAKC,KAAKC,QACW,kBAArBF,EAAKC,KAAKC,QACW,sCAArBF,EAAKC,KAAKC,QACW,UAArBF,EAAKC,KAAKC,QACW,yCAArBF,EAAKC,KAAKC,QACW,kBAArBF,EAAKC,KAAKC,QACW,wCAArBF,EAAKC,KAAKC,UAIRC,EAAaL,EAChBC,QAAO,SAACK,GAAD,MAAyB,eAAlBA,EAAEH,KAAKC,UACrBG,KAAI,SAACD,GACJ,OAAO,2BAAKA,GAAZ,IAAeE,QAAS,CAAC,mBAAoBT,UAAW,iBAGtDU,EAAeT,EAClBC,QAAO,SAACK,GAAD,MAAyB,kBAAlBA,EAAEH,KAAKC,UACrBG,KAAI,SAACD,GACJ,OAAO,2BAAKA,GAAZ,IAAeE,QAAS,CAAC,QAAST,UAAW,iBAG3CW,EAAcV,EACjBC,QAAO,SAACK,GAAD,MAAyB,sCAAlBA,EAAEH,KAAKC,UACrBG,KAAI,SAACD,GACJ,OAAO,2BAAKA,GAAZ,IAAeE,QAAS,CAAC,QAAST,UAAW,iBAG3CY,EAAQX,EACXC,QAAO,SAACK,GAAD,MAAyB,UAAlBA,EAAEH,KAAKC,UACrBG,KAAI,SAACD,GACJ,OAAO,2BAAKA,GAAZ,IAAeE,QAAS,CAAC,cAGvBI,EAAUZ,EACbC,QAAO,SAACK,GAAD,MAAyB,yCAAlBA,EAAEH,KAAKC,UACrBG,KAAI,SAACD,GACJ,OAAO,2BAAKA,GAAZ,IAAeE,QAAS,CAAC,sBAGvBK,EAAeb,EAClBC,QAAO,SAACK,GAAD,MAAyB,kBAAlBA,EAAEH,KAAKC,UACrBG,KAAI,SAACD,GACJ,OAAO,2BAAKA,GAAZ,IAAeP,UAAW,iBAGxBe,EAAiBd,EACpBC,QAAO,SAACK,GAAD,MAAyB,wCAAlBA,EAAEH,KAAKC,UACrBG,KAAI,SAACD,GACJ,OAAO,2BAAKA,GAAZ,IAAeP,UAAW,iBAIxBgB,EAAiBhE,EAAOH,KAAKqD,QACjC,SAACC,GAAD,MACuB,eAArBA,EAAKC,KAAKC,QACW,kBAArBF,EAAKC,KAAKC,QACW,sCAArBF,EAAKC,KAAKC,QACW,UAArBF,EAAKC,KAAKC,QACW,yCAArBF,EAAKC,KAAKC,QACW,kBAArBF,EAAKC,KAAKC,QACW,wCAArBF,EAAKC,KAAKC,UAIRvC,EAAgB,sBACjBkD,GADiB,CAEpBF,EAAa,GACbH,EAAY,GACZC,EAAM,GACNC,EAAQ,GACRP,EAAW,GACXI,EAAa,GACbK,EAAe,KAEjB,MAAO,CACLjD,mBACAoC,OAAQ,CACNV,MAAO,GACPE,QAAS,GACTE,UAAW,MACXE,OAAQ,MACRE,UAAW,GACXV,OAAO,GAET2B,SAAU,IAEd,IAAK,mBACH,GAAqB,KAAjBjE,EAAOwC,MACT,OAAO,2BACFzC,GADL,IAEEmD,OAAQ,CACNV,MAAO,GACPE,QAAS,GACTE,UAAW,MACXE,OAAQ,MACRE,UAAW,GACXV,OAAO,GAET2B,SAAU,KAEP,GAAIjE,EAAOwC,MAAO,CACvB,IAAM0B,EAAQ,2BACTnE,GADS,IAEZmD,OAAO,2BACFnD,EAAMmD,QADL,IAEJV,MAAOxC,EAAOwC,MAAM2B,kBAGlBF,EAAWC,EAASpD,iBAAiBoC,QAAO,SAACK,GAAD,OAChDA,EAAEH,KAAKC,OAAOc,cAAcC,WAAWF,EAAShB,OAAOV,UAEzD,OAA2B,IAApByB,EAASI,OAAT,2BAEEH,GAFF,IAGDhB,OAAO,2BACFgB,EAAShB,QADR,IAEJR,QAASuB,EAAS,GAAGb,KAAKC,OAC1BT,UAAWqB,EAAS,GAAGK,WAAW,GAClCxB,OAAQmB,EAAS,GAAGnB,OACpBE,UAAWiB,EAAS,GAAGjB,YAEzBiB,SAAUA,IAVT,2BAYEC,GAZF,IAYYD,SAAUA,IACxB,GAAIjE,EAAO0C,QAAS,CACzB,IAAMwB,EAAQ,2BACTnE,GADS,IAEZmD,OAAO,2BACFnD,EAAMmD,QADL,IAEJR,QAAS1C,EAAO0C,QAAQU,KAAKC,OAAOc,cACpCvB,UAAW5C,EAAO0C,QAAQ4B,WAAW,GAAGH,cACxCrB,OAAQ9C,EAAO0C,QAAQI,OACvBE,UAAWhD,EAAO0C,QAAQM,cAGxBiB,EAAWC,EAASpD,iBAAiBoC,QAAO,SAACK,GAAD,OAChDA,EAAEH,KAAKC,OAAOc,cAAcC,WAAWF,EAAShB,OAAOR,YAEzD,OAAO,2BAAKwB,GAAZ,IAAsBD,SAAUA,IAC3B,GAAIjE,EAAO4C,UAAW,CAC3B,IAAM2B,EAAe,2BAChBxE,GADgB,IAEnBmD,OAAO,2BACFnD,EAAMmD,QADL,IAEJN,UAAW5C,EAAO4C,UAAUuB,kBAG1BK,EACiC,QAArCD,EAAgBrB,OAAON,UACnB2B,EAAgBzD,iBAChByD,EAAgBzD,iBAAiBoC,QAC/B,SAACK,GAAD,OACEA,EAAEe,WAAW,GAAGH,gBAChBI,EAAgBrB,OAAON,aAE3B6B,EAAiB,2BAClBF,GADkB,IAErBN,SAAUO,EACVtB,OAAO,2BACFqB,EAAgBrB,QADf,IAEJV,MAAO,GACPE,QAAS,GACTE,UAAW5C,EAAO4C,UAAUuB,cAC5BrB,OAAQ,MACRE,UAAW,OAGf,OAAOyB,EACF,GAAIzE,EAAO8C,OAAQ,CACxB,IAAM4B,EAAY,2BACb3E,GADa,IAEhBmD,OAAO,2BAAMnD,EAAMmD,QAAb,IAAqBJ,OAAQ9C,EAAO8C,OAAOqB,kBAG7CQ,EAC2B,QAA/BD,EAAaxB,OAAOJ,OAChB4B,EAAa5D,iBACb4D,EAAa5D,iBAAiBoC,QAC5B,SAACK,GAAD,OAAOA,EAAET,OAAOqB,gBAAkBO,EAAaxB,OAAOJ,UAG9D,OAAO,2BACF4B,GADL,IAEET,SAAUU,IAEP,GAAI3E,EAAOgD,UAAW,CAC3B,IAAM4B,EAAe,2BAChB7E,GADgB,IAEnBmD,OAAO,2BACFnD,EAAMmD,QADL,IAEJF,UAAWhD,EAAOgD,UAAUmB,kBAG1BU,EAAoBD,EAAgB9D,iBAAiBoC,QACzD,SAAC4B,GAAD,aAAO,UAAAA,EAAE9B,iBAAF,eAAamB,iBAAkBS,EAAgB1B,OAAOF,aAEzD+B,EAAQ,2BAAQH,GAAR,IAAyBX,SAAUY,IACjD,OAAOE,EAEP,OAAOhF,EAGX,IAAK,eACH,OAAO,2BACFA,GADL,IAEEmD,OAAQ,CACNV,MAAO,GACPE,QAAS,GACTE,UAAW,GACXE,OAAQ,MACRE,UAAW,GACXV,OAAO,GAET2B,SAAU,KAEd,QACE,OAAOlE,K,+EC/NPmC,EAAM,uCAAG,4BAAAzC,EAAA,6DACbuF,QAAQC,IAAI,UADC,SAEUC,IAAMC,IAHf,kBACD,cAEPC,EAFO,yBAGNA,EAASvF,MAHH,2CAAH,qDAMNP,EAAU,uCAAG,WAAO+F,GAAP,eAAA5F,EAAA,6DACnBuF,QAAQC,IAAI,cADO,SAECC,IAAMC,IAAN,2BACIE,EAAO9F,SAAS,GADpB,gBAC8B8F,EAAO9F,SAAS,GAD9C,iBACyD8F,EAAOlE,OAHjE,cAEXmE,EAFW,yBAKVA,EAAIzF,MALM,2CAAH,sDAQVI,EAAW,uCAAG,WAAOoF,GAAP,eAAA5F,EAAA,sEACAyF,IAAMC,IAAN,wBACCE,EAAO9F,SAAS,GADjB,gBAC2B8F,EAAO9F,SAAS,KAF3C,cACZ+F,EADY,yBAIXA,EAAIzF,MAJO,2CAAH,sDAOF,KAAEqC,SAAQ5C,aAAYW,iB","file":"static/js/main.c7392c1f.chunk.js","sourcesContent":["import countryService from '../services/countriesData'\n\nconst weatherReducer = (state = {}, action) => {\n  switch (action.type) {\n    case 'GET_WEATHER':\n      return action.data\n    default:\n      return state\n  }\n}\n\nexport const getWeather = (location) => {\n  return async (dispatch) => {\n    const weather = await countryService.getWeather(location)\n    dispatch({\n      type: 'GET_WEATHER',\n      data: weather,\n    })\n  }\n}\n\nexport default weatherReducer\n","import countryService from '../services/countriesData'\n\nconst timeZoneReducer = (state = {}, action) => {\n  switch (action.type) {\n    case 'GET_TIME_ZONE':\n      return action.data\n    default:\n      return state\n  }\n}\n\nexport const getTimeZone = (location) => {\n  return async (dispatch) => {\n    const timeZone = await countryService.getTimeZone(location)\n    dispatch({\n      type: 'GET_TIME_ZONE',\n      data: timeZone,\n    })\n  }\n}\n\nexport default timeZoneReducer\n","import React, { useEffect } from 'react'\r\nimport { isMobile } from 'react-device-detect'\r\nimport loadable from '@loadable/component'\r\nimport { initializeCountries } from './reducers/countryReducer'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n\r\nconst Countries = loadable(() => import('./pages/Countries'))\r\nconst CountriesMobile = loadable(() => import('./pages/CountriesMobile'))\r\n\r\nfunction App() {\r\n  const dispatch = useDispatch()\r\n\r\n  useEffect(() => {\r\n    dispatch(initializeCountries())\r\n  }, [dispatch])\r\n\r\n  const countries = useSelector((state) => {\r\n    return state.countries.initialCountries\r\n  })\r\n\r\n  return countries !== undefined ? (\r\n    isMobile ? (\r\n      <CountriesMobile />\r\n    ) : (\r\n      <Countries />\r\n    )\r\n  ) : (\r\n    <></>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import { createStore, combineReducers, applyMiddleware } from 'redux'\nimport thunk from 'redux-thunk'\nimport { composeWithDevTools } from 'redux-devtools-extension'\n\nimport countryReducer, {\n  unitReducer,\n  menuReducer,\n} from './reducers/countryReducer'\nimport weatherReducer from './reducers/weatherReducer'\nimport timeZoneReducer from './reducers/timeZoneReducer'\n\nconst reducer = combineReducers({\n  countries: countryReducer,\n  unit: unitReducer,\n  weather: weatherReducer,\n  time: timeZoneReducer,\n  menu: menuReducer,\n})\n\nconst store = createStore(reducer, composeWithDevTools(applyMiddleware(thunk)))\n\nexport default store\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport { Provider } from 'react-redux'\r\nimport './assets/css/semantic.css'\r\nimport 'react-app-polyfill/ie11'\r\nimport 'core-js'\r\nimport App from './App'\r\nimport store from './store'\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n)\r\n//  \"proxy\": \"https://sheltered-scrubland-08732.herokuapp.com\",\r\n// local proxy: \"proxy\": \"http://localhost:3001/\"\r\n// backend: https://github.com/I-keep-trying/my-app-backend\r\n","import countryService from '../services/countriesData'\r\n\r\n/* ---------- Reducers ------------- */\r\nconst countryReducer = (state = [], action) => {\r\n  switch (action.type) {\r\n    case 'INIT_COUNTRIES':\r\n      // Find countries from restcountries.com api with missing keys\r\n      const noCapitals = action.data.filter(\r\n        (item) =>\r\n          item.name.common === 'Antarctica' ||\r\n          item.name.common === 'Bouvet Island' ||\r\n          item.name.common === 'Heard Island and McDonald Islands' ||\r\n          item.name.common === 'Macau' ||\r\n          item.name.common === 'United States Minor Outlying Islands' ||\r\n          item.name.common === 'South Georgia' ||\r\n          item.name.common === 'French Southern and Antarctic Lands'\r\n      )\r\n\r\n      // Create replacements inserting missing keys\r\n      const antarctica = noCapitals\r\n        .filter((c) => c.name.common === 'Antarctica')\r\n        .map((c) => {\r\n          return { ...c, capital: ['No Capital City'], subregion: 'Antarctic' }\r\n        })\r\n\r\n      const bouvetIsland = noCapitals\r\n        .filter((c) => c.name.common === 'Bouvet Island')\r\n        .map((c) => {\r\n          return { ...c, capital: ['Oslo'], subregion: 'Antarctic' }\r\n        })\r\n\r\n      const heardIsland = noCapitals\r\n        .filter((c) => c.name.common === 'Heard Island and McDonald Islands')\r\n        .map((c) => {\r\n          return { ...c, capital: ['Bern'], subregion: 'Antarctic' }\r\n        })\r\n\r\n      const macau = noCapitals\r\n        .filter((c) => c.name.common === 'Macau')\r\n        .map((c) => {\r\n          return { ...c, capital: ['Macau'] }\r\n        })\r\n\r\n      const usMinor = noCapitals\r\n        .filter((c) => c.name.common === 'United States Minor Outlying Islands')\r\n        .map((c) => {\r\n          return { ...c, capital: ['Washington DC'] }\r\n        })\r\n\r\n      const southGeorgia = noCapitals\r\n        .filter((c) => c.name.common === 'South Georgia')\r\n        .map((c) => {\r\n          return { ...c, subregion: 'Antarctic' }\r\n        })\r\n\r\n      const frenchSouthern = noCapitals\r\n        .filter((c) => c.name.common === 'French Southern and Antarctic Lands')\r\n        .map((c) => {\r\n          return { ...c, subregion: 'Antarctic' }\r\n        })\r\n\r\n      // Remove defective country objects\r\n      const otherCountries = action.data.filter(\r\n        (item) =>\r\n          item.name.common !== 'Antarctica' &&\r\n          item.name.common !== 'Bouvet Island' &&\r\n          item.name.common !== 'Heard Island and McDonald Islands' &&\r\n          item.name.common !== 'Macau' &&\r\n          item.name.common !== 'United States Minor Outlying Islands' &&\r\n          item.name.common !== 'South Georgia' &&\r\n          item.name.common !== 'French Southern and Antarctic Lands'\r\n      )\r\n\r\n      // Insert replacement objects with keys in place\r\n      const initialCountries = [\r\n        ...otherCountries,\r\n        southGeorgia[0],\r\n        heardIsland[0],\r\n        macau[0],\r\n        usMinor[0],\r\n        antarctica[0],\r\n        bouvetIsland[0],\r\n        frenchSouthern[0],\r\n      ]\r\n      return {\r\n        initialCountries,\r\n        filter: {\r\n          input: '',\r\n          country: '',\r\n          continent: 'All',\r\n          region: 'All',\r\n          subregion: '',\r\n          reset: false,\r\n        },\r\n        filtered: [],\r\n      }\r\n    case 'FILTER_COUNTRIES':\r\n      if (action.input === '') {\r\n        return {\r\n          ...state,\r\n          filter: {\r\n            input: '',\r\n            country: '',\r\n            continent: 'All',\r\n            region: 'All',\r\n            subregion: '',\r\n            reset: false,\r\n          },\r\n          filtered: [],\r\n        }\r\n      } else if (action.input) {\r\n        const toSearch = {\r\n          ...state,\r\n          filter: {\r\n            ...state.filter,\r\n            input: action.input.toLowerCase(),\r\n          },\r\n        }\r\n        const filtered = toSearch.initialCountries.filter((c) =>\r\n          c.name.common.toLowerCase().startsWith(toSearch.filter.input)\r\n        )\r\n        return filtered.length === 1\r\n          ? {\r\n              ...toSearch,\r\n              filter: {\r\n                ...toSearch.filter,\r\n                country: filtered[0].name.common,\r\n                continent: filtered[0].continents[0],\r\n                region: filtered[0].region,\r\n                subregion: filtered[0].subregion,\r\n              },\r\n              filtered: filtered,\r\n            }\r\n          : { ...toSearch, filtered: filtered }\r\n      } else if (action.country) {\r\n        const toSearch = {\r\n          ...state,\r\n          filter: {\r\n            ...state.filter,\r\n            country: action.country.name.common.toLowerCase(),\r\n            continent: action.country.continents[0].toLowerCase(),\r\n            region: action.country.region,\r\n            subregion: action.country.subregion,\r\n          },\r\n        }\r\n        const filtered = toSearch.initialCountries.filter((c) =>\r\n          c.name.common.toLowerCase().startsWith(toSearch.filter.country)\r\n        )\r\n        return { ...toSearch, filtered: filtered }\r\n      } else if (action.continent) {\r\n        const selectContinent = {\r\n          ...state,\r\n          filter: {\r\n            ...state.filter,\r\n            continent: action.continent.toLowerCase(),\r\n          },\r\n        }\r\n        const continentFiltered =\r\n          selectContinent.filter.continent === 'All'\r\n            ? selectContinent.initialCountries\r\n            : selectContinent.initialCountries.filter(\r\n                (c) =>\r\n                  c.continents[0].toLowerCase() ===\r\n                  selectContinent.filter.continent\r\n              )\r\n        const countriesFiltered = {\r\n          ...selectContinent,\r\n          filtered: continentFiltered,\r\n          filter: {\r\n            ...selectContinent.filter,\r\n            input: '',\r\n            country: '',\r\n            continent: action.continent.toLowerCase(),\r\n            region: 'All',\r\n            subregion: '',\r\n          },\r\n        }\r\n        return countriesFiltered\r\n      } else if (action.region) {\r\n        const selectRegion = {\r\n          ...state,\r\n          filter: { ...state.filter, region: action.region.toLowerCase() },\r\n        }\r\n\r\n        const regionFiltered =\r\n          selectRegion.filter.region === 'all'\r\n            ? selectRegion.initialCountries\r\n            : selectRegion.initialCountries.filter(\r\n                (c) => c.region.toLowerCase() === selectRegion.filter.region\r\n              )\r\n\r\n        return {\r\n          ...selectRegion,\r\n          filtered: regionFiltered,\r\n        }\r\n      } else if (action.subregion) {\r\n        const selectSubRegion = {\r\n          ...state,\r\n          filter: {\r\n            ...state.filter,\r\n            subregion: action.subregion.toLowerCase(),\r\n          },\r\n        }\r\n        const subregionFiltered = selectSubRegion.initialCountries.filter(\r\n          (s) => s.subregion?.toLowerCase() === selectSubRegion.filter.subregion\r\n        )\r\n        const newState = { ...selectSubRegion, filtered: subregionFiltered }\r\n        return newState\r\n      } else {\r\n        return state\r\n      }\r\n\r\n    case 'RESET_FILTER':\r\n      return {\r\n        ...state,\r\n        filter: {\r\n          input: '',\r\n          country: '',\r\n          continent: '',\r\n          region: 'All',\r\n          subregion: '',\r\n          reset: true,\r\n        },\r\n        filtered: [],\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport const unitReducer = (state = { unit: 'metric' }, action) => {\r\n  switch (action.type) {\r\n    case 'UNIT_TOGGLE':\r\n      const unit = state.unit === 'metric' ? 'imperial' : 'metric'\r\n      return { ...state, unit: unit }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport const menuReducer = (state = { show: false }, action) => {\r\n  switch (action.type) {\r\n    case 'MENU_TOGGLE':\r\n      const show = state.show === false ? true : false\r\n      return { ...state, show: show }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\n/* ------------ Actions ------------- */\r\n\r\nexport const initializeCountries = () => {\r\n  return async (dispatch) => {\r\n    const countries = await countryService.getAll()\r\n    dispatch({\r\n      type: 'INIT_COUNTRIES',\r\n      data: countries,\r\n    })\r\n  }\r\n}\r\n\r\nexport const toggleUnit = (unit) => {\r\n  return {\r\n    type: 'UNIT_TOGGLE',\r\n    unit: unit,\r\n  }\r\n}\r\n\r\nexport const toggleMenu = (show) => {\r\n  return {\r\n    type: 'MENU_TOGGLE',\r\n    show: show,\r\n  }\r\n}\r\n\r\nexport const resetFilter = (reset) => {\r\n  return {\r\n    type: 'RESET_FILTER',\r\n    reset: reset,\r\n  }\r\n}\r\n\r\nexport const searchCountries = (input) => {\r\n  return {\r\n    type: 'FILTER_COUNTRIES',\r\n    input,\r\n  }\r\n}\r\n\r\nexport const filterCountries = (country) => {\r\n  return {\r\n    type: 'FILTER_COUNTRIES',\r\n    country,\r\n  }\r\n}\r\n\r\nexport const filterCountriesByContinent = (continent) => {\r\n  return {\r\n    type: 'FILTER_COUNTRIES',\r\n    continent,\r\n  }\r\n}\r\n\r\nexport const filterCountriesByRegion = (region) => {\r\n  return {\r\n    type: 'FILTER_COUNTRIES',\r\n    region,\r\n  }\r\n}\r\n\r\nexport const filterCountriesBySubRegion = (subregion) => {\r\n  return {\r\n    type: 'FILTER_COUNTRIES',\r\n    subregion,\r\n  }\r\n}\r\n\r\nexport default countryReducer\r\n","import axios from 'axios'\r\n\r\nconst baseUrl = '/api/countries'\r\nconst getAll = async () => {\r\n  console.log('getAll')\r\n  const response = await axios.get(baseUrl)\r\n  return response.data\r\n}\r\n\r\nconst getWeather = async (params) => {\r\nconsole.log('getWeather')\r\n  const res = await axios.get(\r\n    `/api/weather/lat/${params.location[0]}/lng/${params.location[1]}/unit/${params.unit}`\r\n  )\r\n  return res.data\r\n}\r\n\r\nconst getTimeZone = async (params) => {\r\n  const res = await axios.get(\r\n    `/api/time/lat/${params.location[0]}/lng/${params.location[1]}`\r\n  )\r\n  return res.data\r\n}\r\n\r\nexport default { getAll, getWeather, getTimeZone }\r\n"],"sourceRoot":""}