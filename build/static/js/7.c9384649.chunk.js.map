{"version":3,"sources":["util/tileLayer.js","pages/Map.js"],"names":["tileLayer","attribution","url","GetCoordinates","useState","setBounds","map","useMap","useEffect","initBounds","getBounds","info","L","DomUtil","create","positon","Control","extend","options","position","onAdd","textContent","on","e","latlng","addControl","CustomMap1","lt","lg","zm","geo","center","MapContainer","id","isMobile","zoom","scrollWheelZoom","TileLayer","GeoJSON","data","geojson","pathOptions","color","weight","opacity","fillOpacity","display_name","CustomMap","React","memo"],"mappings":"8NAMeA,EANG,CAChBC,YACE,2EACFC,IAAK,6E,QCGDC,EAAiB,WACrB,MAAsBC,mBAAS,IAAtBC,EAAT,oBAEMC,EAAMC,cA2BZ,OAzBAC,qBAAU,WACR,GAAKF,EAAL,CACA,IAAMG,EAAaH,EAAII,YACvBL,EAAU,CAACI,IAEX,IAAME,EAAOC,IAAEC,QAAQC,OAAO,MAAO,UAE/BC,EAAUH,IAAEI,QAAQC,OAAO,CAC/BC,QAAS,CACPC,SAAU,cAGZC,MAAO,WAEL,OADAT,EAAKU,YAAc,eACZV,KAIXL,EAAIgB,GAAG,SAAS,SAACC,GACfZ,EAAKU,YAAcE,EAAEC,UAGvBlB,EAAImB,WAAW,IAAIV,MAClB,CAACT,IAEG,MAGHoB,EAAa,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,GAAIC,EAAkB,EAAlBA,GAAIC,EAAc,EAAdA,GAAIC,EAAU,EAAVA,IAG1BC,EAAS,CAACJ,EAAIC,GAEpB,OACE,eAACI,EAAA,EAAD,CACEC,GAAIC,WAAW,aAAe,MAC9BH,OAAQA,EACRI,KAAMN,EACNO,iBAAiBF,WAJnB,UAME,cAACG,EAAA,EAAD,eAAerC,IACf,cAACsC,EAAA,EAAD,CAEEC,KAAMT,EAAIU,QACVC,YAAa,CACXC,MAhBM,oBAiBNC,OAAQ,EACRC,QAAS,EACTC,YAlBY,KAWhB,UACUf,EAAIgB,aADd,aAUA,cAAC,EAAD,QAKAC,EAAYC,IAAMC,KAAKvB,GAEdqB","file":"static/js/7.c9384649.chunk.js","sourcesContent":["const tileLayer = {\n  attribution:\n    '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors',\n  url: 'https://tiles.stadiamaps.com/tiles/alidade_smooth_dark/{z}/{x}/{y}{r}.png',\n}\n\nexport default tileLayer\n  /*   const maps = {\n    light: 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',\n    dark: 'https://tiles.stadiamaps.com/tiles/alidade_smooth_dark/{z}/{x}/{y}{r}.png',\n    smooth:\n      'https://tiles.stadiamaps.com/tiles/alidade_smooth/{z}/{x}/{y}{r}.png',\n    outdoors: 'https://tiles.stadiamaps.com/tiles/outdoors/{z}/{x}/{y}{r}.png',\n    streets: 'https://tiles.stadiamaps.com/tiles/osm_bright/{z}/{x}/{y}{r}.png',\n    spinal: `https://{s}.tile.thunderforest.com/spinal-map/{z}/{x}/{y}.png?apikey=${process.env.REACT_APP_THUNDERFOREST_API_KEY}`,\n    atlas: `https://{s}.tile.thunderforest.com/atlas/{z}/{x}/{y}.png?apikey=${process.env.REACT_APP_THUNDERFOREST_API_KEY}`,\n  }\n\n  const pointerIcon = new L.Icon({\n    iconUrl: newMarker,\n    iconSize: [50, 58], // size of the icon\n    iconAnchor: center,\n    popupAnchor: [0, -60], // changed popup position\n  }) */","import React, { useState, useEffect } from 'react'\nimport { isMobile } from 'react-device-detect'\nimport { MapContainer, TileLayer, GeoJSON, useMap } from 'react-leaflet'\nimport L from 'leaflet'\nimport tileLayer from '../util/tileLayer'\n\nconst GetCoordinates = () => {\n  const [, setBounds] = useState([])\n\n  const map = useMap()\n\n  useEffect(() => {\n    if (!map) return\n    const initBounds = map.getBounds()\n    setBounds([initBounds])\n\n    const info = L.DomUtil.create('div', 'legend')\n\n    const positon = L.Control.extend({\n      options: {\n        position: 'bottomleft',\n      },\n\n      onAdd: function () {\n        info.textContent = 'Click on map'\n        return info\n      },\n    })\n\n    map.on('click', (e) => {\n      info.textContent = e.latlng\n    })\n\n    map.addControl(new positon())\n  }, [map])\n\n  return null\n}\n\nconst CustomMap1 = ({ lt, lg, zm, geo }) => {\n  const color = 'rgb(175, 65, 133)'\n  const fillOpacity = 0.3\n  const center = [lt, lg]\n\n  return (\n    <MapContainer\n      id={isMobile ? 'map-mobile' : 'map'}\n      center={center}\n      zoom={zm}\n      scrollWheelZoom={isMobile ? false : true}\n    >\n      <TileLayer {...tileLayer} />\n      <GeoJSON\n        key={`${geo.display_name}-geojson`}\n        data={geo.geojson}\n        pathOptions={{\n          color,\n          weight: 2,\n          opacity: 1,\n          fillOpacity,\n        }}\n      />\n      <GetCoordinates />\n    </MapContainer>\n  )\n}\n\nconst CustomMap = React.memo(CustomMap1)\n\nexport default CustomMap\n"],"sourceRoot":""}